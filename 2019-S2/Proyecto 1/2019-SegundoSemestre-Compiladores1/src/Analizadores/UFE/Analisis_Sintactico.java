
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.UFE;

import java_cup.runtime.Symbol;
import Estructuras.*;
import Nodos.NodoSintactico;
import Modelos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\002\003\000\002\014" +
    "\004\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\003\005\000\002\003\006\000\002\003\011\000\002\004" +
    "\005\000\002\004\003\000\002\005\005\000\002\005\007" +
    "\000\002\005\010\000\002\005\006\000\002\005\003\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\004\000\002\010" +
    "\005\000\002\010\004\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\013\005\000\002\013" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\006\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\006\010\000\002\006" +
    "\011\000\002\006\011\000\002\006\012\000\002\007\004" +
    "\000\002\007\005\000\002\007\006\000\002\016\007\000" +
    "\002\017\010\000\002\017\011\000\002\020\010\000\002" +
    "\020\011\000\002\021\011\000\002\021\012\000\002\021" +
    "\011\000\002\057\004\000\002\057\004\000\002\057\003" +
    "\000\002\057\003\000\002\022\007\000\002\022\006\000" +
    "\002\023\004\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\055\006\000\002\033\006\000\002\033\010\000" +
    "\002\032\012\000\002\032\011\000\002\031\013\000\002" +
    "\031\012\000\002\044\004\000\002\044\003\000\002\045" +
    "\012\000\002\046\011\000\002\050\004\000\002\050\003" +
    "\000\002\047\011\000\002\030\012\000\002\030\014\000" +
    "\002\027\011\000\002\027\012\000\002\027\010\000\002" +
    "\027\011\000\002\026\011\000\002\026\012\000\002\026" +
    "\010\000\002\026\011\000\002\040\003\000\002\040\005" +
    "\000\002\040\003\000\002\025\013\000\002\025\012\000" +
    "\002\025\012\000\002\025\011\000\002\034\004\000\002" +
    "\034\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\041\004\000" +
    "\002\041\003\000\002\042\003\000\002\042\005\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\051" +
    "\004\000\002\051\003\000\002\043\003\000\002\043\005" +
    "\000\002\043\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\004\000\002\036\005\000\002\036\003\000\002\036" +
    "\006\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\005\000" +
    "\002\052\004\000\002\052\003\000\002\053\003\000\002" +
    "\053\005\000\002\054\005\000\002\054\007\000\002\056" +
    "\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\050\006\021\013\007\015\034\024\035\034" +
    "\033\035\023\046\042\047\031\073\036\075\040\077\006" +
    "\100\011\101\012\104\046\105\005\106\022\107\032\110" +
    "\004\111\017\001\002\000\114\002\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\046\uffd6\047\uffd6\073\uffd6\075\uffd6\077\uffd6" +
    "\100\uffd6\101\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110" +
    "\uffd6\111\uffd6\001\002\000\114\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\046\uffd5\047\uffd5\073\uffd5\075\uffd5\077\uffd5" +
    "\100\uffd5\101\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110" +
    "\uffd5\111\uffd5\001\002\000\004\024\u018e\001\002\000\024" +
    "\006\021\013\007\024\035\104\051\105\005\106\022\107" +
    "\032\110\004\111\017\001\002\000\054\002\ufffd\006\ufffd" +
    "\013\ufffd\015\ufffd\024\ufffd\027\ufffd\034\ufffd\035\ufffd\046" +
    "\ufffd\047\ufffd\073\ufffd\075\ufffd\077\ufffd\100\ufffd\101\ufffd" +
    "\104\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\001" +
    "\002\000\004\024\u0189\001\002\000\004\024\u0182\001\002" +
    "\000\052\002\000\006\021\013\007\015\034\024\035\034" +
    "\033\035\023\046\042\047\031\073\036\075\040\077\006" +
    "\100\011\101\012\104\046\105\005\106\022\107\032\110" +
    "\004\111\017\001\002\000\054\002\ufffb\006\ufffb\013\ufffb" +
    "\015\ufffb\024\ufffb\027\ufffb\034\ufffb\035\ufffb\046\ufffb\047" +
    "\ufffb\073\ufffb\075\ufffb\077\ufffb\100\ufffb\101\ufffb\104\ufffb" +
    "\105\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\001\002\000" +
    "\054\002\uffcf\006\uffcf\013\uffcf\015\uffcf\024\uffcf\027\uffcf" +
    "\034\uffcf\035\uffcf\046\uffcf\047\uffcf\073\uffcf\075\uffcf\077" +
    "\uffcf\100\uffcf\101\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf" +
    "\110\uffcf\111\uffcf\001\002\000\054\002\ufff6\006\ufff6\013" +
    "\ufff6\015\ufff6\024\ufff6\027\ufff6\034\ufff6\035\ufff6\046\ufff6" +
    "\047\ufff6\073\ufff6\075\ufff6\077\ufff6\100\ufff6\101\ufff6\104" +
    "\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\001\002" +
    "\000\114\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\046\uffd3" +
    "\047\uffd3\073\uffd3\075\uffd3\077\uffd3\100\uffd3\101\uffd3\104" +
    "\uffd3\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\001\002" +
    "\000\054\002\ufffa\006\ufffa\013\ufffa\015\ufffa\024\ufffa\027" +
    "\ufffa\034\ufffa\035\ufffa\046\ufffa\047\ufffa\073\ufffa\075\ufffa" +
    "\077\ufffa\100\ufffa\101\ufffa\104\ufffa\105\ufffa\106\ufffa\107" +
    "\ufffa\110\ufffa\111\ufffa\001\002\000\024\006\021\013\007" +
    "\024\035\104\051\105\005\106\022\107\032\110\004\111" +
    "\017\001\002\000\114\002\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\046\uffd4\047\uffd4\073\uffd4\075\uffd4\077\uffd4\100\uffd4" +
    "\101\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110\uffd4\111" +
    "\uffd4\001\002\000\004\104\u016f\001\002\000\054\002\ufff7" +
    "\006\ufff7\013\ufff7\015\ufff7\024\ufff7\027\ufff7\034\ufff7\035" +
    "\ufff7\046\ufff7\047\ufff7\073\ufff7\075\ufff7\077\ufff7\100\ufff7" +
    "\101\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7\110\ufff7\111" +
    "\ufff7\001\002\000\104\002\ufffc\004\060\005\066\006\056" +
    "\007\057\010\054\012\065\013\ufffc\014\067\015\053\016" +
    "\061\017\070\020\055\021\062\022\063\023\064\024\ufffc" +
    "\027\ufffc\034\ufffc\035\ufffc\046\ufffc\047\ufffc\073\ufffc\075" +
    "\ufffc\077\ufffc\100\ufffc\101\ufffc\104\ufffc\105\ufffc\106\ufffc" +
    "\107\ufffc\110\ufffc\111\ufffc\001\002\000\054\002\ufff8\006" +
    "\ufff8\013\ufff8\015\ufff8\024\ufff8\027\ufff8\034\ufff8\035\ufff8" +
    "\046\ufff8\047\ufff8\073\ufff8\075\ufff8\077\ufff8\100\ufff8\101" +
    "\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8" +
    "\001\002\000\054\002\uffd0\006\uffd0\013\uffd0\015\uffd0\024" +
    "\uffd0\027\uffd0\034\uffd0\035\uffd0\046\uffd0\047\uffd0\073\uffd0" +
    "\075\uffd0\077\uffd0\100\uffd0\101\uffd0\104\uffd0\105\uffd0\106" +
    "\uffd0\107\uffd0\110\uffd0\111\uffd0\001\002\000\054\002\uffcd" +
    "\006\uffcd\013\uffcd\015\uffcd\024\uffcd\027\uffcd\034\uffcd\035" +
    "\uffcd\046\uffcd\047\uffcd\073\uffcd\075\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111" +
    "\uffcd\001\002\000\004\024\243\001\002\000\114\002\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\046\uffd7\047\uffd7\073\uffd7" +
    "\075\uffd7\077\uffd7\100\uffd7\101\uffd7\104\uffd7\105\uffd7\106" +
    "\uffd7\107\uffd7\110\uffd7\111\uffd7\001\002\000\004\104\221" +
    "\001\002\000\004\005\215\001\002\000\024\006\021\013" +
    "\007\024\035\104\051\105\005\106\022\107\032\110\004" +
    "\111\017\001\002\000\006\104\153\105\152\001\002\000" +
    "\054\002\uffce\006\uffce\013\uffce\015\uffce\024\uffce\027\uffce" +
    "\034\uffce\035\uffce\046\uffce\047\uffce\073\uffce\075\uffce\077" +
    "\uffce\100\uffce\101\uffce\104\uffce\105\uffce\106\uffce\107\uffce" +
    "\110\uffce\111\uffce\001\002\000\004\024\132\001\002\000" +
    "\054\002\ufff9\006\ufff9\013\ufff9\015\ufff9\024\ufff9\027\ufff9" +
    "\034\ufff9\035\ufff9\046\ufff9\047\ufff9\073\ufff9\075\ufff9\077" +
    "\ufff9\100\ufff9\101\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9" +
    "\110\ufff9\111\ufff9\001\002\000\004\024\121\001\002\000" +
    "\054\002\ufffe\006\ufffe\013\ufffe\015\ufffe\024\ufffe\027\ufffe" +
    "\034\ufffe\035\ufffe\046\ufffe\047\ufffe\073\ufffe\075\ufffe\077" +
    "\ufffe\100\ufffe\101\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe" +
    "\110\ufffe\111\ufffe\001\002\000\004\002\120\001\002\000" +
    "\114\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\027\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\046\uffda\047" +
    "\uffda\073\uffda\075\uffda\077\uffda\100\uffda\101\uffda\104\uffda" +
    "\105\uffda\106\uffda\107\uffda\110\uffda\111\uffda\001\002\000" +
    "\110\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\011\047\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\027\uffd2" +
    "\030\050\034\uffd2\035\uffd2\046\uffd2\047\uffd2\073\uffd2\075" +
    "\uffd2\077\uffd2\100\uffd2\101\uffd2\104\uffd2\105\uffd2\106\uffd2" +
    "\107\uffd2\110\uffd2\111\uffd2\001\002\000\024\006\021\013" +
    "\007\024\035\104\051\105\005\106\022\107\032\110\004" +
    "\111\017\001\002\000\024\006\021\013\007\024\035\104" +
    "\051\105\005\106\022\107\032\110\004\111\017\001\002" +
    "\000\116\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027" +
    "\uffd2\030\113\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\046\uffd2\047\uffd2\073\uffd2\075\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2" +
    "\001\002\000\040\004\060\005\066\006\056\007\057\010" +
    "\054\012\065\014\067\015\053\016\061\017\070\020\055" +
    "\021\062\022\063\023\064\031\071\001\002\000\024\006" +
    "\021\013\007\024\035\104\051\105\005\106\022\107\032" +
    "\110\004\111\017\001\002\000\024\006\021\013\007\024" +
    "\035\104\051\105\005\106\022\107\032\110\004\111\017" +
    "\001\002\000\024\006\021\013\007\024\035\104\051\105" +
    "\005\106\022\107\032\110\004\111\017\001\002\000\024" +
    "\006\021\013\007\024\035\104\051\105\005\106\022\107" +
    "\032\110\004\111\017\001\002\000\024\006\021\013\007" +
    "\024\035\104\051\105\005\106\022\107\032\110\004\111" +
    "\017\001\002\000\024\006\021\013\007\024\035\104\051" +
    "\105\005\106\022\107\032\110\004\111\017\001\002\000" +
    "\024\006\021\013\007\024\035\104\051\105\005\106\022" +
    "\107\032\110\004\111\017\001\002\000\024\006\021\013" +
    "\007\024\035\104\051\105\005\106\022\107\032\110\004" +
    "\111\017\001\002\000\024\006\021\013\007\024\035\104" +
    "\051\105\005\106\022\107\032\110\004\111\017\001\002" +
    "\000\024\006\021\013\007\024\035\104\051\105\005\106" +
    "\022\107\032\110\004\111\017\001\002\000\024\006\021" +
    "\013\007\024\035\104\051\105\005\106\022\107\032\110" +
    "\004\111\017\001\002\000\024\006\021\013\007\024\035" +
    "\104\051\105\005\106\022\107\032\110\004\111\017\001" +
    "\002\000\024\006\021\013\007\024\035\104\051\105\005" +
    "\106\022\107\032\110\004\111\017\001\002\000\024\006" +
    "\021\013\007\024\035\104\051\105\005\106\022\107\032" +
    "\110\004\111\017\001\002\000\106\002\uffd1\004\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\011\072\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\027\uffd1\034\uffd1\035\uffd1\046\uffd1" +
    "\047\uffd1\073\uffd1\075\uffd1\077\uffd1\100\uffd1\101\uffd1\104" +
    "\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\001\002" +
    "\000\024\006\021\013\007\024\035\104\051\105\005\106" +
    "\022\107\032\110\004\111\017\001\002\000\040\004\060" +
    "\005\066\006\056\007\057\010\054\012\065\014\067\015" +
    "\053\016\061\017\070\020\055\021\062\022\063\023\064" +
    "\032\074\001\002\000\054\002\ufff3\006\ufff3\013\ufff3\015" +
    "\ufff3\024\ufff3\027\ufff3\034\ufff3\035\ufff3\046\ufff3\047\ufff3" +
    "\073\ufff3\075\ufff3\077\ufff3\100\ufff3\101\ufff3\104\ufff3\105" +
    "\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3\001\002\000\114" +
    "\002\uffdf\004\060\005\066\006\056\007\057\010\054\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\046\uffdf\047\uffdf" +
    "\073\uffdf\075\uffdf\077\uffdf\100\uffdf\101\uffdf\104\uffdf\105" +
    "\uffdf\106\uffdf\107\uffdf\110\uffdf\111\uffdf\001\002\000\114" +
    "\002\uffe3\004\060\005\066\006\056\007\057\010\054\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\046\uffe3\047\uffe3" +
    "\073\uffe3\075\uffe3\077\uffe3\100\uffe3\101\uffe3\104\uffe3\105" +
    "\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\001\002\000\114" +
    "\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\054\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\027\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\046\uffe9\047\uffe9" +
    "\073\uffe9\075\uffe9\077\uffe9\100\uffe9\101\uffe9\104\uffe9\105" +
    "\uffe9\106\uffe9\107\uffe9\110\uffe9\111\uffe9\001\002\000\114" +
    "\002\uffe2\004\060\005\066\006\056\007\057\010\054\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\046\uffe2\047\uffe2" +
    "\073\uffe2\075\uffe2\077\uffe2\100\uffe2\101\uffe2\104\uffe2\105" +
    "\uffe2\106\uffe2\107\uffe2\110\uffe2\111\uffe2\001\002\000\114" +
    "\002\uffdb\004\060\005\066\006\056\007\057\010\054\012" +
    "\065\013\uffdb\014\067\015\053\016\061\017\070\020\055" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\046\uffdb\047\uffdb" +
    "\073\uffdb\075\uffdb\077\uffdb\100\uffdb\101\uffdb\104\uffdb\105" +
    "\uffdb\106\uffdb\107\uffdb\110\uffdb\111\uffdb\001\002\000\114" +
    "\002\uffdc\004\060\005\066\006\056\007\057\010\054\012" +
    "\065\013\uffdc\014\067\015\053\016\061\017\070\020\055" +
    "\021\062\022\uffdc\023\064\024\uffdc\025\uffdc\027\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\046\uffdc\047\uffdc" +
    "\073\uffdc\075\uffdc\077\uffdc\100\uffdc\101\uffdc\104\uffdc\105" +
    "\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\001\002\000\114" +
    "\002\uffdd\004\060\005\066\006\056\007\057\010\054\012" +
    "\065\013\uffdd\014\067\015\053\016\061\017\070\020\055" +
    "\021\uffdd\022\uffdd\023\064\024\uffdd\025\uffdd\027\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\046\uffdd\047\uffdd" +
    "\073\uffdd\075\uffdd\077\uffdd\100\uffdd\101\uffdd\104\uffdd\105" +
    "\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd\001\002\000\114" +
    "\002\uffe0\004\060\005\066\006\056\007\057\010\054\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\046\uffe0\047\uffe0" +
    "\073\uffe0\075\uffe0\077\uffe0\100\uffe0\101\uffe0\104\uffe0\105" +
    "\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\001\002\000\114" +
    "\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\054\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\046\uffe7\047\uffe7" +
    "\073\uffe7\075\uffe7\077\uffe7\100\uffe7\101\uffe7\104\uffe7\105" +
    "\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\001\002\000\114" +
    "\002\uffeb\004\060\005\066\006\uffeb\007\uffeb\010\054\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\046\uffeb\047\uffeb" +
    "\073\uffeb\075\uffeb\077\uffeb\100\uffeb\101\uffeb\104\uffeb\105" +
    "\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb\001\002\000\114" +
    "\002\uffea\004\060\005\066\006\uffea\007\uffea\010\054\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\027\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\046\uffea\047\uffea" +
    "\073\uffea\075\uffea\077\uffea\100\uffea\101\uffea\104\uffea\105" +
    "\uffea\106\uffea\107\uffea\110\uffea\111\uffea\001\002\000\114" +
    "\002\uffde\004\060\005\066\006\056\007\057\010\054\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\027\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\046\uffde\047\uffde" +
    "\073\uffde\075\uffde\077\uffde\100\uffde\101\uffde\104\uffde\105" +
    "\uffde\106\uffde\107\uffde\110\uffde\111\uffde\001\002\000\114" +
    "\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\046\uffe8\047\uffe8" +
    "\073\uffe8\075\uffe8\077\uffe8\100\uffe8\101\uffe8\104\uffe8\105" +
    "\uffe8\106\uffe8\107\uffe8\110\uffe8\111\uffe8\001\002\000\114" +
    "\002\uffe1\004\060\005\066\006\056\007\057\010\054\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\046\uffe1\047\uffe1" +
    "\073\uffe1\075\uffe1\077\uffe1\100\uffe1\101\uffe1\104\uffe1\105" +
    "\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1\001\002\000\024" +
    "\006\021\013\007\024\035\104\051\105\005\106\022\107" +
    "\032\110\004\111\017\001\002\000\040\004\060\005\066" +
    "\006\056\007\057\010\054\012\065\014\067\015\053\016" +
    "\061\017\070\020\055\021\062\022\063\023\064\031\115" +
    "\001\002\000\114\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\046\uffd1\047\uffd1\073\uffd1\075\uffd1\077\uffd1\100\uffd1\101" +
    "\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1" +
    "\001\002\000\040\004\060\005\066\006\056\007\057\010" +
    "\054\012\065\014\067\015\053\016\061\017\070\020\055" +
    "\021\062\022\063\023\064\032\117\001\002\000\054\002" +
    "\ufff4\006\ufff4\013\ufff4\015\ufff4\024\ufff4\027\ufff4\034\ufff4" +
    "\035\ufff4\046\ufff4\047\ufff4\073\ufff4\075\ufff4\077\ufff4\100" +
    "\ufff4\101\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4\110\ufff4" +
    "\111\ufff4\001\002\000\004\002\001\001\002\000\004\015" +
    "\122\001\002\000\004\005\123\001\002\000\004\104\124" +
    "\001\002\000\004\016\125\001\002\000\004\033\126\001" +
    "\002\000\004\104\127\001\002\000\004\025\130\001\002" +
    "\000\004\032\131\001\002\000\054\002\uff63\006\uff63\013" +
    "\uff63\015\uff63\024\uff63\027\uff63\034\uff63\035\uff63\046\uff63" +
    "\047\uff63\073\uff63\075\uff63\077\uff63\100\uff63\101\uff63\104" +
    "\uff63\105\uff63\106\uff63\107\uff63\110\uff63\111\uff63\001\002" +
    "\000\024\006\021\013\007\024\035\104\051\105\005\106" +
    "\022\107\032\110\004\111\017\001\002\000\040\004\060" +
    "\005\066\006\056\007\057\010\054\012\065\014\067\015" +
    "\053\016\061\017\070\020\055\021\062\022\063\023\064" +
    "\025\134\001\002\000\004\026\135\001\002\000\052\006" +
    "\021\013\007\015\034\024\035\027\137\034\033\035\023" +
    "\046\042\047\031\073\036\075\040\077\006\100\011\101" +
    "\012\104\046\105\005\106\022\107\032\110\004\111\017" +
    "\001\002\000\052\006\021\013\007\015\034\024\035\027" +
    "\150\034\033\035\023\046\042\047\031\073\036\075\040" +
    "\077\006\100\011\101\012\104\046\105\005\106\022\107" +
    "\032\110\004\111\017\001\002\000\056\002\uffcc\006\uffcc" +
    "\013\uffcc\015\uffcc\024\uffcc\027\uffcc\034\uffcc\035\uffcc\046" +
    "\uffcc\047\uffcc\073\uffcc\075\uffcc\076\140\077\uffcc\100\uffcc" +
    "\101\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc\111" +
    "\uffcc\001\002\000\006\026\142\075\040\001\002\000\054" +
    "\002\uffcb\006\uffcb\013\uffcb\015\uffcb\024\uffcb\027\uffcb\034" +
    "\uffcb\035\uffcb\046\uffcb\047\uffcb\073\uffcb\075\uffcb\077\uffcb" +
    "\100\uffcb\101\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\111\uffcb\001\002\000\052\006\021\013\007\015\034" +
    "\024\035\027\145\034\033\035\023\046\042\047\031\073" +
    "\036\075\040\077\006\100\011\101\012\104\046\105\005" +
    "\106\022\107\032\110\004\111\017\001\002\000\054\002" +
    "\uffc8\006\uffc8\013\uffc8\015\uffc8\024\uffc8\027\uffc8\034\uffc8" +
    "\035\uffc8\046\uffc8\047\uffc8\073\uffc8\075\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8" +
    "\111\uffc8\001\002\000\052\006\021\013\007\015\034\024" +
    "\035\027\146\034\033\035\023\046\042\047\031\073\036" +
    "\075\040\077\006\100\011\101\012\104\046\105\005\106" +
    "\022\107\032\110\004\111\017\001\002\000\054\002\uffc7" +
    "\006\uffc7\013\uffc7\015\uffc7\024\uffc7\027\uffc7\034\uffc7\035" +
    "\uffc7\046\uffc7\047\uffc7\073\uffc7\075\uffc7\077\uffc7\100\uffc7" +
    "\101\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111" +
    "\uffc7\001\002\000\054\002\uffc6\006\uffc6\013\uffc6\015\uffc6" +
    "\024\uffc6\027\uffc6\034\uffc6\035\uffc6\046\uffc6\047\uffc6\073" +
    "\uffc6\075\uffc6\077\uffc6\100\uffc6\101\uffc6\104\uffc6\105\uffc6" +
    "\106\uffc6\107\uffc6\110\uffc6\111\uffc6\001\002\000\054\002" +
    "\uffff\006\uffff\013\uffff\015\uffff\024\uffff\027\uffff\034\uffff" +
    "\035\uffff\046\uffff\047\uffff\073\uffff\075\uffff\077\uffff\100" +
    "\uffff\101\uffff\104\uffff\105\uffff\106\uffff\107\uffff\110\uffff" +
    "\111\uffff\001\002\000\056\002\uffca\006\uffca\013\uffca\015" +
    "\uffca\024\uffca\027\uffca\034\uffca\035\uffca\046\uffca\047\uffca" +
    "\073\uffca\075\uffca\076\140\077\uffca\100\uffca\101\uffca\104" +
    "\uffca\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca\001\002" +
    "\000\054\002\uffc9\006\uffc9\013\uffc9\015\uffc9\024\uffc9\027" +
    "\uffc9\034\uffc9\035\uffc9\046\uffc9\047\uffc9\073\uffc9\075\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\104\uffc9\105\uffc9\106\uffc9\107" +
    "\uffc9\110\uffc9\111\uffc9\001\002\000\004\032\212\001\002" +
    "\000\004\074\154\001\002\000\024\006\156\024\157\026" +
    "\155\104\166\105\161\106\162\107\163\110\164\111\165" +
    "\001\002\000\024\006\156\024\157\026\155\104\166\105" +
    "\161\106\162\107\163\110\164\111\165\001\002\000\024" +
    "\006\156\024\157\026\155\104\166\105\161\106\162\107" +
    "\163\110\164\111\165\001\002\000\024\006\156\024\157" +
    "\026\155\104\166\105\161\106\162\107\163\110\164\111" +
    "\165\001\002\000\016\004\174\005\177\006\172\007\173" +
    "\010\175\032\176\001\002\000\056\004\uff6d\005\uff6d\006" +
    "\uff6d\007\uff6d\010\uff6d\015\uff6d\016\uff6d\025\uff6d\027\uff6d" +
    "\032\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043" +
    "\uff6d\044\uff6d\045\uff6d\066\uff6d\070\uff6d\072\uff6d\103\uff6d" +
    "\001\002\000\056\004\uff6c\005\uff6c\006\uff6c\007\uff6c\010" +
    "\uff6c\015\uff6c\016\uff6c\025\uff6c\027\uff6c\032\uff6c\036\uff6c" +
    "\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c\045" +
    "\uff6c\066\uff6c\070\uff6c\072\uff6c\103\uff6c\001\002\000\056" +
    "\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\015\uff6f\016" +
    "\uff6f\025\uff6f\027\uff6f\032\uff6f\036\uff6f\037\uff6f\040\uff6f" +
    "\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\066\uff6f\070" +
    "\uff6f\072\uff6f\103\uff6f\001\002\000\056\004\uff6e\005\uff6e" +
    "\006\uff6e\007\uff6e\010\uff6e\015\uff6e\016\uff6e\025\uff6e\027" +
    "\uff6e\032\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e" +
    "\043\uff6e\044\uff6e\045\uff6e\066\uff6e\070\uff6e\072\uff6e\103" +
    "\uff6e\001\002\000\056\004\uff6b\005\uff6b\006\uff6b\007\uff6b" +
    "\010\uff6b\015\uff6b\016\uff6b\025\uff6b\027\uff6b\032\uff6b\036" +
    "\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b" +
    "\045\uff6b\066\uff6b\070\uff6b\072\uff6b\103\uff6b\001\002\000" +
    "\060\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71\015\uff71" +
    "\016\uff71\025\uff71\027\uff71\030\167\032\uff71\036\uff71\037" +
    "\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71" +
    "\066\uff71\070\uff71\072\uff71\103\uff71\001\002\000\024\006" +
    "\021\013\007\024\035\104\051\105\005\106\022\107\032" +
    "\110\004\111\017\001\002\000\040\004\060\005\066\006" +
    "\056\007\057\010\054\012\065\014\067\015\053\016\061" +
    "\017\070\020\055\021\062\022\063\023\064\031\171\001" +
    "\002\000\056\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70" +
    "\015\uff70\016\uff70\025\uff70\027\uff70\032\uff70\036\uff70\037" +
    "\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70" +
    "\066\uff70\070\uff70\072\uff70\103\uff70\001\002\000\024\006" +
    "\156\024\157\026\155\104\166\105\161\106\162\107\163" +
    "\110\164\111\165\001\002\000\024\006\156\024\157\026" +
    "\155\104\166\105\161\106\162\107\163\110\164\111\165" +
    "\001\002\000\024\006\156\024\157\026\155\104\166\105" +
    "\161\106\162\107\163\110\164\111\165\001\002\000\024" +
    "\006\156\024\157\026\155\104\166\105\161\106\162\107" +
    "\163\110\164\111\165\001\002\000\054\002\uff64\006\uff64" +
    "\013\uff64\015\uff64\024\uff64\027\uff64\034\uff64\035\uff64\046" +
    "\uff64\047\uff64\073\uff64\075\uff64\077\uff64\100\uff64\101\uff64" +
    "\104\uff64\105\uff64\106\uff64\107\uff64\110\uff64\111\uff64\001" +
    "\002\000\024\006\156\024\157\026\155\104\166\105\161" +
    "\106\162\107\163\110\164\111\165\001\002\000\056\004" +
    "\uff76\005\uff76\006\uff76\007\uff76\010\175\015\uff76\016\uff76" +
    "\025\uff76\027\uff76\032\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\045\uff76\066\uff76\070\uff76" +
    "\072\uff76\103\uff76\001\002\000\056\004\uff75\005\uff75\006" +
    "\uff75\007\uff75\010\uff75\015\uff75\016\uff75\025\uff75\027\uff75" +
    "\032\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043" +
    "\uff75\044\uff75\045\uff75\066\uff75\070\uff75\072\uff75\103\uff75" +
    "\001\002\000\056\004\uff74\005\uff74\006\uff74\007\uff74\010" +
    "\175\015\uff74\016\uff74\025\uff74\027\uff74\032\uff74\036\uff74" +
    "\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045" +
    "\uff74\066\uff74\070\uff74\072\uff74\103\uff74\001\002\000\056" +
    "\004\174\005\177\006\uff78\007\uff78\010\175\015\uff78\016" +
    "\uff78\025\uff78\027\uff78\032\uff78\036\uff78\037\uff78\040\uff78" +
    "\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\066\uff78\070" +
    "\uff78\072\uff78\103\uff78\001\002\000\056\004\174\005\177" +
    "\006\uff77\007\uff77\010\175\015\uff77\016\uff77\025\uff77\027" +
    "\uff77\032\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\044\uff77\045\uff77\066\uff77\070\uff77\072\uff77\103" +
    "\uff77\001\002\000\016\004\174\005\177\006\172\007\173" +
    "\010\175\025\206\001\002\000\056\004\uff72\005\uff72\006" +
    "\uff72\007\uff72\010\uff72\015\uff72\016\uff72\025\uff72\027\uff72" +
    "\032\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043" +
    "\uff72\044\uff72\045\uff72\066\uff72\070\uff72\072\uff72\103\uff72" +
    "\001\002\000\056\004\174\005\177\006\uff73\007\uff73\010" +
    "\175\015\uff73\016\uff73\025\uff73\027\uff73\032\uff73\036\uff73" +
    "\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73\045" +
    "\uff73\066\uff73\070\uff73\072\uff73\103\uff73\001\002\000\016" +
    "\004\174\005\177\006\172\007\173\010\175\027\211\001" +
    "\002\000\056\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a" +
    "\015\uff6a\016\uff6a\025\uff6a\027\uff6a\032\uff6a\036\uff6a\037" +
    "\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a" +
    "\066\uff6a\070\uff6a\072\uff6a\103\uff6a\001\002\000\054\002" +
    "\uff65\006\uff65\013\uff65\015\uff65\024\uff65\027\uff65\034\uff65" +
    "\035\uff65\046\uff65\047\uff65\073\uff65\075\uff65\077\uff65\100" +
    "\uff65\101\uff65\104\uff65\105\uff65\106\uff65\107\uff65\110\uff65" +
    "\111\uff65\001\002\000\040\004\060\005\066\006\056\007" +
    "\057\010\054\012\065\014\067\015\053\016\061\017\070" +
    "\020\055\021\062\022\063\023\064\025\214\001\002\000" +
    "\114\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\046\uffe5\047" +
    "\uffe5\073\uffe5\075\uffe5\077\uffe5\100\uffe5\101\uffe5\104\uffe5" +
    "\105\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\001\002\000" +
    "\004\104\216\001\002\000\004\016\217\001\002\000\056" +
    "\002\uffad\006\uffad\013\uffad\015\uffad\024\uffad\025\uffad\027" +
    "\uffad\034\uffad\035\uffad\046\uffad\047\uffad\073\uffad\075\uffad" +
    "\077\uffad\100\uffad\101\uffad\104\uffad\105\uffad\106\uffad\107" +
    "\uffad\110\uffad\111\uffad\001\002\000\006\032\241\033\240" +
    "\001\002\000\012\011\223\030\224\032\uffec\033\uffec\001" +
    "\002\000\006\032\ufff1\033\ufff1\001\002\000\026\006\021" +
    "\013\007\024\035\026\231\104\051\105\005\106\022\107" +
    "\032\110\004\111\017\001\002\000\024\006\021\013\007" +
    "\024\035\104\051\105\005\106\022\107\032\110\004\111" +
    "\017\001\002\000\040\004\060\005\066\006\056\007\057" +
    "\010\054\012\065\014\067\015\053\016\061\017\070\020" +
    "\055\021\062\022\063\023\064\031\226\001\002\000\010" +
    "\011\227\032\uffed\033\uffed\001\002\000\024\006\021\013" +
    "\007\024\035\104\051\105\005\106\022\107\032\110\004" +
    "\111\017\001\002\000\042\004\060\005\066\006\056\007" +
    "\057\010\054\012\065\014\067\015\053\016\061\017\070" +
    "\020\055\021\062\022\063\023\064\032\uffee\033\uffee\001" +
    "\002\000\024\006\021\013\007\024\035\104\051\105\005" +
    "\106\022\107\032\110\004\111\017\001\002\000\042\004" +
    "\060\005\066\006\056\007\057\010\054\012\065\014\067" +
    "\015\053\016\061\017\070\020\055\021\062\022\063\023" +
    "\064\032\ufff0\033\ufff0\001\002\000\006\027\235\033\236" +
    "\001\002\000\042\004\060\005\066\006\056\007\057\010" +
    "\054\012\065\014\067\015\053\016\061\017\070\020\055" +
    "\021\062\022\063\023\064\027\uffd8\033\uffd8\001\002\000" +
    "\006\032\uffef\033\uffef\001\002\000\024\006\021\013\007" +
    "\024\035\104\051\105\005\106\022\107\032\110\004\111" +
    "\017\001\002\000\042\004\060\005\066\006\056\007\057" +
    "\010\054\012\065\014\067\015\053\016\061\017\070\020" +
    "\055\021\062\022\063\023\064\027\uffd9\033\uffd9\001\002" +
    "\000\004\104\221\001\002\000\054\002\ufff5\006\ufff5\013" +
    "\ufff5\015\ufff5\024\ufff5\027\ufff5\034\ufff5\035\ufff5\046\ufff5" +
    "\047\ufff5\073\ufff5\075\ufff5\077\ufff5\100\ufff5\101\ufff5\104" +
    "\ufff5\105\ufff5\106\ufff5\107\ufff5\110\ufff5\111\ufff5\001\002" +
    "\000\006\032\ufff2\033\ufff2\001\002\000\006\015\244\025" +
    "\245\001\002\000\022\005\215\050\265\051\267\052\264" +
    "\053\266\054\270\067\272\071\271\001\002\000\004\032" +
    "\263\001\002\000\006\015\uffb2\025\uffb2\001\002\000\006" +
    "\015\uffb0\025\uffb0\001\002\000\006\015\uffae\025\uffae\001" +
    "\002\000\006\015\uffb1\025\uffb1\001\002\000\006\015\uffb6" +
    "\025\uffb6\001\002\000\006\015\uffb5\025\uffb5\001\002\000" +
    "\006\015\uffb4\025\uffb4\001\002\000\006\015\uffb3\025\uffb3" +
    "\001\002\000\006\015\244\025\260\001\002\000\006\015" +
    "\uffaf\025\uffaf\001\002\000\004\032\262\001\002\000\006" +
    "\015\uffb7\025\uffb7\001\002\000\054\002\uffb9\006\uffb9\013" +
    "\uffb9\015\uffb9\024\uffb9\027\uffb9\034\uffb9\035\uffb9\046\uffb9" +
    "\047\uffb9\073\uffb9\075\uffb9\077\uffb9\100\uffb9\101\uffb9\104" +
    "\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\001\002" +
    "\000\054\002\uffb8\006\uffb8\013\uffb8\015\uffb8\024\uffb8\027" +
    "\uffb8\034\uffb8\035\uffb8\046\uffb8\047\uffb8\073\uffb8\075\uffb8" +
    "\077\uffb8\100\uffb8\101\uffb8\104\uffb8\105\uffb8\106\uffb8\107" +
    "\uffb8\110\uffb8\111\uffb8\001\002\000\024\016\u015f\036\277" +
    "\037\275\040\273\041\310\042\276\043\302\044\301\045" +
    "\306\001\002\000\024\016\u014a\036\277\037\275\040\273" +
    "\041\310\042\276\043\302\044\301\045\306\001\002\000" +
    "\024\036\277\037\275\040\273\041\310\042\276\043\302" +
    "\044\301\045\306\103\u0137\001\002\000\024\016\u0125\036" +
    "\277\037\275\040\273\041\310\042\276\043\302\044\301" +
    "\045\306\001\002\000\024\016\370\036\277\037\275\040" +
    "\273\041\310\042\276\043\302\044\301\045\306\001\002" +
    "\000\024\036\277\037\275\040\273\041\310\042\276\043" +
    "\302\044\301\045\306\072\355\001\002\000\030\016\303" +
    "\036\277\037\275\040\273\041\310\042\276\043\302\044" +
    "\301\045\306\066\304\070\307\001\002\000\004\011\350" +
    "\001\002\000\030\016\uff7c\036\uff7c\037\uff7c\040\uff7c\041" +
    "\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\066\uff7c\070\uff7c" +
    "\001\002\000\004\011\346\001\002\000\004\011\344\001" +
    "\002\000\004\011\342\001\002\000\030\016\uff7b\036\uff7b" +
    "\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045" +
    "\uff7b\066\uff7b\070\uff7b\001\002\000\004\011\340\001\002" +
    "\000\004\011\333\001\002\000\024\006\156\024\157\026" +
    "\155\104\166\105\161\106\162\107\163\110\164\111\165" +
    "\001\002\000\004\011\325\001\002\000\030\016\320\036" +
    "\277\037\275\040\273\041\310\042\276\043\302\044\301" +
    "\045\306\066\304\070\307\001\002\000\004\011\315\001" +
    "\002\000\004\011\313\001\002\000\004\011\311\001\002" +
    "\000\024\006\156\024\157\026\155\104\166\105\161\106" +
    "\162\107\163\110\164\111\165\001\002\000\046\004\174" +
    "\005\177\006\172\007\173\010\175\016\uff89\036\uff89\037" +
    "\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89" +
    "\066\uff89\070\uff89\072\uff89\103\uff89\001\002\000\024\006" +
    "\156\024\157\026\155\104\166\105\161\106\162\107\163" +
    "\110\164\111\165\001\002\000\042\004\174\005\177\006" +
    "\172\007\173\010\175\016\uff79\036\uff79\037\uff79\040\uff79" +
    "\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\066\uff79\070" +
    "\uff79\001\002\000\004\105\316\001\002\000\034\016\uff85" +
    "\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044" +
    "\uff85\045\uff85\066\uff85\070\uff85\072\uff85\103\uff85\001\002" +
    "\000\030\016\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042" +
    "\uff7d\043\uff7d\044\uff7d\045\uff7d\066\uff7d\070\uff7d\001\002" +
    "\000\024\006\156\024\157\026\155\104\166\105\161\106" +
    "\162\107\163\110\164\111\165\001\002\000\016\004\174" +
    "\005\177\006\172\007\173\010\175\015\322\001\002\000" +
    "\004\062\323\001\002\000\004\016\324\001\002\000\006" +
    "\015\uffaa\025\uffaa\001\002\000\024\006\156\024\157\026" +
    "\155\104\166\105\161\106\162\107\163\110\164\111\165" +
    "\001\002\000\042\004\174\005\177\006\172\007\173\010" +
    "\175\016\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a" +
    "\043\uff7a\044\uff7a\045\uff7a\066\uff7a\070\uff7a\001\002\000" +
    "\016\004\174\005\177\006\172\007\173\010\175\015\330" +
    "\001\002\000\004\062\331\001\002\000\004\016\332\001" +
    "\002\000\006\015\uffa9\025\uffa9\001\002\000\010\102\336" +
    "\104\337\105\335\001\002\000\034\016\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\066\uff87\070\uff87\072\uff87\103\uff87\001\002\000\034\016" +
    "\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80" +
    "\044\uff80\045\uff80\066\uff80\070\uff80\072\uff80\103\uff80\001" +
    "\002\000\034\016\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f" +
    "\042\uff7f\043\uff7f\044\uff7f\045\uff7f\066\uff7f\070\uff7f\072" +
    "\uff7f\103\uff7f\001\002\000\034\016\uff7e\036\uff7e\037\uff7e" +
    "\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\066" +
    "\uff7e\070\uff7e\072\uff7e\103\uff7e\001\002\000\024\006\156" +
    "\024\157\026\155\104\166\105\161\106\162\107\163\110" +
    "\164\111\165\001\002\000\046\004\174\005\177\006\172" +
    "\007\173\010\175\016\uff86\036\uff86\037\uff86\040\uff86\041" +
    "\uff86\042\uff86\043\uff86\044\uff86\045\uff86\066\uff86\070\uff86" +
    "\072\uff86\103\uff86\001\002\000\004\104\343\001\002\000" +
    "\034\016\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\066\uff8c\070\uff8c\072\uff8c\103" +
    "\uff8c\001\002\000\024\006\156\024\157\026\155\104\166" +
    "\105\161\106\162\107\163\110\164\111\165\001\002\000" +
    "\046\004\174\005\177\006\172\007\173\010\175\016\uff88" +
    "\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044" +
    "\uff88\045\uff88\066\uff88\070\uff88\072\uff88\103\uff88\001\002" +
    "\000\024\006\156\024\157\026\155\104\166\105\161\106" +
    "\162\107\163\110\164\111\165\001\002\000\046\004\174" +
    "\005\177\006\172\007\173\010\175\016\uff8a\036\uff8a\037" +
    "\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a" +
    "\066\uff8a\070\uff8a\072\uff8a\103\uff8a\001\002\000\024\006" +
    "\156\024\157\026\155\104\166\105\161\106\162\107\163" +
    "\110\164\111\165\001\002\000\046\004\174\005\177\006" +
    "\172\007\173\010\175\016\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\066\uff8b\070" +
    "\uff8b\072\uff8b\103\uff8b\001\002\000\026\016\361\036\277" +
    "\037\275\040\273\041\310\042\276\043\302\044\301\045" +
    "\306\072\363\001\002\000\026\016\uff67\036\uff67\037\uff67" +
    "\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\072" +
    "\uff67\001\002\000\026\016\uff68\036\uff68\037\uff68\040\uff68" +
    "\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\072\uff68\001" +
    "\002\000\004\011\356\001\002\000\024\006\156\024\157" +
    "\026\155\104\166\105\161\106\162\107\163\110\164\111" +
    "\165\001\002\000\040\004\174\005\177\006\172\007\173" +
    "\010\175\016\360\036\uff66\037\uff66\040\uff66\041\uff66\042" +
    "\uff66\043\uff66\044\uff66\045\uff66\072\uff66\001\002\000\006" +
    "\015\uffab\025\uffab\001\002\000\006\015\uffac\025\uffac\001" +
    "\002\000\026\016\uff69\036\uff69\037\uff69\040\uff69\041\uff69" +
    "\042\uff69\043\uff69\044\uff69\045\uff69\072\uff69\001\002\000" +
    "\004\011\364\001\002\000\024\006\156\024\157\026\155" +
    "\104\166\105\161\106\162\107\163\110\164\111\165\001" +
    "\002\000\040\004\174\005\177\006\172\007\173\010\175" +
    "\016\uff66\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043" +
    "\uff66\044\uff66\045\uff66\072\uff66\001\002\000\024\016\u011e" +
    "\036\277\037\275\040\273\041\310\042\276\043\302\044" +
    "\301\045\306\001\002\000\024\016\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\001" +
    "\002\000\004\015\372\001\002\000\004\015\u0119\001\002" +
    "\000\004\063\u0104\001\002\000\004\015\375\001\002\000" +
    "\004\015\uffa6\001\002\000\004\065\376\001\002\000\004" +
    "\016\377\001\002\000\024\006\156\024\157\026\155\104" +
    "\166\105\161\106\162\107\163\110\164\111\165\001\002" +
    "\000\016\004\174\005\177\006\172\007\173\010\175\015" +
    "\u0101\001\002\000\004\061\u0102\001\002\000\004\016\u0103" +
    "\001\002\000\004\015\uffa3\001\002\000\004\016\u0105\001" +
    "\002\000\004\015\u0108\001\002\000\004\015\uffa1\001\002" +
    "\000\004\015\u0115\001\002\000\004\064\u0109\001\002\000" +
    "\004\016\u010a\001\002\000\010\026\u010d\105\u010c\112\u010b" +
    "\001\002\000\004\015\uff95\001\002\000\004\015\uff93\001" +
    "\002\000\024\006\021\013\007\024\035\104\051\105\005" +
    "\106\022\107\032\110\004\111\017\001\002\000\004\015" +
    "\u010f\001\002\000\004\056\u0110\001\002\000\004\016\u0111" +
    "\001\002\000\004\015\uffa0\001\002\000\040\004\060\005" +
    "\066\006\056\007\057\010\054\012\065\014\067\015\053" +
    "\016\061\017\070\020\055\021\062\022\063\023\064\027" +
    "\u0113\001\002\000\004\015\uff94\001\002\000\004\015\uffa2" +
    "\001\002\000\006\005\u0116\064\u0109\001\002\000\004\063" +
    "\u0117\001\002\000\004\016\u0118\001\002\000\004\015\uffa4" +
    "\001\002\000\004\005\u011a\001\002\000\004\054\u011b\001" +
    "\002\000\004\016\u011c\001\002\000\006\015\uffa7\025\uffa7" +
    "\001\002\000\024\016\uff8e\036\uff8e\037\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\001\002\000\004" +
    "\015\372\001\002\000\004\015\u0120\001\002\000\004\005" +
    "\u0121\001\002\000\004\054\u0122\001\002\000\004\016\u0123" +
    "\001\002\000\006\015\uffa8\025\uffa8\001\002\000\024\016" +
    "\u012d\036\277\037\275\040\273\041\310\042\276\043\302" +
    "\044\301\045\306\001\002\000\012\015\u0126\026\u010d\105" +
    "\u010c\112\u010b\001\002\000\004\055\u012b\001\002\000\004" +
    "\015\u0128\001\002\000\004\055\u0129\001\002\000\004\016" +
    "\u012a\001\002\000\006\015\uff96\025\uff96\001\002\000\004" +
    "\016\u012c\001\002\000\006\015\uff97\025\uff97\001\002\000" +
    "\012\015\u012e\026\u010d\105\u010c\112\u010b\001\002\000\004" +
    "\055\u0133\001\002\000\004\015\u0130\001\002\000\004\055" +
    "\u0131\001\002\000\004\016\u0132\001\002\000\006\015\uff98" +
    "\025\uff98\001\002\000\004\016\u0134\001\002\000\006\015" +
    "\uff99\025\uff99\001\002\000\026\016\u0140\036\277\037\275" +
    "\040\273\041\310\042\276\043\302\044\301\045\306\103" +
    "\u0141\001\002\000\026\016\uff82\036\uff82\037\uff82\040\uff82" +
    "\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\103\uff82\001" +
    "\002\000\004\011\u0139\001\002\000\026\016\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\103\uff83\001\002\000\024\006\156\024\157\026\155" +
    "\104\166\105\161\106\162\107\163\110\164\111\165\001" +
    "\002\000\040\004\174\005\177\006\172\007\173\010\175" +
    "\016\u013b\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043" +
    "\uff81\044\uff81\045\uff81\103\uff81\001\002\000\010\026\u010d" +
    "\105\u010c\112\u010b\001\002\000\004\015\u013d\001\002\000" +
    "\004\060\u013e\001\002\000\004\016\u013f\001\002\000\006" +
    "\015\uff9e\025\uff9e\001\002\000\010\026\u010d\105\u010c\112" +
    "\u010b\001\002\000\004\011\u0143\001\002\000\026\016\uff84" +
    "\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044" +
    "\uff84\045\uff84\103\uff84\001\002\000\024\006\156\024\157" +
    "\026\155\104\166\105\161\106\162\107\163\110\164\111" +
    "\165\001\002\000\040\004\174\005\177\006\172\007\173" +
    "\010\175\016\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042" +
    "\uff81\043\uff81\044\uff81\045\uff81\103\uff81\001\002\000\004" +
    "\015\u0146\001\002\000\004\060\u0147\001\002\000\004\016" +
    "\u0148\001\002\000\006\015\uff9f\025\uff9f\001\002\000\024" +
    "\016\u0154\036\277\037\275\040\273\041\310\042\276\043" +
    "\302\044\301\045\306\001\002\000\004\015\u014b\001\002" +
    "\000\022\005\u0151\050\265\051\267\052\264\053\266\054" +
    "\270\067\272\071\271\001\002\000\004\015\u014d\001\002" +
    "\000\022\005\u014e\050\265\051\267\052\264\053\266\054" +
    "\270\067\272\071\271\001\002\000\006\050\u014f\104\216" +
    "\001\002\000\004\016\u0150\001\002\000\006\015\uff91\025" +
    "\uff91\001\002\000\006\050\u0152\104\216\001\002\000\004" +
    "\016\u0153\001\002\000\006\015\uff8f\025\uff8f\001\002\000" +
    "\004\015\u0155\001\002\000\022\005\u015b\050\265\051\267" +
    "\052\264\053\266\054\270\067\272\071\271\001\002\000" +
    "\004\015\u0157\001\002\000\022\005\u0158\050\265\051\267" +
    "\052\264\053\266\054\270\067\272\071\271\001\002\000" +
    "\006\050\u0159\104\216\001\002\000\004\016\u015a\001\002" +
    "\000\006\015\uff92\025\uff92\001\002\000\006\050\u015c\104" +
    "\216\001\002\000\004\016\u015d\001\002\000\006\015\uff90" +
    "\025\uff90\001\002\000\024\016\u0167\036\277\037\275\040" +
    "\273\041\310\042\276\043\302\044\301\045\306\001\002" +
    "\000\012\015\u0160\026\u010d\105\u010c\112\u010b\001\002\000" +
    "\004\057\u0165\001\002\000\004\015\u0162\001\002\000\004" +
    "\057\u0163\001\002\000\004\016\u0164\001\002\000\006\015" +
    "\uff9a\025\uff9a\001\002\000\004\016\u0166\001\002\000\006" +
    "\015\uff9b\025\uff9b\001\002\000\012\015\u0168\026\u010d\105" +
    "\u010c\112\u010b\001\002\000\004\057\u016d\001\002\000\004" +
    "\015\u016a\001\002\000\004\057\u016b\001\002\000\004\016" +
    "\u016c\001\002\000\006\015\uff9c\025\uff9c\001\002\000\004" +
    "\016\u016e\001\002\000\006\015\uff9d\025\uff9d\001\002\000" +
    "\004\024\u0170\001\002\000\004\025\u0171\001\002\000\004" +
    "\026\u0172\001\002\000\020\034\033\047\031\075\040\077" +
    "\006\100\011\101\012\104\u0177\001\002\000\022\027\uffbb" +
    "\034\uffbb\047\uffbb\075\uffbb\077\uffbb\100\uffbb\101\uffbb\104" +
    "\uffbb\001\002\000\022\027\uffba\034\uffba\047\uffba\075\uffba" +
    "\077\uffba\100\uffba\101\uffba\104\uffba\001\002\000\022\027" +
    "\u017c\034\033\047\031\075\040\077\006\100\011\101\012" +
    "\104\u0177\001\002\000\004\027\u017b\001\002\000\006\011" +
    "\047\030\u0178\001\002\000\024\006\021\013\007\024\035" +
    "\104\051\105\005\106\022\107\032\110\004\111\017\001" +
    "\002\000\040\004\060\005\066\006\056\007\057\010\054" +
    "\012\065\014\067\015\053\016\061\017\070\020\055\021" +
    "\062\022\063\023\064\031\u017a\001\002\000\004\011\072" +
    "\001\002\000\054\002\uffc0\006\uffc0\013\uffc0\015\uffc0\024" +
    "\uffc0\027\uffc0\034\uffc0\035\uffc0\046\uffc0\047\uffc0\073\uffc0" +
    "\075\uffc0\077\uffc0\100\uffc0\101\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\107\uffc0\110\uffc0\111\uffc0\001\002\000\054\002\uffbe" +
    "\006\uffbe\013\uffbe\015\uffbe\024\uffbe\027\uffbe\034\uffbe\035" +
    "\uffbe\046\uffbe\047\uffbe\073\uffbe\075\uffbe\077\uffbe\100\uffbe" +
    "\101\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111" +
    "\uffbe\001\002\000\022\027\uffbd\034\uffbd\047\uffbd\075\uffbd" +
    "\077\uffbd\100\uffbd\101\uffbd\104\uffbd\001\002\000\022\027" +
    "\uffbc\034\uffbc\047\uffbc\075\uffbc\077\uffbc\100\uffbc\101\uffbc" +
    "\104\uffbc\001\002\000\004\027\u0180\001\002\000\054\002" +
    "\uffbf\006\uffbf\013\uffbf\015\uffbf\024\uffbf\027\uffbf\034\uffbf" +
    "\035\uffbf\046\uffbf\047\uffbf\073\uffbf\075\uffbf\077\uffbf\100" +
    "\uffbf\101\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf" +
    "\111\uffbf\001\002\000\114\002\uffe6\004\060\005\066\006" +
    "\uffe6\007\uffe6\010\054\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\046\uffe6\047\uffe6\073\uffe6\075\uffe6\077\uffe6\100" +
    "\uffe6\101\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6" +
    "\111\uffe6\001\002\000\024\006\021\013\007\024\035\104" +
    "\051\105\005\106\022\107\032\110\004\111\017\001\002" +
    "\000\040\004\060\005\066\006\056\007\057\010\054\012" +
    "\065\014\067\015\053\016\061\017\070\020\055\021\062" +
    "\022\063\023\064\025\u0184\001\002\000\004\026\u0185\001" +
    "\002\000\052\006\021\013\007\015\034\024\035\027\u0187" +
    "\034\033\035\023\046\042\047\031\073\036\075\040\077" +
    "\006\100\011\101\012\104\046\105\005\106\022\107\032" +
    "\110\004\111\017\001\002\000\052\006\021\013\007\015" +
    "\034\024\035\027\u0188\034\033\035\023\046\042\047\031" +
    "\073\036\075\040\077\006\100\011\101\012\104\046\105" +
    "\005\106\022\107\032\110\004\111\017\001\002\000\054" +
    "\002\uffc4\006\uffc4\013\uffc4\015\uffc4\024\uffc4\027\uffc4\034" +
    "\uffc4\035\uffc4\046\uffc4\047\uffc4\073\uffc4\075\uffc4\077\uffc4" +
    "\100\uffc4\101\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110" +
    "\uffc4\111\uffc4\001\002\000\054\002\uffc3\006\uffc3\013\uffc3" +
    "\015\uffc3\024\uffc3\027\uffc3\034\uffc3\035\uffc3\046\uffc3\047" +
    "\uffc3\073\uffc3\075\uffc3\077\uffc3\100\uffc3\101\uffc3\104\uffc3" +
    "\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\001\002\000" +
    "\024\006\021\013\007\024\035\104\051\105\005\106\022" +
    "\107\032\110\004\111\017\001\002\000\040\004\060\005" +
    "\066\006\056\007\057\010\054\012\065\014\067\015\053" +
    "\016\061\017\070\020\055\021\062\022\063\023\064\025" +
    "\u018b\001\002\000\004\032\u018c\001\002\000\054\002\uffc5" +
    "\006\uffc5\013\uffc5\015\uffc5\024\uffc5\027\uffc5\034\uffc5\035" +
    "\uffc5\046\uffc5\047\uffc5\073\uffc5\075\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111" +
    "\uffc5\001\002\000\114\002\uffe4\004\060\005\066\006\056" +
    "\007\057\010\054\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\046\uffe4\047\uffe4\073\uffe4\075\uffe4\077\uffe4\100\uffe4" +
    "\101\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111" +
    "\uffe4\001\002\000\024\006\021\013\007\024\035\104\051" +
    "\105\005\106\022\107\032\110\004\111\017\001\002\000" +
    "\040\004\060\005\066\006\056\007\057\010\054\012\065" +
    "\014\067\015\053\016\061\017\070\020\055\021\062\022" +
    "\063\023\064\025\u0190\001\002\000\004\026\u0191\001\002" +
    "\000\052\006\021\013\007\015\034\024\035\027\u0193\034" +
    "\033\035\023\046\042\047\031\073\036\075\040\077\006" +
    "\100\011\101\012\104\046\105\005\106\022\107\032\110" +
    "\004\111\017\001\002\000\052\006\021\013\007\015\034" +
    "\024\035\027\u0194\034\033\035\023\046\042\047\031\073" +
    "\036\075\040\077\006\100\011\101\012\104\046\105\005" +
    "\106\022\107\032\110\004\111\017\001\002\000\054\002" +
    "\uffc2\006\uffc2\013\uffc2\015\uffc2\024\uffc2\027\uffc2\034\uffc2" +
    "\035\uffc2\046\uffc2\047\uffc2\073\uffc2\075\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2" +
    "\111\uffc2\001\002\000\054\002\uffc1\006\uffc1\013\uffc1\015" +
    "\uffc1\024\uffc1\027\uffc1\034\uffc1\035\uffc1\046\uffc1\047\uffc1" +
    "\073\uffc1\075\uffc1\077\uffc1\100\uffc1\101\uffc1\104\uffc1\105" +
    "\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\042\002\043\003\007\006\026\010\024\011" +
    "\013\012\044\014\012\015\042\016\014\017\036\020\027" +
    "\021\017\022\015\054\040\055\025\056\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\u018c\012\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\007\006\026\010\024" +
    "\011\013\012\044\015\146\016\014\017\036\020\027\021" +
    "\017\022\015\054\040\055\025\056\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u0180\012\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\217\005\221\001\001\000\002\001\001\000\006\010\212" +
    "\012\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\115\012\044\001\001\000\006\010\051" +
    "\012\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\111\012\044\001\001\000\006\010\110\012\044" +
    "\001\001\000\006\010\107\012\044\001\001\000\006\010" +
    "\106\012\044\001\001\000\006\010\105\012\044\001\001" +
    "\000\006\010\104\012\044\001\001\000\006\010\103\012" +
    "\044\001\001\000\006\010\102\012\044\001\001\000\006" +
    "\010\101\012\044\001\001\000\006\010\100\012\044\001" +
    "\001\000\006\010\077\012\044\001\001\000\006\010\076" +
    "\012\044\001\001\000\006\010\075\012\044\001\001\000" +
    "\006\010\074\012\044\001\001\000\002\001\001\000\006" +
    "\010\072\012\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\113\012\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\132\012\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\007\006\026" +
    "\010\024\011\013\012\044\014\135\015\042\016\014\017" +
    "\036\020\027\021\017\022\015\054\040\055\025\056\023" +
    "\001\001\000\036\003\007\006\026\010\024\011\013\012" +
    "\044\015\146\016\014\017\036\020\027\021\017\022\015" +
    "\054\040\055\025\056\023\001\001\000\004\007\140\001" +
    "\001\000\004\006\142\001\001\000\002\001\001\000\040" +
    "\003\007\006\026\010\024\011\013\012\044\014\143\015" +
    "\042\016\014\017\036\020\027\021\017\022\015\054\040" +
    "\055\025\056\023\001\001\000\002\001\001\000\036\003" +
    "\007\006\026\010\024\011\013\012\044\015\146\016\014" +
    "\017\036\020\027\021\017\022\015\054\040\055\025\056" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\157\001\001" +
    "\000\004\036\207\001\001\000\004\036\206\001\001\000" +
    "\004\036\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\167\012\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\203\001\001\000\004\036\202\001\001\000\004\036\201" +
    "\001\001\000\004\036\200\001\001\000\002\001\001\000" +
    "\004\036\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\231\012\044\001\001\000\006" +
    "\010\224\012\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\227\012\044\001\001\000\002\001\001" +
    "\000\010\010\233\012\044\013\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\236\012\044\001\001\000\002\001\001\000" +
    "\004\005\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\023\255\024\251\025\252\026\253\027\254\030" +
    "\245\031\250\032\246\033\256\055\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\024\260\025\252\026\253\027\254\030\245\031\250" +
    "\032\246\033\256\055\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\u015d\035\366\001\001\000\006\034" +
    "\u0148\035\366\001\001\000\010\035\u0135\041\u0134\042\u0137" +
    "\001\001\000\006\034\u0123\035\366\001\001\000\006\034" +
    "\365\035\366\001\001\000\010\035\352\052\351\053\353" +
    "\001\001\000\010\035\277\043\273\051\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\326\001\001\000\002" +
    "\001\001\000\006\035\277\043\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\311" +
    "\001\001\000\002\001\001\000\004\036\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\320\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\344\001\001\000\002\001\001\000\004\036\346" +
    "\001\001\000\002\001\001\000\004\036\350\001\001\000" +
    "\002\001\001\000\006\035\352\053\361\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\364\001\001\000\002\001\001\000\004\035\u011c\001\001" +
    "\000\002\001\001\000\006\044\370\045\372\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\373\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\377\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\047\u0105\050\u0106\001\001\000\002\001\001\000\004" +
    "\047\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u0111\012\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\u011e\045\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u011c" +
    "\001\001\000\004\040\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\u012e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\u0135\042\u0141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\u0139\001\001\000\002\001\001\000\004\040\u013b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u0144\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u011c\001\001\000" +
    "\026\023\u014b\024\251\025\252\026\253\027\254\030\245" +
    "\031\250\032\246\033\256\055\247\001\001\000\002\001" +
    "\001\000\024\024\260\025\252\026\253\027\254\030\245" +
    "\031\250\032\246\033\256\055\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\023\u0155\024\251\025\252\026\253\027\254\030\245" +
    "\031\250\032\246\033\256\055\247\001\001\000\002\001" +
    "\001\000\024\024\260\025\252\026\253\027\254\030\245" +
    "\031\250\032\246\033\256\055\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u011c\001\001\000\004\040\u0160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u0168\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\u0172\006\026" +
    "\011\u0173\016\014\017\036\020\027\022\u0175\057\u0174\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\u017c" +
    "\006\026\011\u017d\016\014\017\036\020\027\022\u017e\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\u0178" +
    "\012\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\u0182\012\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\007\006\026\010\024\011" +
    "\013\012\044\014\u0185\015\042\016\014\017\036\020\027" +
    "\021\017\022\015\054\040\055\025\056\023\001\001\000" +
    "\036\003\007\006\026\010\024\011\013\012\044\015\146" +
    "\016\014\017\036\020\027\021\017\022\015\054\040\055" +
    "\025\056\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u0189\012\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\u018e\012\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\007\006\026\010\024\011\013\012\044" +
    "\014\u0191\015\042\016\014\017\036\020\027\021\017\022" +
    "\015\054\040\055\025\056\023\001\001\000\036\003\007" +
    "\006\026\010\024\011\013\012\044\015\146\016\014\017" +
    "\036\020\027\021\017\022\015\054\040\055\025\056\023" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Arbol variables = new Arbol();
    public Cola TodosLosErrores = new Cola();
    public NodoSintactico padre;
    public int contador = 1;
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        System.out.print("ERROR SINTACTICO ");
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.print(lexema + " fila: " + fila + " columna: " + columna + "\n");
        Errores error = new Errores(lexema,fila,columna,"Token " + lexema + " No esperado", "Sintactico");
        TodosLosErrores.insertar(error);
    }

    //Metodo al que se llama en el momento en el que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s){

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {


    

  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico inicio = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("INICIO", inicioleft, inicioright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(inicio);
    padre = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES OPCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= OPCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("OPCIONES", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPCIONES ::= DECLARACION 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPCIONES ::= E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("E", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPCIONES ::= FUNCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("FUNCION", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPCIONES ::= COMPONENTE 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPCIONES ::= IMPORTAR 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPCIONES ::= EXTERNO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPCIONES ::= RENDER 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPCIONES ::= RETORNO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= var ASIGNACION puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= identificador igual E puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("REASIGNACION", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= identificador corcheteA E corcheteC igual E puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.addHijo(b);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("REASIGNACION", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACION ::= ASIGNACION coma IDENT 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("ASIGNACIONES", bleft, bright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= IDENT 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IDENT ::= identificador igual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SDA", bleft, bright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IDENT ::= identificador igual llaveA LISTAEXP llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("ADA", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IDENT ::= identificador corcheteA E corcheteC igual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("ADA", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IDENT ::= identificador corcheteA E corcheteC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("AD", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDENT ::= identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SD", aleft, aright);
    tmp.addHijo(identificador);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E suma E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("+", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E resta E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("-", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= E division E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("/", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E potencia E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("pow", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E multiplicacion E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("*", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= resta E 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("NEGATIVO", cleft, cright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= parentesisA E parentesisC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= not E 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("!", cleft, cright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E diferente E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("!=", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= E igualigual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("==", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E menorQue E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("<", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E mayorQue E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico(">", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E menorIgual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("<=", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E mayorIgual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico(">=", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= E logicoAND E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("&&", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E logicoOR E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("||", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= E logicoXOR E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("^", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= DATO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTAEXP ::= LISTAEXP coma E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTAEXP ::= E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico entero = new NodoSintactico("DATARR", aleft, aright);
    entero.setNumNodo(contador++);
    entero.addHijo(a);
    RESULT = entero;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DATO ::= entero 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico entero = new NodoSintactico("ENTERO", aleft, aright);
    int numero = Integer.parseInt(a);
    entero.setValor(numero);
    entero.setNumNodo(contador++);

    RESULT = entero;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DATO ::= doble 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico doble = new NodoSintactico("DOBLE", aleft, aright);
    double numero = Double.valueOf(a);
    doble.setValor(numero);
    doble.setNumNodo(contador++);

    RESULT = doble;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DATO ::= cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico cadena = new NodoSintactico("CADENA", aleft, aright);
    a = a.replace("\"","");
    cadena.setValor(a);
    cadena.setNumNodo(contador++);

    RESULT = cadena;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DATO ::= caracter 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico caracter = new NodoSintactico("CARACTER", aleft, aright);
    char carac = a.charAt(1);
    caracter.setValor(carac);
    caracter.setNumNodo(contador++);

    RESULT = caracter;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DATO ::= booleano 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico booleano = new NodoSintactico("BOOLEANO", aleft, aright);
    boolean valor = true;
    a = a.toLowerCase();
    if(a.equals("false")){
        valor = false;
    }
    booleano.setValor(valor);
    booleano.setNumNodo(contador++);

    RESULT = booleano;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DATO ::= identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DATO ::= identificador corcheteA E corcheteC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.addHijo(b);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCIONES ::= SI 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCIONES ::= IMPRIMIR 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCIONES ::= MIENTRAS 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCIONES ::= REPETIR 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SI ::= si parentesisA E parentesisC llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("SI", bleft, bright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SI ::= si parentesisA E parentesisC llaveA llaveC SINO 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("SI-SINO", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SI ::= si parentesisA E parentesisC llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("SI", aleft, aright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SI ::= si parentesisA E parentesisC llaveA INSTRUCCIONES llaveC SINO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("SI-SINO", aleft, aright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SINO ::= sino SI 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("SINO-SI", aleft, aright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SINO ::= sino llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
    NodoSintactico tmp = new NodoSintactico("SINO", aleft, aright);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SINO ::= sino llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("SINO", aleft, aright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IMPRIMIR ::= imprimir parentesisA E parentesisC puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
    NodoSintactico tmp = new NodoSintactico("IMPRIMIR", aleft, aright);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MIENTRAS ::= mientras parentesisA E parentesisC llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("MIENTRAS", aleft, aright);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MIENTRAS ::= mientras parentesisA E parentesisC llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("MIENTRAS", aleft, aright);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // REPETIR ::= repetir parentesisA E parentesisC llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("REPETIR", aleft, aright);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // REPETIR ::= repetir parentesisA E parentesisC llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("REPETIR", aleft, aright);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMPONENTE ::= component identificador parentesisA parentesisC llaveA RETORNO llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico nombre = new NodoSintactico("NOMBRE_COMPONENTE", aleft, aright);
    nombre.setValor(a);
    nombre.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("COMPONENTE", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(nombre);
    tmp.addHijo(b);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMPONENTE ::= component identificador parentesisA parentesisC llaveA OPCIONESCOMPONENTE RETORNO llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico nombre = new NodoSintactico("NOMBRE_COMPONENTE", aleft, aright);
    nombre.setValor(a);
    nombre.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("COMPONENTE", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(nombre);
    tmp.addHijo(c);
    tmp.addHijo(b);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COMPONENTE ::= component identificador parentesisA parentesisC llaveA OPCIONESCOMPONENTE llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico nombre = new NodoSintactico("NOMBRE_COMPONENTE", aleft, aright);
    nombre.setValor(a);
    nombre.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("COMPONENTE", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(nombre);
    tmp.addHijo(c);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPCIONESCOMPONENTE ::= OPCIONESCOMPONENTE DECLARACION 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);

    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESCOMPONENTE",45, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPCIONESCOMPONENTE ::= OPCIONESCOMPONENTE FUNCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESCOMPONENTE",45, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPCIONESCOMPONENTE ::= DECLARACION 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("INSTRUCCIONES", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESCOMPONENTE",45, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPCIONESCOMPONENTE ::= FUNCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("INSTRUCCIONES", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESCOMPONENTE",45, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RETORNO ::= retorno parentesisA COMPONENTES parentesisC puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
    NodoSintactico tmp = new NodoSintactico("RETORNO", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(b);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RETORNO ::= retorno parentesisA parentesisC puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("RETORNO", aleft, aright);
    tmp.setNumNodo(contador++);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COMPONENTES ::= COMPONENTES OPCOMPONENTES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTES",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COMPONENTES ::= OPCOMPONENTES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("ELEMENTOS", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTES",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPCOMPONENTES ::= PANEL 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPCOMPONENTES ::= TEXT 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPCOMPONENTES ::= TEXTFIELD 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPCOMPONENTES ::= BUTTON 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPCOMPONENTES ::= LIST 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPCOMPONENTES ::= SPINNER 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPCOMPONENTES ::= IMAGE 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPCOMPONENTES ::= EXTERNO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXTERNO ::= menorQue division identificador mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico externo = new NodoSintactico("EXTERNO", aleft, aright);
    externo.setNumNodo(contador++);

    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);
    
    externo.addHijo(identificador);
    
    RESULT = externo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("EXTERNO",43, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IMAGE ::= menorQue image ATRIBUTOS_IM mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico imagen = new NodoSintactico("IMAGEN", aleft, aright);
    imagen.setNumNodo(contador++);

    imagen.addHijo(b);

    RESULT = imagen;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMAGE",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IMAGE ::= menorQue image fuente igual ARITM mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico imagen = new NodoSintactico("IMAGEN", aleft, aright);
    imagen.setNumNodo(contador++);

    NodoSintactico fuente = new NodoSintactico("AT_FUENTE", bleft, bright);
    fuente.setNumNodo(contador++);

    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.addHijo(c);
    aritm.setNumNodo(contador++);

    fuente.addHijo(aritm);

    imagen.addHijo(fuente);

    RESULT = imagen;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMAGE",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SPINNER ::= menorQue spinner ATRIBUTOS_SP mayorQue ARITM menorQue fspinner mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico spinner = new NodoSintactico("SPINNER", aleft, aright);
    spinner.setNumNodo(contador++);

    NodoSintactico aritm = new NodoSintactico("ARITM", cleft, cright);
    aritm.setNumNodo(contador++);
    aritm.addHijo(c);

    spinner.addHijo(b);
    spinner.addHijo(c);

    RESULT = spinner;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SPINNER",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SPINNER ::= menorQue spinner mayorQue ARITM menorQue fspinner mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico spinner = new NodoSintactico("SPINNER", aleft, aright);
    spinner.setNumNodo(contador++);

    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.setNumNodo(contador++);
    aritm.addHijo(b);

    spinner.addHijo(b);

    RESULT = spinner;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SPINNER",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LIST ::= menorQue list ATRIBUTOS mayorQue OPCIONESLISTA menorQue division list mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico items = new NodoSintactico("LISTA", aleft, aright);
    items.addHijo(b);
    items.addHijo(c);
    items.setNumNodo(contador++);

    RESULT = items;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LIST ::= menorQue list mayorQue OPCIONESLISTA menorQue division list mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico items = new NodoSintactico("LISTA", aleft, aright);
    items.addHijo(b);
    items.setNumNodo(contador++);

    RESULT = items;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPCIONESLISTA ::= ELEMENTS DEFAULT 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico items = new NodoSintactico("OPCIONESLISTA", aleft, aright);
    items.addHijo(a);
    items.addHijo(b);
    items.setNumNodo(contador++);

    RESULT = items;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESLISTA",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPCIONESLISTA ::= ELEMENTS 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico items = new NodoSintactico("OPCIONESLISTA", aleft, aright);
    items.addHijo(a);
    items.setNumNodo(contador++);

    RESULT = items;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESLISTA",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELEMENTS ::= menorQue element mayorQue ITEMS menorQue division element mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico items = new NodoSintactico("ELEMENTOS", aleft, aright);
    items.addHijo(b);
    items.setNumNodo(contador++);

    RESULT = items;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTS",35, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DEFAULT ::= menorQue defecto mayorQue ARITM menorQue fdefecto mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico numero = new NodoSintactico("ARITM", bleft, bright);
    numero.addHijo(b);
    numero.setNumNodo(contador++);

    NodoSintactico defecto = new NodoSintactico("DEFECTO", aleft, aright);
    defecto.addHijo(numero);
    defecto.setNumNodo(contador++);

    RESULT = defecto;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ITEMS ::= ITEMS ITEM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ITEMS",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ITEMS ::= ITEM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("ITEMS", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ITEMS",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ITEM ::= menorQue items mayorQue IDTEXT menorQue fitem mayorQue 
            {
              NodoSintactico RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    RESULT = c;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ITEM",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BUTTON ::= menorQue button ATRIBUTOSB mayorQue IDTEXT menorQue fbutton mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico button = new NodoSintactico("BUTTON", aleft, aright);
    button.addHijo(b);
    button.addHijo(c);
    button.setNumNodo(contador++);
    
    RESULT = button;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BUTTON",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BUTTON ::= menorQue button onClick igual ARITM mayorQue IDTEXT menorQue fbutton mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);
    
    NodoSintactico atributos = new NodoSintactico("ATRIBUTOS", aleft, aright);
    atributos.addHijo(aritm);
    atributos.setNumNodo(contador++);

    NodoSintactico button = new NodoSintactico("BUTTON", aleft, aright);
    button.addHijo(atributos);
    button.addHijo(c);
    button.setNumNodo(contador++);
    
    RESULT = button;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BUTTON",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TEXTFIELD ::= menorQue textField ATRIBUTOS mayorQue menorQue ftextField mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXTFIELD", aleft, aright);
    nuevo.addHijo(b);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTFIELD",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TEXTFIELD ::= menorQue textField ATRIBUTOS mayorQue IDTEXT menorQue ftextField mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXTFIELD", aleft, aright);
    nuevo.addHijo(b);
    nuevo.addHijo(c);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTFIELD",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TEXTFIELD ::= menorQue textField mayorQue menorQue ftextField mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXTFIELD", aleft, aright);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTFIELD",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TEXTFIELD ::= menorQue textField mayorQue IDTEXT menorQue ftextField mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXTFIELD", aleft, aright);
    nuevo.addHijo(b);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTFIELD",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TEXT ::= menorQue textt ATRIBUTOS mayorQue menorQue ftext mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXT", aleft, aright);
    nuevo.addHijo(b);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXT",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TEXT ::= menorQue textt ATRIBUTOS mayorQue IDTEXT menorQue ftext mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXT", aleft, aright);
    nuevo.addHijo(b);
    nuevo.addHijo(c);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXT",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TEXT ::= menorQue textt mayorQue menorQue ftext mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXT", aleft, aright);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXT",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TEXT ::= menorQue textt mayorQue IDTEXT menorQue ftext mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXT", aleft, aright);
    nuevo.addHijo(b);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXT",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IDTEXT ::= texto 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico texto = new NodoSintactico("TEXTO", aleft, aright);
    a = a.replace("\"","''");
    a = a.replace("\t","");
    if(a.startsWith("\n")){
        a = a.replaceFirst("\n", "");
    }
    if(a.endsWith("\n")){
        a = a.replaceFirst("(?s)(.*)" + "\n", "$1" + "");
    }
    texto.setValor(a);
    texto.setNumNodo(contador++);
    
    RESULT = texto;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDTEXT",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IDTEXT ::= llaveA E llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("IDENTI", aleft, aright);
    tmp.setNumNodo(contador++);

    tmp.addHijo(a);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDTEXT",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IDTEXT ::= cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico texto = new NodoSintactico("TEXTO", aleft, aright);
    a = a.replace("\"","");
    a = a.replace("\t","");
    if(a.startsWith("\n")){
        a = a.replaceFirst("\n", "");
    }
    if(a.endsWith("\n")){
        a = a.replaceFirst("(?s)(.*)" + "\n", "$1" + "");
    }
    texto.setValor(a);
    texto.setNumNodo(contador++);
    
    RESULT = texto;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDTEXT",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PANEL ::= menorQue panel ATRIBUTOS mayorQue COMPONENTES menorQue division panel mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("PANEL", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);
    nuevo.addHijo(b);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PANEL ::= menorQue panel mayorQue COMPONENTES menorQue division panel mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("PANEL", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PANEL ::= menorQue panel ATRIBUTOS mayorQue menorQue division panel mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		
    NodoSintactico nuevo = new NodoSintactico("PANEL", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PANEL ::= menorQue panel mayorQue menorQue division panel mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		
    NodoSintactico nuevo = new NodoSintactico("PANEL", aleft, aright);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ATRIBUTOS ::= ATRIBUTOS ATRIBUTO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ATRIBUTOS ::= ATRIBUTO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("ATRIBUTOS", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ATRIBUTO ::= id igual identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(b);
    identificador.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_ID", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(identificador);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ATRIBUTO ::= posicionY igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_Y", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ATRIBUTO ::= posicionX igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_X", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ATRIBUTO ::= height igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_HEIGHT", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ATRIBUTO ::= width igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_WIDTH", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ATRIBUTO ::= color igual COLOR 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("AT_COLOR", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ATRIBUTO ::= border igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_BORDER", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ATRIBUTO ::= className igual cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    b = b.replace("\"", "");
    NodoSintactico nombre = new NodoSintactico("NOMBRE_CLASE", aleft, aright);
    nombre.setValor(b);
    nombre.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_CLASSNAME", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(nombre);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ATRIBUTOSB ::= ATRIBUTOSB ATRIBUTOB 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSB",31, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ATRIBUTOSB ::= ATRIBUTOB 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("ATRIBUTOS", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSB",31, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ATRIBUTOB ::= ATRIBUTO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOB",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ATRIBUTOB ::= onClick igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_ONCLICK", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOB",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // COLOR ::= cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a = a.replace("\"","");
    NodoSintactico color = new NodoSintactico("COLOR", aleft, aright);
    color.setValor(a);
    color.setNumNodo(contador++);

    RESULT = color;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // COLOR ::= hexadecimal 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico color = new NodoSintactico("COLOR", aleft, aright);
    color.setValor(a);
    color.setNumNodo(contador++);

    RESULT = color;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // COLOR ::= identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ATRIBUTOS_SP ::= ATRIBUTOS_SP ATRIBUTO_SP 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_SP",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ATRIBUTOS_SP ::= ATRIBUTO_SP 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("ATRIBUTOS", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_SP",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ATRIBUTO_SP ::= ATRIBUTO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_SP",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ATRIBUTO_SP ::= min igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico min = new NodoSintactico("AT_MIN", aleft, aright);
    min.setNumNodo(contador++);
    
    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    min.addHijo(aritm);

    RESULT = min;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_SP",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ATRIBUTO_SP ::= max igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico max = new NodoSintactico("AT_MAX", aleft, aright);
    max.setNumNodo(contador++);
    
    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    max.addHijo(aritm);

    RESULT = max;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_SP",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARITM ::= ARITM suma ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("+", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ARITM ::= ARITM resta ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("-", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ARITM ::= ARITM division ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("/", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ARITM ::= ARITM potencia ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("pow", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ARITM ::= ARITM multiplicacion ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("*", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARITM ::= resta ARITM 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("NEGATIVO", cleft, cright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ARITM ::= parentesisA ARITM parentesisC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ARITM ::= identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ARITM ::= identificador corcheteA E corcheteC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.addHijo(b);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ARITM ::= entero 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico entero = new NodoSintactico("ENTERO", aleft, aright);
    int numero = Integer.parseInt(a);
    entero.setValor(numero);
    entero.setNumNodo(contador++);

    RESULT = entero;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ARITM ::= doble 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico doble = new NodoSintactico("DOBLE", aleft, aright);
    double numero = Double.valueOf(a);
    doble.setValor(numero);
    doble.setNumNodo(contador++);

    RESULT = doble;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ARITM ::= cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico cadena = new NodoSintactico("CADENA", aleft, aright);
    a = a.replace("\"","");
    cadena.setValor(a);
    cadena.setNumNodo(contador++);

    RESULT = cadena;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ARITM ::= caracter 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico caracter = new NodoSintactico("CARACTER", aleft, aright);
    char carac = a.charAt(1);
    caracter.setValor(carac);
    caracter.setNumNodo(contador++);

    RESULT = caracter;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ARITM ::= booleano 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico booleano = new NodoSintactico("BOOLEANO", aleft, aright);
    boolean valor = true;
    a = a.toLowerCase();
    if(a.equals("false")){
        valor = false;
    }
    booleano.setValor(valor);
    booleano.setNumNodo(contador++);

    RESULT = booleano;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ARITM ::= llaveA ARITM llaveC 
            {
              NodoSintactico RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    RESULT = aritm;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ATRIBUTOS_IM ::= ATRIBUTOS_IM ATRIBUTO_IM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_IM",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ATRIBUTOS_IM ::= ATRIBUTO_IM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("ATRIBUTOS", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_IM",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ATRIBUTO_IM ::= ATRIBUTO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_IM",41, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ATRIBUTO_IM ::= fuente igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico fuente = new NodoSintactico("AT_FUENTE", aleft, aright);
    fuente.setNumNodo(contador++);

    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    fuente.addHijo(aritm);

    RESULT = fuente;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_IM",41, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // IMPORTAR ::= importar cadena puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico importar = new NodoSintactico("IMPORT_CSS", aleft, aright);
    importar.setNumNodo(contador++);

    b = b.replace("\"","");
    NodoSintactico ruta = new NodoSintactico("CADENA", bleft, bright);
    ruta.setValor(b);
    ruta.setNumNodo(contador++);

    importar.addHijo(ruta);

    RESULT = importar;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",42, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // IMPORTAR ::= importar identificador from ARITM puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico importar = new NodoSintactico("IMPORT_COMPONENTE", aleft, aright);
    importar.setNumNodo(contador++);

    NodoSintactico ruta = new NodoSintactico("ARITM", cleft, cright);
    ruta.addHijo(c);
    ruta.setNumNodo(contador++);

    NodoSintactico identificador = new NodoSintactico("ID", bleft, bright);
    identificador.setValor(b);
    identificador.setNumNodo(contador++);

    importar.addHijo(identificador);
    importar.addHijo(ruta);

    RESULT = importar;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",42, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // RENDER ::= render parentesisA menorQue division identificador mayorQue coma identificador parentesisC puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
    NodoSintactico render = new NodoSintactico("RENDER", aleft, aright);
    render.setNumNodo(contador++);

    NodoSintactico identificador = new NodoSintactico("ID", bleft, bright);
    identificador.setValor(b);
    identificador.setNumNodo(contador++);

    NodoSintactico identificador2 = new NodoSintactico("ID", cleft, cright);
    identificador2.setValor(c);
    identificador2.setNumNodo(contador++);

    render.addHijo(identificador);
    render.addHijo(identificador2);

    RESULT = render;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("RENDER",44, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
