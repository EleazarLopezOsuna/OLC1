/* The following code was generated by JFlex 1.7.0 */


/*--------- 1ra Area: Codigo de Usuario ---------*/

//--------> Paquetes e importaciones
package Analizadores.UFE;
import java_cup.runtime.*;
import Estructuras.Cola;
import Modelos.Errores;

/*--------- 2da Area: Opciones y Declaraciones ---------*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Analisis_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEXTO = 2;
  public static final int ETIQUETA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 13, 13, 13, 13,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    23, 31,  3, 19,  0,  0, 34, 12, 36, 37, 18, 26, 42, 25,  2, 17, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 41, 32, 30, 33,  0, 
     0,  9, 20, 43, 48,  7,  8, 52, 51, 47, 14, 54, 10, 44, 45, 28, 
    27, 14,  5, 15,  4,  6, 24, 29, 49, 50, 14, 39,  0, 40, 35, 16, 
     0,  9, 20, 43, 48,  7,  8, 52, 51, 47, 14, 54, 10, 44, 45, 28, 
    27, 14,  5, 15,  4,  6, 24, 29, 49, 50, 14, 21, 22, 38,  0,  0, 
     0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\1\1\2\1\3\1\2\6\4\2\2\1\1\1\4"+
    "\1\5\1\6\1\2\1\4\1\7\1\4\1\10\1\11"+
    "\3\4\1\12\1\13\1\14\1\15\1\2\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\4\1\2"+
    "\2\4\1\26\1\27\1\4\1\30\1\1\1\31\1\32"+
    "\4\4\1\12\1\33\1\4\1\2\1\4\2\0\1\34"+
    "\6\4\1\0\1\4\2\0\1\35\1\0\2\4\1\35"+
    "\2\0\1\36\5\0\5\4\1\37\1\0\1\4\1\40"+
    "\1\41\1\42\1\43\1\44\3\4\1\0\1\4\2\0"+
    "\1\45\2\4\1\45\4\4\1\46\10\4\1\0\1\4"+
    "\1\47\2\0\1\50\1\47\2\4\7\0\2\4\1\51"+
    "\1\4\1\52\1\0\4\4\1\53\1\0\1\54\1\4"+
    "\1\54\3\0\4\4\1\0\2\4\1\55\1\56\4\4"+
    "\1\57\1\0\2\60\1\0\1\61\1\4\1\61\2\0"+
    "\1\36\4\0\3\4\1\0\1\4\1\0\3\4\1\0"+
    "\1\4\1\62\3\0\1\62\4\4\1\0\7\4\1\55"+
    "\1\0\1\4\1\63\2\0\1\64\2\0\2\4\1\65"+
    "\2\66\1\0\1\4\1\67\1\4\1\0\1\4\1\70"+
    "\2\0\1\70\3\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\71\1\0\1\4\1\72\1\4\1\0\1\4"+
    "\5\0\1\73\1\74\1\0\2\4\1\0\1\4\1\0"+
    "\1\75\1\4\1\75\1\4\2\76\1\0\1\4\1\0"+
    "\1\4\2\77\1\4\2\100\2\0\1\101\1\0\1\102"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\1\103\2\104"+
    "\1\0\1\4\2\105\1\0\1\106\1\107\1\0\2\4"+
    "\2\110\2\111\2\112\1\0\2\113\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\245\0\u03a7\0\u03de\0\245\0\u0415\0\245\0\245"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\245\0\245\0\245\0\245\0\245\0\245\0\245\0\245"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u01b8\0\u01b8\0\u0717"+
    "\0\u074e\0\u0785\0\245\0\245\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\245\0\245\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0113\0\245"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u01b8\0\u0f78\0\u0faf\0\245"+
    "\0\245\0\245\0\245\0\245\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\245\0\u1167\0\u119e\0\u01b8\0\u11d5"+
    "\0\u120c\0\u1243\0\u127a\0\u093d\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\245\0\u14d7"+
    "\0\u150e\0\245\0\u01b8\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u01b8\0\u17a2"+
    "\0\u01b8\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u01b8\0\u18ec"+
    "\0\245\0\u1923\0\u01b8\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u01b8\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u01b8\0\u1c93\0\245\0\u01b8\0\u1cca"+
    "\0\245\0\u1d01\0\u01b8\0\u1d38\0\u1d6f\0\245\0\u1da6\0\u1ddd"+
    "\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95"+
    "\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\245\0\u20df\0\u2116"+
    "\0\u214d\0\u01b8\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\245\0\u2418"+
    "\0\u244f\0\u2486\0\u24bd\0\u24f4\0\245\0\u252b\0\u2562\0\u2599"+
    "\0\u25d0\0\u01b8\0\245\0\u01b8\0\u2607\0\u263e\0\u01b8\0\u2675"+
    "\0\u26ac\0\u26e3\0\245\0\u271a\0\u2751\0\u01b8\0\u2788\0\u27bf"+
    "\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u01b8"+
    "\0\u2977\0\u29ae\0\u01b8\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1"+
    "\0\u2af8\0\u2b2f\0\u2b66\0\u01b8\0\u01b8\0\u2b9d\0\u2bd4\0\u2c0b"+
    "\0\u2c42\0\u2c79\0\u2cb0\0\245\0\u2ce7\0\u01b8\0\u2d1e\0\245"+
    "\0\u01b8\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\245\0\u01b8\0\u2e31"+
    "\0\245\0\u01b8\0\u2e68\0\u2e9f\0\245\0\u2ed6\0\245\0\u2f0d"+
    "\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u01b8\0\245"+
    "\0\u01b8\0\u308e\0\u30c5\0\245\0\u01b8\0\u30fc\0\245\0\245"+
    "\0\u3133\0\u316a\0\u31a1\0\245\0\u01b8\0\245\0\u01b8\0\245"+
    "\0\u01b8\0\u31d8\0\245\0\u01b8\0\u01b8\0\245";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\11\1\14\1\15\1\16\1\17\1\11\1\20"+
    "\1\4\1\21\1\22\1\23\1\24\1\25\2\17\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\11\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\11\1\4\1\11\15\61\1\62"+
    "\7\61\1\63\1\17\1\62\10\61\1\64\3\61\2\4"+
    "\21\61\1\4\1\5\1\4\1\6\1\65\3\11\1\66"+
    "\2\11\1\4\1\16\1\17\2\11\3\4\1\23\1\67"+
    "\1\25\2\17\1\11\2\4\1\11\1\70\1\33\1\71"+
    "\2\4\1\72\2\4\1\42\1\43\1\44\1\45\1\46"+
    "\2\4\1\73\2\11\1\74\1\75\1\11\1\56\1\57"+
    "\1\60\1\11\1\4\1\11\70\0\1\5\1\76\64\0"+
    "\3\77\1\100\63\77\1\0\1\11\2\0\1\11\1\101"+
    "\1\11\1\102\3\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\2\0\3\11\1\103"+
    "\3\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\3\11\1\0\6\11\1\0\1\11\1\0\1\11\2\0"+
    "\6\11\1\104\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\105\3\11"+
    "\1\106\1\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\107\1\110\5\11\1\0\1\11\5\0"+
    "\1\111\25\0\1\112\22\0\2\113\7\0\15\114\1\0"+
    "\51\114\15\0\1\17\10\0\2\17\40\0\1\11\2\0"+
    "\1\11\1\115\5\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\116\2\11\15\0\3\11"+
    "\1\113\1\117\5\11\1\0\1\11\4\0\1\120\6\0"+
    "\1\121\3\0\1\121\1\0\1\122\1\123\1\0\1\124"+
    "\31\0\2\125\1\126\7\0\1\127\5\0\3\127\12\0"+
    "\1\127\26\0\1\127\4\0\1\127\7\0\1\11\2\0"+
    "\2\11\1\130\4\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\131\1\11\15\0"+
    "\3\11\1\0\6\11\1\0\1\11\1\0\1\11\2\0"+
    "\5\11\1\132\1\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\2\0\5\11\1\133"+
    "\1\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\134\1\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\2\0\1\11\1\135"+
    "\5\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\3\11\1\136\1\137\5\11\1\0\1\11\36\0\1\140"+
    "\66\0\1\141\66\0\1\142\66\0\1\143\72\0\1\144"+
    "\25\0\1\11\2\0\6\11\1\145\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\146"+
    "\1\11\15\0\3\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\2\0\5\11\1\147\1\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\3\11\1\150\1\151\5\11\1\0\1\11\4\0\1\152"+
    "\47\0\1\153\3\0\1\154\7\0\1\11\2\0\1\155"+
    "\6\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\1\11\1\156\1\11\1\0"+
    "\1\11\1\157\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\1\160\3\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\2\0\3\11\1\161"+
    "\3\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\25\61\2\0\11\61\1\0\3\61\2\0\36\61"+
    "\1\62\7\61\1\0\1\17\1\62\10\61\1\0\3\61"+
    "\2\0\21\61\1\0\1\11\2\0\1\11\1\101\5\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\3\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\2\0\5\11\1\106\1\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\131\1\11\15\0\3\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\2\11\1\162\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\6\11\1\145\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\163\1\11\15\0\3\11\1\0\6\11\1\0\1\11"+
    "\60\0\1\154\7\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\1\11\1\157\4\11\1\0\1\11"+
    "\1\0\1\164\66\0\1\11\2\0\2\11\1\165\4\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\3\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\2\11\1\166\3\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\167\6\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\170\2\11\15\0\2\11"+
    "\1\171\1\0\6\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\1\172\3\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\173\1\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\6\11\1\174\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\13\0\1\175"+
    "\3\0\1\175\50\0\1\11\2\0\7\11\1\175\2\0"+
    "\1\11\1\176\1\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\53\0\1\177\71\0\2\200\64\0\1\201\25\0"+
    "\1\202\53\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\1\203\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\200\1\204"+
    "\5\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\2\11\1\205\1\0\6\11\1\0\1\11"+
    "\7\0\1\206\112\0\1\207\33\0\15\122\1\0\51\122"+
    "\22\123\1\210\44\123\6\0\1\211\64\0\1\212\71\0"+
    "\1\213\60\0\1\214\5\0\3\214\12\0\1\214\26\0"+
    "\1\214\4\0\1\214\7\0\1\11\2\0\1\215\6\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\3\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\216\5\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\217\5\11\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\2\11\1\220\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\2\11\1\221"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\60\0\1\222"+
    "\7\0\1\11\2\0\7\11\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\1\11\1\223\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\5\11\1\224\1\11\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\2\0\6\11"+
    "\1\225\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\1\11\1\226\1\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\3\11\1\0\2\11\1\227\3\11\1\0"+
    "\1\11\7\0\1\230\45\0\1\231\12\0\1\11\2\0"+
    "\3\11\1\232\3\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\2\11\1\233"+
    "\1\0\6\11\1\0\1\11\7\0\1\234\70\0\1\235"+
    "\21\0\1\236\34\0\1\11\2\0\3\11\1\237\3\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\3\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\2\0\5\11\1\240\1\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\1\241"+
    "\2\11\15\0\3\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\2\0\4\11\1\242\2\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\3\11\1\0\6\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\3\11\1\243\1\244\5\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\1\245\2\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\2\0\6\11\1\225\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\246\3\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\247\6\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\3\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\2\0\2\11\1\250\4\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\3\11\1\0\6\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\1\251\3\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\3\11\1\0\1\11\1\252\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\1\11\1\253\1\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\1\11\1\254"+
    "\1\11\1\0\6\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\1\255\2\0\1\11\1\165\1\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\6\11\1\0\1\11\4\0\1\256\63\0\1\11"+
    "\2\0\1\257\6\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\55\0\1\260\45\0\1\261\33\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\2\11\1\262"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\263\1\11\15\0\3\11\1\0\6\11"+
    "\1\0\1\11\61\0\1\264\63\0\2\265\7\0\21\123"+
    "\1\266\1\210\44\123\4\0\1\267\71\0\1\270\67\0"+
    "\1\271\57\0\1\272\5\0\3\272\12\0\1\272\26\0"+
    "\1\272\4\0\1\272\7\0\1\11\2\0\1\273\6\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\3\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\1\11\1\274\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\1\275\3\11\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\6\11\1\0\1\11\4\0\1\276\63\0\1\11"+
    "\2\0\1\277\6\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\2\0\7\11\1\300"+
    "\2\0\1\11\1\301\1\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\302\1\11\15\0\3\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\303\2\11\15\0"+
    "\3\11\1\0\6\11\1\0\1\11\55\0\1\304\12\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\2\11\1\305"+
    "\1\0\6\11\1\0\1\11\54\0\1\306\76\0\1\307"+
    "\7\0\1\310\26\0\1\311\33\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\1\11\1\312\1\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\5\11\1\313\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\314\5\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\315"+
    "\1\11\15\0\3\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\2\0\5\11\1\316\1\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\3\11\1\0\6\11\1\0\1\11\64\0\1\317\3\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\5\11\1\320\1\0\1\11\1\0\1\11\2\0\6\11"+
    "\1\321\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\4\11\1\322\2\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\3\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\323\5\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\3\11\1\0\6\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\324\6\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\1\325\3\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\3\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\1\326\3\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\7\0\1\327"+
    "\134\0\1\330\12\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\2\11\1\331\1\0\6\11\1\0\1\11\4\0"+
    "\1\332\137\0\1\333\15\0\1\334\136\0\1\335\23\0"+
    "\1\336\56\0\1\337\5\0\3\337\12\0\1\337\26\0"+
    "\1\337\4\0\1\337\7\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\340\1\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\1\341\3\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\3\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\2\0\6\11\1\342\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\6\11\1\0\1\11\63\0\1\343\4\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\0\4\11"+
    "\1\344\1\11\1\0\1\11\13\0\1\345\3\0\1\345"+
    "\50\0\1\11\2\0\7\11\1\345\2\0\1\11\1\346"+
    "\1\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\3\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\347\5\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\3\11\1\0\6\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\350\1\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\4\0\1\351\63\0\1\11\2\0"+
    "\1\352\6\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\0\6\11"+
    "\1\0\1\11\7\0\1\353\135\0\2\354\14\0\1\355"+
    "\62\0\1\11\2\0\3\11\1\356\3\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\354\1\357"+
    "\5\11\1\0\1\11\1\0\1\11\2\0\1\11\1\360"+
    "\5\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\2\11\1\361\4\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\3\11\1\0\6\11\1\0\1\11\63\0"+
    "\1\362\4\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\3\11\1\0\4\11\1\363\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\364"+
    "\1\365\5\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\3\11\1\366\1\367\5\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\2\11\1\370\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\371\1\372"+
    "\5\11\1\0\1\11\1\0\1\11\2\0\1\11\1\373"+
    "\5\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\15\0"+
    "\2\11\1\374\1\0\6\11\1\0\1\11\7\0\1\375"+
    "\60\0\1\11\2\0\3\11\1\376\3\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\10\0\1\377"+
    "\133\0\1\u0100\45\0\1\u0101\40\0\1\u0102\61\0\1\u0103"+
    "\5\0\3\u0103\12\0\1\u0103\26\0\1\u0103\4\0\1\u0103"+
    "\7\0\1\11\2\0\7\11\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\2\11"+
    "\1\u0104\1\0\6\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\u0105\5\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\55\0\1\u0106\12\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\2\11\1\u0107\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\2\11\1\u0108\1\0\6\11\1\0\1\11\5\0"+
    "\1\u0109\62\0\1\11\2\0\1\11\1\u010a\5\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\3\11\1\0\6\11\1\0\1\11\54\0"+
    "\1\u010b\16\0\1\u010c\63\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\1\11\1\u010d\1\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\u010e\6\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\2\0\6\11\1\u010f\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\4\0\1\u0110\63\0\1\11\2\0"+
    "\1\u0111\6\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\0\6\11"+
    "\1\0\1\11\53\0\1\u0112\14\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\1\u0113\2\11\1\0\6\11\1\0"+
    "\1\11\7\0\1\u0114\60\0\1\11\2\0\3\11\1\u0115"+
    "\3\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\5\0\1\u0116\62\0\1\11\2\0\1\11\1\u0117"+
    "\5\11\3\0\3\11\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\15\0\3\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\u0118\6\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\5\0\1\u0119"+
    "\62\0\1\11\2\0\1\11\1\u011a\5\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\56\0\2\u011b"+
    "\16\0\1\u011c\134\0\1\u011d\23\0\1\u011e\55\0\1\u011f"+
    "\5\0\3\u011f\12\0\1\u011f\26\0\1\u011f\4\0\1\u011f"+
    "\17\0\1\u0120\56\0\1\11\2\0\5\11\1\u0121\1\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\3\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\1\u0122\3\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\11\0\1\u0123"+
    "\56\0\1\11\2\0\5\11\1\u0124\1\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\56\0\2\u0125"+
    "\10\0\1\11\2\0\7\11\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\u0125\1\u0126\5\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\u0127\6\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\0\6\11"+
    "\1\0\1\11\65\0\2\u0128\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\3\11\1\0\6\11\1\u0128\1\u0129"+
    "\12\0\1\u012a\55\0\1\11\2\0\6\11\1\u012b\3\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\15\0\3\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\1\u012c\2\0\1\11\1\u012d\1\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\7\0\1\u012e"+
    "\64\0\1\u012f\65\0\1\u0130\136\0\1\u0131\13\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\1\11\1\u0132\1\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\15\0\2\11\1\u0133\1\0\6\11\1\0"+
    "\1\11\13\0\1\u0134\3\0\1\u0134\50\0\1\11\2\0"+
    "\7\11\1\u0134\2\0\1\11\1\u0135\1\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\6\11\1\0\1\11\5\0\1\u0136\62\0\1\11"+
    "\2\0\1\11\1\u0137\5\11\3\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\15\0\3\11"+
    "\1\0\6\11\1\0\1\11\60\0\1\u0138\7\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\15\0\3\11\1\0\1\11"+
    "\1\u0139\4\11\1\0\1\11\12\0\1\u013a\63\0\1\u013b"+
    "\60\0\1\11\2\0\3\11\1\u013c\3\11\3\0\3\11"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\15\0\3\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\u013d\6\11\3\0\3\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\15\0\3\11\1\0"+
    "\6\11\1\0\1\11\60\0\1\u013e\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12815];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\15\1\1\11\2\1\1\11\1\1\2\11"+
    "\10\1\10\11\12\1\2\11\4\1\2\11\3\1\2\0"+
    "\1\11\6\1\1\0\1\1\2\0\1\1\1\0\3\1"+
    "\2\0\1\1\5\0\6\1\1\0\1\1\5\11\3\1"+
    "\1\0\1\1\2\0\1\11\20\1\1\0\1\1\1\11"+
    "\2\0\1\11\3\1\7\0\5\1\1\0\5\1\1\0"+
    "\1\11\2\1\3\0\4\1\1\0\11\1\1\0\1\11"+
    "\1\1\1\0\1\11\2\1\2\0\1\11\4\0\3\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\11\3\0"+
    "\5\1\1\0\7\1\1\11\1\0\2\1\2\0\1\11"+
    "\2\0\3\1\1\11\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\2\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\3\1\1\0\1\1\5\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\11\3\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\2\1\1\11\1\1"+
    "\2\0\1\11\1\0\1\11\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\2\11\1\0\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //--------> Codigo de Usuario en sintaxis Java
    public Cola ErroresLexicos = new Cola();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisis_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Espacios en blanco se ignoran */
            } 
            // fall through
          case 78: break;
          case 2: 
            { System.out.println("Error Lexico Lexema: " + yytext() + " Fila: " + yyline + " Columna: " + yycolumn);
                                        Errores error = new Errores(yytext(),yyline,yycolumn
                                            ,"Error Lexico, No Especificado en el Lenguaje","Lexico");
                                        ErroresLexicos.insertar(error);
            } 
            // fall through
          case 79: break;
          case 3: 
            { return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 4: 
            { return new Symbol(Simbolos.identificador, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 5: 
            { return new Symbol(Simbolos.division, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 6: 
            { return new Symbol(Simbolos.multiplicacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 7: 
            { return new Symbol(Simbolos.llaveA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 8: 
            { return new Symbol(Simbolos.resta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 9: 
            { return new Symbol(Simbolos.suma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 10: 
            { return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 11: 
            { return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 12: 
            { return new Symbol(Simbolos.menorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 13: 
            { return new Symbol(Simbolos.mayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 14: 
            { return new Symbol(Simbolos.logicoXOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 15: 
            { return new Symbol(Simbolos.parentesisA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 16: 
            { return new Symbol(Simbolos.parentesisC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 17: 
            { return new Symbol(Simbolos.llaveC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 18: 
            { return new Symbol(Simbolos.corcheteA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 19: 
            { return new Symbol(Simbolos.corcheteC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 20: 
            { return new Symbol(Simbolos.puntoComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 21: 
            { return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 22: 
            { return new Symbol(Simbolos.posicionX, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 23: 
            { return new Symbol(Simbolos.posicionY, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 24: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.texto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 25: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.llaveA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 26: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.menorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 27: 
            { yybegin(TEXTO); return new Symbol(Simbolos.mayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 28: 
            { return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 29: 
            { return new Symbol(Simbolos.si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 30: 
            { 
            } 
            // fall through
          case 107: break;
          case 31: 
            { return new Symbol(Simbolos.logicoOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 32: 
            { return new Symbol(Simbolos.igualigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 33: 
            { return new Symbol(Simbolos.diferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 34: 
            { return new Symbol(Simbolos.menorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 35: 
            { return new Symbol(Simbolos.mayorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 36: 
            { return new Symbol(Simbolos.logicoAND, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 37: 
            { return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 38: 
            { return new Symbol(Simbolos.doble, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 39: 
            { return new Symbol(Simbolos.fuente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 40: 
            { return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 41: 
            { return new Symbol(Simbolos.var, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 42: 
            { return new Symbol(Simbolos.potencia, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 43: 
            { return new Symbol(Simbolos.max, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 44: 
            { return new Symbol(Simbolos.min, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 45: 
            { return new Symbol(Simbolos.booleano, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 46: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.textt, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 47: 
            { return new Symbol(Simbolos.from, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 48: 
            { return new Symbol(Simbolos.list, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 49: 
            { return new Symbol(Simbolos.sino, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 50: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.items, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 51: 
            { return new Symbol(Simbolos.ftext, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 52: 
            { return new Symbol(Simbolos.fitem, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 53: 
            { return new Symbol(Simbolos.panel, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 54: 
            { return new Symbol(Simbolos.width, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 55: 
            { return new Symbol(Simbolos.color, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 56: 
            { return new Symbol(Simbolos.image, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 57: 
            { return new Symbol(Simbolos.retorno, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 58: 
            { return new Symbol(Simbolos.render, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 59: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.button, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 60: 
            { return new Symbol(Simbolos.border, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 61: 
            { return new Symbol(Simbolos.importar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 62: 
            { return new Symbol(Simbolos.height, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 63: 
            { return new Symbol(Simbolos.repetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 64: 
            { return new Symbol(Simbolos.spinner, yycolumn, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 65: 
            { return new Symbol(Simbolos.fbutton, yycolumn, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 66: 
            { return new Symbol(Simbolos.hexadecimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 143: break;
          case 67: 
            { return new Symbol(Simbolos.defecto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 144: break;
          case 68: 
            { return new Symbol(Simbolos.onClick, yycolumn, yyline, yytext());
            } 
            // fall through
          case 145: break;
          case 69: 
            { return new Symbol(Simbolos.element, yycolumn, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 70: 
            { return new Symbol(Simbolos.fspinner, yycolumn, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 71: 
            { return new Symbol(Simbolos.fdefecto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 72: 
            { return new Symbol(Simbolos.mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 149: break;
          case 73: 
            { return new Symbol(Simbolos.imprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 150: break;
          case 74: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.textField, yycolumn, yyline, yytext());
            } 
            // fall through
          case 151: break;
          case 75: 
            { return new Symbol(Simbolos.className, yycolumn, yyline, yytext());
            } 
            // fall through
          case 152: break;
          case 76: 
            { return new Symbol(Simbolos.component, yycolumn, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 77: 
            { return new Symbol(Simbolos.ftextField, yycolumn, yyline, yytext());
            } 
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
