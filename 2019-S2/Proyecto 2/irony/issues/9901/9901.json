{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Thank you for this parser, is beautiful!!\r\nI just checked the SQL grammar and I modified the non-terminal Between to contemplate the sentence between.\r\n\r\nI attached all the code with the modification\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing Irony.Parsing;\r\n\r\nnamespace Irony.Samples.SQL {\r\n  // Loosely based on SQL89 grammar from Gold parser. Supports some extra TSQL constructs.\r\n\r\n  [Language(\"SQL\", \"89\", \"SQL 89 grammar\")]\r\n    public class FormsGrammar : Grammar\r\n    {\r\n    public FormsGrammar() : base(false) { //SQL is case insensitive\r\n      //Terminals\r\n      var comment = new CommentTerminal(\"comment\", \"/*\", \"*/\");\r\n      var lineComment = new CommentTerminal(\"line_comment\", \"--\", \"\\n\", \"\\r\\n\");\r\n      NonGrammarTerminals.Add(comment);\r\n      NonGrammarTerminals.Add(lineComment);\r\n      var number = new NumberLiteral(\"number\");\r\n      var string_literal = new StringLiteral(\"string\", \"'\", StringOptions.AllowsDoubledQuote);\r\n      var Id_simple = TerminalFactory.CreateSqlExtIdentifier(this, \"id_simple\"); //covers normal identifiers (abc) and quoted id's ([abc d], \"abc d\")\r\n      var comma = ToTerm(\",\");\r\n      var dot = ToTerm(\".\");\r\n      var CREATE = ToTerm(\"CREATE\"); \r\n      var NULL = ToTerm(\"NULL\");\r\n      var NOT = ToTerm(\"NOT\");\r\n      var UNIQUE = ToTerm(\"UNIQUE\"); \r\n      var WITH = ToTerm(\"WITH\");\r\n      var TABLE = ToTerm(\"TABLE\"); \r\n      var ALTER = ToTerm(\"ALTER\"); \r\n      var ADD = ToTerm(\"ADD\"); \r\n      var COLUMN = ToTerm(\"COLUMN\"); \r\n      var DROP = ToTerm(\"DROP\"); \r\n      var CONSTRAINT = ToTerm(\"CONSTRAINT\");\r\n      var INDEX = ToTerm(\"INDEX\"); \r\n      var ON = ToTerm(\"ON\");\r\n      var KEY = ToTerm(\"KEY\");\r\n      var PRIMARY = ToTerm(\"PRIMARY\"); \r\n      var INSERT = ToTerm(\"INSERT\");\r\n      var INTO = ToTerm(\"INTO\");\r\n      var UPDATE = ToTerm(\"UPDATE\");\r\n      var SET = ToTerm(\"SET\"); \r\n      var VALUES = ToTerm(\"VALUES\");\r\n      var DELETE = ToTerm(\"DELETE\");\r\n      var SELECT = ToTerm(\"SELECT\"); \r\n      var FROM = ToTerm(\"FROM\");\r\n      var AS = ToTerm(\"AS\");\r\n      var COUNT = ToTerm(\"COUNT\");\r\n      var JOIN = ToTerm(\"JOIN\");\r\n      var BY = ToTerm(\"BY\");\r\n\r\n\r\n      var T_NOT=ToTerm(\"NOT\"); //Added By ECF\r\n\r\n      //Non-terminals\r\n      var Id = new NonTerminal(\"Id\");\r\n      var stmt = new NonTerminal(\"stmt\");\r\n      var createTableStmt = new NonTerminal(\"createTableStmt\");\r\n      var createIndexStmt = new NonTerminal(\"createIndexStmt\");\r\n      var alterStmt = new NonTerminal(\"alterStmt\");\r\n      var dropTableStmt = new NonTerminal(\"dropTableStmt\");\r\n      var dropIndexStmt = new NonTerminal(\"dropIndexStmt\");\r\n      var selectStmt = new NonTerminal(\"selectStmt\");\r\n      var insertStmt = new NonTerminal(\"insertStmt\");\r\n      var updateStmt = new NonTerminal(\"updateStmt\");\r\n      var deleteStmt = new NonTerminal(\"deleteStmt\");\r\n      var fieldDef = new NonTerminal(\"fieldDef\");\r\n      var fieldDefList = new NonTerminal(\"fieldDefList\");\r\n      var nullSpecOpt = new NonTerminal(\"nullSpecOpt\");\r\n      var typeName = new NonTerminal(\"typeName\"); \r\n      var typeSpec = new NonTerminal(\"typeSpec\");\r\n      var typeParamsOpt = new NonTerminal(\"typeParams\");\r\n      var constraintDef = new NonTerminal(\"constraintDef\");\r\n      var constraintListOpt = new NonTerminal(\"constraintListOpt\");\r\n      var constraintTypeOpt = new NonTerminal(\"constraintTypeOpt\");\r\n      var idlist = new NonTerminal(\"idlist\"); \r\n      var idlistPar = new NonTerminal(\"idlistPar\"); \r\n      var uniqueOpt = new NonTerminal(\"uniqueOpt\");\r\n      var orderList = new NonTerminal(\"orderList\");\r\n      var orderMember = new NonTerminal(\"orderMember\"); \r\n      var orderDirOpt = new NonTerminal(\"orderDirOpt\");\r\n      var withClauseOpt = new NonTerminal(\"withClauseOpt\");\r\n      var alterCmd = new NonTerminal(\"alterCmd\");\r\n      var insertData = new NonTerminal(\"insertData\"); \r\n      var intoOpt = new NonTerminal(\"intoOpt\");\r\n      var assignList = new NonTerminal(\"assignList\");\r\n      var whereClauseOpt = new NonTerminal(\"whereClauseOpt\");\r\n      var assignment = new NonTerminal(\"assignment\");\r\n      var expression = new NonTerminal(\"expression\");\r\n      var exprList = new NonTerminal(\"exprList\");\r\n      var selRestrOpt = new NonTerminal(\"selRestrOpt\");\r\n      var selList = new NonTerminal(\"selList\");\r\n      var intoClauseOpt = new NonTerminal(\"intoClauseOpt\");\r\n      var fromClauseOpt = new NonTerminal(\"fromClauseOpt\");\r\n      var groupClauseOpt = new NonTerminal(\"groupClauseOpt\");\r\n      var havingClauseOpt = new NonTerminal(\"havingClauseOpt\");\r\n      var orderClauseOpt = new NonTerminal(\"orderClauseOpt\");\r\n      var columnItemList = new NonTerminal(\"columnItemList\");\r\n      var columnItem = new NonTerminal(\"columnItem\");\r\n      var columnSource = new NonTerminal(\"columnSource\");\r\n      var asOpt = new NonTerminal(\"asOpt\");\r\n      var aliasOpt = new NonTerminal(\"aliasOpt\");\r\n      var aggregate = new NonTerminal(\"aggregate\");\r\n      var aggregateArg = new NonTerminal(\"aggregateArg\");\r\n      var aggregateName = new NonTerminal(\"aggregateName\");\r\n      var tuple = new NonTerminal(\"tuple\");\r\n      var joinChainOpt = new NonTerminal(\"joinChainOpt\");\r\n      var joinKindOpt = new NonTerminal(\"joinKindOpt\");\r\n      var term = new NonTerminal(\"term\");\r\n      var unExpr = new NonTerminal(\"unExpr\");\r\n      var unOp = new NonTerminal(\"unOp\");\r\n      var binExpr = new NonTerminal(\"binExpr\");\r\n      var binOp = new NonTerminal(\"binOp\");\r\n      var betweenExpr = new NonTerminal(\"betweenExpr\");\r\n      var inExpr = new NonTerminal(\"inExpr\");\r\n      var parSelectStmt = new NonTerminal(\"parSelectStmt\");\r\n      var notOpt = new NonTerminal(\"notOpt\");\r\n      var funCall = new NonTerminal(\"funCall\");\r\n      var stmtLine = new NonTerminal(\"stmtLine\");\r\n      var semiOpt = new NonTerminal(\"semiOpt\");\r\n      var stmtList = new NonTerminal(\"stmtList\");\r\n      var funArgs = new NonTerminal(\"funArgs\");\r\n      var inStmt = new NonTerminal(\"inStmt\");\r\n\r\n\r\n      var NT_BETWEEN=new NonTerminal(\"NT_NotOpcional\"); //Added by ECF\r\n      //BNF Rules\r\n      this.Root = stmtList;\r\n      stmtLine.Rule = stmt + semiOpt;\r\n      semiOpt.Rule = Empty | \";\";\r\n      stmtList.Rule = MakePlusRule(stmtList, stmtLine);\r\n\r\n      //ID\r\n      Id.Rule = MakePlusRule(Id, dot, Id_simple);\r\n\r\n      stmt.Rule = createTableStmt | createIndexStmt | alterStmt \r\n                | dropTableStmt | dropIndexStmt \r\n                | selectStmt | insertStmt | updateStmt | deleteStmt\r\n                | \"GO\" ;\r\n      //Create table\r\n      createTableStmt.Rule = CREATE + TABLE + Id + \"(\" + fieldDefList + \")\" + constraintListOpt;\r\n      fieldDefList.Rule = MakePlusRule(fieldDefList, comma, fieldDef);\r\n      fieldDef.Rule = Id + typeName + typeParamsOpt + nullSpecOpt;\r\n      nullSpecOpt.Rule = NULL | NOT + NULL | Empty;\r\n      typeName.Rule = ToTerm(\"BIT\") | \"DATE\" | \"TIME\" | \"TIMESTAMP\" | \"DECIMAL\" | \"REAL\" | \"FLOAT\" | \"SMALLINT\" | \"INTEGER\"\r\n                                   | \"INTERVAL\" | \"CHARACTER\"\r\n                                   // MS SQL types:  \r\n                                   | \"DATETIME\" | \"INT\" | \"DOUBLE\" | \"CHAR\" | \"NCHAR\" | \"VARCHAR\" | \"NVARCHAR\"\r\n                                   | \"IMAGE\" | \"TEXT\" | \"NTEXT\";\r\n      typeParamsOpt.Rule = \"(\" + number + \")\" | \"(\" + number + comma + number + \")\" | Empty;\r\n      constraintDef.Rule = CONSTRAINT + Id + constraintTypeOpt;\r\n      constraintListOpt.Rule = MakeStarRule(constraintListOpt, constraintDef );\r\n      constraintTypeOpt.Rule = PRIMARY + KEY + idlistPar | UNIQUE + idlistPar | NOT + NULL + idlistPar\r\n                             | \"Foreign\" + KEY + idlistPar + \"References\" + Id + idlistPar;\r\n      idlistPar.Rule = \"(\" + idlist + \")\";\r\n      idlist.Rule = MakePlusRule(idlist, comma, Id); \r\n\r\n      //Create Index\r\n      createIndexStmt.Rule = CREATE + uniqueOpt + INDEX + Id + ON + Id + orderList + withClauseOpt;\r\n      uniqueOpt.Rule = Empty | UNIQUE;\r\n      orderList.Rule = MakePlusRule(orderList, comma, orderMember);\r\n      orderMember.Rule = Id + orderDirOpt;\r\n      orderDirOpt.Rule = Empty | \"ASC\" | \"DESC\";\r\n      withClauseOpt.Rule = Empty | WITH + PRIMARY | WITH + \"Disallow\" + NULL | WITH + \"Ignore\" + NULL;\r\n\r\n      //Alter \r\n      alterStmt.Rule = ALTER + TABLE + Id + alterCmd;\r\n      alterCmd.Rule = ADD + COLUMN  + fieldDefList + constraintListOpt \r\n                    | ADD + constraintDef\r\n                    | DROP + COLUMN + Id\r\n                    | DROP + CONSTRAINT + Id;\r\n\r\n      //Drop stmts\r\n      dropTableStmt.Rule = DROP + TABLE + Id;\r\n      dropIndexStmt.Rule = DROP + INDEX + Id + ON + Id; \r\n\r\n      //Insert stmt\r\n      insertStmt.Rule = INSERT + intoOpt + Id + idlistPar + insertData;\r\n      insertData.Rule = selectStmt | VALUES + \"(\" + exprList + \")\"; \r\n      intoOpt.Rule = Empty | INTO; //Into is optional in MSSQL\r\n\r\n      //Update stmt\r\n      updateStmt.Rule = UPDATE + Id + SET + assignList + whereClauseOpt;\r\n      assignList.Rule = MakePlusRule(assignList, comma, assignment);\r\n      assignment.Rule = Id + \"=\" + expression;\r\n\r\n      //Delete stmt\r\n      deleteStmt.Rule = DELETE + FROM + Id + whereClauseOpt;\r\n\r\n      //Select stmt\r\n      selectStmt.Rule = SELECT + selRestrOpt + selList + intoClauseOpt + fromClauseOpt + whereClauseOpt +\r\n                        groupClauseOpt + havingClauseOpt + orderClauseOpt;\r\n      selRestrOpt.Rule = Empty | \"ALL\" | \"DISTINCT\";\r\n      selList.Rule = columnItemList | \"*\";\r\n      columnItemList.Rule = MakePlusRule(columnItemList, comma, columnItem);\r\n      columnItem.Rule = columnSource + aliasOpt;\r\n      aliasOpt.Rule = Empty | asOpt + Id; \r\n      asOpt.Rule = Empty | AS;\r\n      columnSource.Rule = aggregate | Id;\r\n      aggregate.Rule = aggregateName + \"(\" + aggregateArg + \")\";\r\n      aggregateArg.Rule = expression | \"*\"; \r\n      aggregateName.Rule = COUNT | \"Avg\" | \"Min\" | \"Max\" | \"StDev\" | \"StDevP\" | \"Sum\" | \"Var\" | \"VarP\";\r\n      intoClauseOpt.Rule = Empty | INTO + Id;\r\n      fromClauseOpt.Rule = Empty | FROM + idlist + joinChainOpt; \r\n      joinChainOpt.Rule = Empty | joinKindOpt + JOIN + idlist + ON + Id + \"=\" + Id;\r\n      joinKindOpt.Rule = Empty | \"INNER\" | \"LEFT\" | \"RIGHT\";\r\n      whereClauseOpt.Rule = Empty | \"WHER",
    "LastUpdatedDate": "2016-02-19T07:01:43.017-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "irony",
    "ReportedDate": "2016-02-19T07:01:43.017-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Add \"Between\" in the SQL grammar Example 89",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 9901
  },
  "FileAttachments": [],
  "Comments": []
}