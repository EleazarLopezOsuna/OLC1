{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 2,
    "Custom": null,
    "Description": "Irony includes two phases. In the first phase it create a parser tree. After that its optional to create a AST tree. What are the differences between the parse tree and the AST tree? What is the reason to implement that?",
    "LastUpdatedDate": "2016-12-20T10:06:06.8-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "irony",
    "ReportedDate": "2016-12-20T08:52:41.623-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Irony Question",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 9904
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Irony includes two phases. In the first phase it create a parser tree. After that its optional to create a AST tree. What are the differences between the parse tree and the AST tree? What is the reason to implement that?",
      "PostedDate": "2016-12-20T08:52:57.35-08:00",
      "Id": 205678
    },
    {
      "Message": "see here\nhttp://stackoverflow.com/questions/5026517/whats-the-difference-between-parse-tree-and-ast\n\nparsing tree is the same as concrete syntax tree (CST)\nas an example, if we build compiler for .NET languages, VB and c# would have different CSTs, but the same AST; so when building compilers for both, it makes sense to build two parsers (VB-CST-AST) and (c#->CST-AST), and then common module (AST-> optimization -> IL or machine codes)",
      "PostedDate": "2016-12-20T10:06:06.8-08:00",
      "Id": 205681
    }
  ]
}