[
  {
    "Id": "926070",
    "ThreadId": "399200",
    "Html": "\r\n<p>The first one is really just a toy: dispense with explicitly naming it if the node-name - &quot;Node&quot; suits:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> TypedNonTerminal : NonTerminal {\r\n   <span style=\"color:blue\">public</span> TypedNonTerminal(Type type) : <span style=\"color:blue\">base</span>(type.Name.Replace(<span style=\"color:#a31515\">&quot;Node&quot;</span>,<span style=\"color:blue\">string</span>.Empty), type) {}\r\n}\r\n</pre>\r\n<p>The second is more substantial. In the music parser, changes to the default Tempo, Style, Octave\r\n<br>\r\nand NoteLength can be made in the music string, and these are tracked by setting values in a class\r\n<br>\r\nnamed Notes. Here is a single NonTerminal which, as its <strong><em>Evaluation</em></strong>, sets the corresponding static\r\n<br>\r\nfields for these settings.</p>\r\n<pre><div style=\"background-color:white; color:black\"><pre><span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\">  A NonTerminal publishing an internal AstNodeCreator using a &lt;i&gt;setter&lt;/i&gt; for the given </span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\">  class (constructed from the supplied &lt;i&gt;getter&lt;/i&gt;) as its fieldUpdater.</span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> &lt;see cref=&quot;CommandAstNode{TValue}&quot;/&gt;</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;typeparam name=&quot;TClass&quot;&gt;</span><span style=\"color:green\">The class for which a &lt;i&gt;setter&lt;/i&gt; is desired.&lt;/typeparam&gt;</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;typeparam name=&quot;TValue&quot;&gt;</span><span style=\"color:green\">The Type for both the &lt;i&gt;setter&lt;/i&gt; and &lt;i&gt;getter&lt;/i&gt;.&lt;/typeparam&gt;</span>\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CommandNonTerminal&lt;TClass,TValue&gt; : NonTerminal\r\n<span style=\"color:blue\">where</span> TClass:<span style=\"color:blue\">new</span>() \r\n<span style=\"color:blue\">where</span> TValue:<span style=\"color:blue\">struct</span> {\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n   <span style=\"color:gray\">///</span><span style=\"color:green\">  Returns a NonTerminal publishing an internal AstNodeCreator using a &lt;i&gt;setter&lt;/i&gt; for the given </span>\r\n   <span style=\"color:gray\">///</span><span style=\"color:green\">  class constructed from  the supplied &lt;i&gt;getter&lt;/i&gt; as its fieldUpdater.</span>\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;typeparam name=&quot;TClass&quot;&gt;</span><span style=\"color:green\">The class for which a &lt;i&gt;setter&lt;/i&gt; is desired.&lt;/typeparam&gt;</span>\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;typeparam name=&quot;TValue&quot;&gt;</span><span style=\"color:green\">The Type for both the &lt;i&gt;setter&lt;/i&gt; and &lt;i&gt;getter&lt;/i&gt;.&lt;/typeparam&gt;</span>\r\n   <span style=\"color:blue\">public</span> CommandNonTerminal(Expression&lt;Func&lt;TClass,TValue&gt;&gt; getter) \r\n   : <span style=\"color:blue\">base</span>(((MemberExpression)getter.Body).Member.Name) {\r\n      <span style=\"color:blue\">base</span>.AstConfig.NodeCreator = CommandNodeCreator(getter);\r\n   }\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n   <span style=\"color:gray\">///</span><span style=\"color:green\">  Returns an AstNodeCreator using a &lt;i&gt;setter&lt;/i&gt; for the given class constructed from </span>\r\n   <span style=\"color:gray\">///</span><span style=\"color:green\">  the supplied &lt;i&gt;getter&lt;/i&gt; as its fieldUpdater.</span>\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;typeparam name=&quot;TClass&quot;&gt;</span><span style=\"color:green\">The class for which a &lt;i&gt;setter&lt;/i&gt; is desired.&lt;/typeparam&gt;</span>\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;typeparam name=&quot;TValue&quot;&gt;</span><span style=\"color:green\">The Type for both the &lt;i&gt;setter&lt;/i&gt; and &lt;i&gt;getter&lt;/i&gt;.&lt;/typeparam&gt;</span>\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;getter&quot;&gt;</span><span style=\"color:green\">A &lt;i&gt;getter&lt;/i&gt; in class &lt;b&gt;TClass&lt;/b&gt;&lt;/param&gt;</span>\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span><span style=\"color:green\">AstNodeCreator for the specified flavour of Command Node, using the constructed </span>\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;i&gt;</span><span style=\"color:green\">setter&lt;/i&gt; as its &lt;i&gt;fieldUpdater&lt;/i&gt;.&lt;/returns&gt;</span>\r\n   <span style=\"color:blue\">private</span> AstNodeCreator CommandNodeCreator(Expression&lt;Func&lt;TClass,TValue&gt;&gt; getter) {\r\n      <span style=\"color:blue\">var</span> member\t= (MemberExpression)getter.Body;\r\n      <span style=\"color:blue\">var</span> action = Utils.SetterFromGetter&lt;TClass,TValue&gt;(getter);\r\n\r\n      Action&lt;TValue&gt; fieldUpdater = (t) =&gt; action(<span style=\"color:blue\">new</span> TClass(),t);\r\n      <span style=\"color:blue\">return</span> (c,s) =&gt; (<span style=\"color:blue\">new</span> CommandAstNode&lt;TValue&gt;(fieldUpdater, member.Member.Name)).Init(c,s);\r\n   }\r\n}\r\n</pre>\n</div>\n</pre>\r\n</div>\r\n<p>And the code for SetterToGetter, of course:</p>\r\n<pre><div style=\"background-color:white; color:black\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> Action&lt;TClass,TValue&gt; SetterFromGetter&lt;TClass,TValue&gt;(\r\n   Expression&lt;Func&lt;TClass,TValue&gt;&gt; getter) \r\n{\r\n   <span style=\"color:blue\">var</span> member\t= (MemberExpression)getter.Body;\r\n   <span style=\"color:blue\">var</span> param\t= Expression.Parameter(<span style=\"color:blue\">typeof</span>(TValue), <span style=\"color:#a31515\">&quot;value&quot;</span>);\r\n   <span style=\"color:blue\">var</span> setter\t= Expression.Lambda&lt;Action&lt;TClass,TValue&gt;&gt;(\r\n                  Expression.Assign(member, param), getter.Parameters[0], param);\r\n\r\n   <span style=\"color:blue\">return</span> setter.Compile();\r\n}</pre>\n</div>\n</pre>\r\n",
    "PostedDate": "2012-10-12T20:21:23.783-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926071",
    "ThreadId": "399200",
    "Html": "\r\n<p>And an example of theri use in the music parser:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">var</span> Tempo\t= <span style=\"color:blue\">new</span> CommandNonTerminal &lt;Notes,<span style=\"color:blue\">byte</span>&gt;\t(Notes =&gt; Notes.Tempo);\r\n<span style=\"color:blue\">var</span> Length\t= <span style=\"color:blue\">new</span> CommandNonTerminal &lt;Notes,<span style=\"color:blue\">byte</span>&gt;\t(Notes =&gt; Notes.Length);\r\n<span style=\"color:blue\">var</span> Style\t= <span style=\"color:blue\">new</span> CommandNonTerminal &lt;Notes,Style&gt;\t(Notes =&gt; Notes.Style);\r\n<span style=\"color:blue\">var</span> OctaveNo\t= <span style=\"color:blue\">new</span> CommandNonTerminal &lt;Notes,<span style=\"color:blue\">byte</span>&gt;\t(Notes =&gt; Notes.Octave);\r\n<span style=\"color:blue\">var</span> Shift\t= <span style=\"color:blue\">new</span> CommandNonTerminal &lt;Notes,OctaveShift&gt;\t(Notes =&gt; Notes.Shift);\r\n\r\n<span style=\"color:blue\">var</span> Note\t= <span style=\"color:blue\">new</span> TypedNonTerminal(<span style=\"color:blue\">typeof</span>(NoteNode));\r\n<span style=\"color:blue\">var</span> Rest\t= <span style=\"color:blue\">new</span> TypedNonTerminal(<span style=\"color:blue\">typeof</span>(RestNode));\r\n<span style=\"color:blue\">var</span> Pitch\t= <span style=\"color:blue\">new</span> TypedNonTerminal(<span style=\"color:blue\">typeof</span>(PitchNode));\r\n<span style=\"color:blue\">var</span> NoteNumber\t= <span style=\"color:blue\">new</span> TypedNonTerminal(<span style=\"color:blue\">typeof</span>(NoteNumberNode));\r\n<span style=\"color:blue\">var</span> NoteElement\t= <span style=\"color:blue\">new</span> TypedNonTerminal(<span style=\"color:blue\">typeof</span>(NoteElementNode));\r\n\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2012-10-12T20:26:43.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]