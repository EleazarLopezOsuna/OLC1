[
  {
    "Id": "833999",
    "ThreadId": "355082",
    "Html": "<p>Hi there,</p>\n<p>It seems, that the power operator is not yet implemented (at least in the archive available in the download section). As a quick &amp; dirty workaround people might consider derivating their own LanguageRuntime (or add the code directely at&nbsp;InitBinaryOperatorImplementationsForMatchedTypes  ):</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> MyLanguageRuntime : LanguageRuntime\n    {\n        <span style=\"color: blue;\">public</span> MyLanguageRuntime(LanguageData language)\n        : <span style=\"color: blue;\">base</span>(language)\n        {\n        }\n\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> InitBinaryOperatorImplementationsForMatchedTypes()\n        {\n            <span style=\"color: green;\">// let's add the powerfunction implementation here such that the </span>\n            <span style=\"color: green;\">// base class adds all the convenience functions (overflow check, </span>\n            <span style=\"color: green;\">// type conversions) on its own</span>\n            <span style=\"color: blue;\">var</span> op = ExpressionType.Power;\n            AddBinary(op, <span style=\"color: blue;\">typeof</span>(Int32), (x, y) =&gt; <span style=\"color: blue;\">checked</span>((Int32)Math.Pow((Int32)x, (Int32)y)));\n            AddBinary(op, <span style=\"color: blue;\">typeof</span>(UInt32), (x, y) =&gt; <span style=\"color: blue;\">checked</span>((UInt32)Math.Pow((UInt32)x, (UInt32)y)));\n            AddBinary(op, <span style=\"color: blue;\">typeof</span>(Int64), (x, y) =&gt; <span style=\"color: blue;\">checked</span>((Int64)Math.Pow((Int64)x, (Int64)y)));\n            AddBinary(op, <span style=\"color: blue;\">typeof</span>(UInt64), (x, y) =&gt; <span style=\"color: blue;\">checked</span>((UInt64)Math.Pow((UInt64)x, (UInt64)y)));\n            AddBinary(op, <span style=\"color: blue;\">typeof</span>(Single), (x, y) =&gt; <span style=\"color: blue;\">checked</span>((Single)Math.Pow((Single)x, (Single)y)));\n            AddBinary(op, <span style=\"color: blue;\">typeof</span>(<span style=\"color: blue;\">double</span>), (x, y) =&gt; <span style=\"color: blue;\">checked</span>(Math.Pow((<span style=\"color: blue;\">double</span>)x, (<span style=\"color: blue;\">double</span>)y)));\n\n            <span style=\"color: green;\">// continue with the base implementation</span>\n            <span style=\"color: blue;\">base</span>.InitBinaryOperatorImplementationsForMatchedTypes();\n        }\n    }</pre>\n</div>\n<p>If someone has a hint, how to elegantly change the operator mapping from '**' to '^', I would be very happy.</p>\n<p>Best regards,</p>\n<p>Lukas</p>",
    "PostedDate": "2012-05-09T07:29:12.353-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "834916",
    "ThreadId": "355082",
    "Html": "<p>operator mappings (symbol - ExpressionType) are defined in OperatorHandler class which is passed to AstInterpreterContext constructor.&nbsp;</p>\r\n<p>You can inherit from this class and redefine power mapping. Yeah, it's a bit too complicated for such a simple thing, we should simplify it in the future</p>",
    "PostedDate": "2012-05-10T21:08:34.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "835056",
    "ThreadId": "355082",
    "Html": "<p>Hi Roman,</p>\r\n<p>Thanks for pointing that out (and for your very nice framework)! Hope, this thread helps someone in the feature.</p>\r\n<p>Cheers, <br /> Lukas</p>",
    "PostedDate": "2012-05-11T03:55:25.727-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1247430",
    "ThreadId": "355082",
    "Html": "Maybe it will help someone. To change the Operator mapping for Power I inherited from OperatorHandler like this:<br />\n<pre><code>    public class FormulaLanguageOperatorHandler : OperatorHandler\n    {\n        public FormulaLanguageOperatorHandler(bool languageCaseSensitive)\n            : base(languageCaseSensitive)\n        {\n        }\n\n        public override OperatorInfoDictionary BuildDefaultOperatorMappings()\n        {\n            var dict = base.BuildDefaultOperatorMappings();\n            var operatorInfo = dict[&quot;^&quot;];\n            operatorInfo.ExpressionType = System.Linq.Expressions.ExpressionType.Power;\n            operatorInfo.Precedence = dict[&quot;**&quot;].Precedence;\n            return dict;\n        }\n    }</code></pre>\n\nAnd I pass it to AstInterpreterContext in InterpretedLanguageGrammar.BuildAst:<br />\n<pre><code>    public class FormulaGrammer : InterpretedLanguageGrammar\n    {\n        ...\n\n        public override void BuildAst(LanguageData language, ParseTree parseTree)\n        {\n            var opHandler = new FormulaLanguageOperatorHandler(language.Grammar.CaseSensitive);\n            Util.Check(!parseTree.HasErrors(), &quot;ParseTree has errors, cannot build AST.&quot;);\n            var astContext = new InterpreterAstContext(language, opHandler);\n            var astBuilder = new Irony.Ast.AstBuilder(astContext);\n            astBuilder.BuildAst(parseTree);\n        }\n    }</code></pre>\n\nWorks great for me.<br />\n",
    "PostedDate": "2014-05-20T07:35:18.857-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]