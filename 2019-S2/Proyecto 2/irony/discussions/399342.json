[
  {
    "Id": "926537",
    "ThreadId": "399342",
    "Html": "\r\n<p>Hi,</p>\r\n<p>First off - love Irony.NET, pretty cool :)</p>\r\n<p>I'm having issue with &quot;shift reduct conflict&quot; with the following rules setup:</p>\r\n<p><br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Expressions.Rule =          MakeStarRule(Expressions, Expression);\r\nExpression.Rule =           ValueExpression | FunctionCall;\r\nValueExpression.Rule =      <span style=\"color:#a31515\">&quot;@&quot;</span> &#43; Identifier |\r\n\t\t\t    <span style=\"color:#a31515\">&quot;@&quot;</span> &#43; Identifier &#43; Expression;\r\nFunctionCall.Rule =\t    <span style=\"color:#a31515\">&quot;$&quot;</span> &#43; Identifier &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>What I'm trying to achieve is to be able to have the following construct:</p>\r\n<p>&nbsp;</p>\r\n<p>@SomeIdentifier$SomeMethodCall()@SomeOtherIdentifier</p>\r\n<p>and</p>\r\n<p>@SomeIdentifier</p>\r\n<p>and</p>\r\n<p>@$SomeMethodCall</p>\r\n<p>and</p>\r\n<p>@SomeIdentifier$SomeMethodCall()@SomeOtherIdentifier$SomeOtherMethodCall()</p>\r\n<p>etc....</p>\r\n<p>&nbsp;</p>\r\n<p>Would appreciate if someone could help me out on how to setup the language rules for this.</p>\r\n<p>&nbsp;</p>\r\n<p>Thank you</p>\r\n<p>/Peter</p>\r\n",
    "PostedDate": "2012-10-14T22:41:35.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926573",
    "ThreadId": "399342",
    "Html": "\r\n<p>Assuming that <strong><em>@$SomeMethodCall</em></strong> is a typo and should read\r\n<em><strong>$SomeMethodCall(),</strong></em> then the following grammar seems to suit:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">var</span> identifier\t\t= <span style=\"color:blue\">new</span> RegexBasedTerminal(<span style=\"color:#a31515\">&quot;identifier&quot;</span>, <span style=\"color:#a31515\">@&quot;[a-zA-Z_][a-zA-Z_0-9]*&quot;</span>);\r\n<span style=\"color:blue\">var</span> Expression\t\t= <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;Expression&quot;</span>);\r\n<span style=\"color:blue\">var</span> Expressions\t\t= <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;Expressions&quot;</span>);\r\n<span style=\"color:blue\">var</span> ValueExpression\t= <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ValueExpression&quot;</span>);\r\n<span style=\"color:blue\">var</span> FunctionCall\t= <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FunctionCall&quot;</span>);\r\n\r\nRoot\t\t\t= Expressions;\r\n\r\nExpressions.Rule\t=  MakeStarRule(Expressions, Expression);\r\nExpression.Rule\t\t= ValueExpression | FunctionCall;\r\nValueExpression.Rule\t= <span style=\"color:#a31515\">&quot;@&quot;</span> &#43; identifier ;\r\nFunctionCall.Rule\t= <span style=\"color:#a31515\">&quot;$&quot;</span> &#43; identifier &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\r\n\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2012-10-15T01:13:27.823-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926633",
    "ThreadId": "399342",
    "Html": "<p>Hi, thank you for the help :)</p>\r\n<p>- however I realized I oversimplified the example when posting it here :/ - how would I solve the following problem? :) (this is exactly as I in code):</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>            GrammarComments = <span style=\"color: #a31515;\">\"Slick scripts interpreter.\"</span>;\r\n            \r\n\r\n            <span style=\"color: green;\">// Terminals</span>\r\n            <span style=\"color: blue;\">var</span> Number = <span style=\"color: blue;\">new</span> NumberLiteral(<span style=\"color: #a31515;\">\"Number\"</span>);\r\n            Number.DefaultIntTypes = <span style=\"color: blue;\">new</span> TypeCode[] { TypeCode.Int32 };            \r\n            Number.Options |= NumberOptions.IntOnly;\r\n\r\n            <span style=\"color: blue;\">var</span> CharLiteral = <span style=\"color: blue;\">new</span> StringLiteral(<span style=\"color: #a31515;\">\"Char\"</span>, <span style=\"color: #a31515;\">\"'\"</span>, StringOptions.AllowsAllEscapes);\r\n            <span style=\"color: blue;\">var</span> StringLiteral = <span style=\"color: blue;\">new</span> StringLiteral(<span style=\"color: #a31515;\">\"String\"</span>, <span style=\"color: #a31515;\">\"\\\"\"</span>, StringOptions.AllowsAllEscapes);\r\n            <span style=\"color: blue;\">var</span> Identifier = <span style=\"color: blue;\">new</span> IdentifierTerminal(<span style=\"color: #a31515;\">\"Identifier\"</span>, <span style=\"color: #a31515;\">\"_-\"</span>, <span style=\"color: #a31515;\">\"\"</span>);\r\n            <span style=\"color: blue;\">var</span> TextLiteral = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"identifier\"</span>, <span style=\"color: #a31515;\">@\"[a-zA-Z_][a-zA-Z_0-9]*\"</span>);\r\n\r\n            <span style=\"color: blue;\">var</span> LineComment = <span style=\"color: blue;\">new</span> CommentTerminal(<span style=\"color: #a31515;\">\"LineComment\"</span>, <span style=\"color: #a31515;\">\"//\"</span>, <span style=\"color: #a31515;\">\"\\n\"</span>, <span style=\"color: #a31515;\">\"\\r\"</span>);            \r\n            NonGrammarTerminals.Add(LineComment);\r\n\r\n            <span style=\"color: blue;\">var</span> BlockComment = <span style=\"color: blue;\">new</span> CommentTerminal(<span style=\"color: #a31515;\">\"BlockComment\"</span>, <span style=\"color: #a31515;\">\"/*\"</span>, <span style=\"color: #a31515;\">\"*/\"</span>);            \r\n            NonGrammarTerminals.Add(BlockComment);\r\n\r\n            <span style=\"color: green;\">//Keywords</span>\r\n            <span style=\"color: blue;\">var</span> TrueKeyword = ToTerm(<span style=\"color: #a31515;\">\"true\"</span>, <span style=\"color: #a31515;\">\"true\"</span>);\r\n            <span style=\"color: blue;\">var</span> FalseKeyword = ToTerm(<span style=\"color: #a31515;\">\"false\"</span>, <span style=\"color: #a31515;\">\"false\"</span>);\r\n            <span style=\"color: blue;\">var</span> comma = ToTerm(<span style=\"color: #a31515;\">\",\"</span>);            \r\n\r\n            <span style=\"color: green;\">//Non terminals</span>\r\n            <span style=\"color: green;\">//Simple</span>\r\n            <span style=\"color: blue;\">var</span> SimpleValue = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"SimpleValue\"</span>, <span style=\"color: blue;\">typeof</span>(SimpleValue));\r\n            <span style=\"color: blue;\">var</span> StringValue = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"StringValue\"</span>, <span style=\"color: blue;\">typeof</span>(StringValue));\r\n            <span style=\"color: blue;\">var</span> NumberValue = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"NumberValue\"</span>, <span style=\"color: blue;\">typeof</span>(NumberValue));\r\n            <span style=\"color: blue;\">var</span> BoolValue = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"BoolValue\"</span>, <span style=\"color: blue;\">typeof</span>(BoolValue));\r\n\r\n            <span style=\"color: green;\">//Complex</span>\r\n            <span style=\"color: blue;\">var</span> Program = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Program\"</span>, <span style=\"color: blue;\">typeof</span>(Program));\r\n            <span style=\"color: blue;\">var</span> Function = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Function\"</span>, <span style=\"color: blue;\">typeof</span>(Function));\r\n            <span style=\"color: blue;\">var</span> FunctionArgs = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionArgs\"</span>, <span style=\"color: blue;\">typeof</span>(FunctionArgs));\r\n            <span style=\"color: blue;\">var</span> FunctionArg = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionArg\"</span>, <span style=\"color: blue;\">typeof</span>(FunctionArg));\r\n            <span style=\"color: blue;\">var</span> FunctionBody = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionBody\"</span>, <span style=\"color: blue;\">typeof</span>(FunctionBody));\r\n            <span style=\"color: blue;\">var</span> Expressions = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Expressions\"</span>, <span style=\"color: blue;\">typeof</span>(Expressions));\r\n            <span style=\"color: blue;\">var</span> Expression = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Expression\"</span>, <span style=\"color: blue;\">typeof</span>(Expression));\r\n            <span style=\"color: blue;\">var</span> FunctionCall = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionCall\"</span>, <span style=\"color: blue;\">typeof</span>(FunctionCall));\r\n            <span style=\"color: blue;\">var</span> FunctionCallArgs = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionCallArgs\"</span>, <span style=\"color: blue;\">typeof</span>(FunctionCallArgs));\r\n            <span style=\"color: blue;\">var</span> FunctionCallArg = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionCallArg\"</span>, <span style=\"color: blue;\">typeof</span>(FunctionCallArg));\r\n            <span style=\"color: blue;\">var</span> FunctionCallAgValue = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionCallArgValue\"</span>, <span style=\"color: blue;\">typeof</span>(FunctionCallAgValue));\r\n            <span style=\"color: blue;\">var</span> InlineFunction = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"InlineFunction\"</span>, <span style=\"color: blue;\">typeof</span>(InlineFunction));\r\n            <span style=\"color: blue;\">var</span> DefaultFunctionArg = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"DefaultFunctionArg\"</span>, <span style=\"color: blue;\">typeof</span>(DefaultFunctionArg));\r\n            <span style=\"color: blue;\">var</span> ValueExpression = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"ValueExpression\"</span>, <span style=\"color: blue;\">typeof</span>(ValueExpression));\r\n            \r\n            <span style=\"color: green;\">//Rules</span>\r\n            <span style=\"color: green;\">//Simple</span>\r\n            StringValue.Rule =              StringLiteral;\r\n            NumberValue.Rule =              Number;\r\n            BoolValue.Rule =                TrueKeyword | FalseKeyword;\r\n            SimpleValue.Rule =              StringValue | NumberValue | BoolValue;\r\n\r\n            <span style=\"color: green;\">//Complex</span>\r\n            Program.Rule =                  Function;\r\n            Function.Rule =                 Identifier + <span style=\"color: #a31515;\">\"(\"</span> + FunctionArgs + <span style=\"color: #a31515;\">\")\"</span> + FunctionBody;\r\n            FunctionArgs.Rule =             MakeStarRule(FunctionArgs, comma, FunctionArg);\r\n            FunctionArg.Rule =              DefaultFunctionArg | Identifier;\r\n            DefaultFunctionArg.Rule =       Identifier + <span style=\"color: #a31515;\">\"=\"</span> + SimpleValue;\r\n            FunctionBody.Rule =             <span style=\"color: #a31515;\">\"{\"</span> + Expressions + <span style=\"color: #a31515;\">\"}\"</span>;<br />           <br /><span style=\"color: #0000ff;\">            //These are the \"troublesome rules\" that I'm having problems with </span><br /><span style=\"color: #ff0000;\">           &nbsp;Expressions.Rule =              MakeStarRule(Expressions, Expression);\r\n            Expression.Rule =               ValueExpression | FunctionCall;\r\n            ValueExpression.Rule =          \"@\" + Identifier |\r\n                                            \"@\" + Identifier + FunctionCall |\r\n                                            \"@\" + Identifier + FunctionCall + Expression;\r\n            FunctionCall.Rule =             \"$\" + Identifier + \"(\" + FunctionCallArgs + \")\";</span><br /> <br />           &nbsp;FunctionCallArgs.Rule =         MakeStarRule(FunctionCallArgs, comma, FunctionCallArg);\r\n            FunctionCallArg.Rule =          FunctionCallAgValue | InlineFunction | Expression;\r\n            FunctionCallAgValue.Rule =      Identifier | SimpleValue;\r\n            InlineFunction.Rule =           FunctionBody;\r\n\r\n            <span style=\"color: green;\">// Punctuation, braces, transient terms, options</span>\r\n            RegisterOperators(1, <span style=\"color: #a31515;\">\"+\"</span>, <span style=\"color: #a31515;\">\"-\"</span>);\r\n            RegisterOperators(2, <span style=\"color: #a31515;\">\"*\"</span>, <span style=\"color: #a31515;\">\"/\"</span>);\r\n            RegisterOperators(3, Associativity.Right, <span style=\"color: #a31515;\">\"**\"</span>);\r\n\r\n            MarkPunctuation(<span style=\"color: #a31515;\">\"(\"</span>, <span style=\"color: #a31515;\">\")\"</span>);\r\n            MarkPunctuation(<span style=\"color: #a31515;\">\"{\"</span>, <span style=\"color: #a31515;\">\"}\"</span>);\r\n            MarkPunctuation(<span style=\"color: #a31515;\">\"=\"</span>, <span style=\"color: #a31515;\">\",\"</span>, <span style=\"color: #a31515;\">\"&amp;\"</span>, <span style=\"color: #a31515;\">\"|\"</span>, <span style=\"color: #a31515;\">\";\"</span>);\r\n\r\n            RegisterBracePair(<span style=\"color: #a31515;\">\"(\"</span>, <span style=\"color: #a31515;\">\")\"</span>);\r\n            RegisterBracePair(<span style=\"color: #a31515;\">\"{\"</span>, <span style=\"color: #a31515;\">\"}\"</span>);\r\n\r\n            MarkTransient(Expression, FunctionArg, FunctionCallArg, SimpleValue, BoolValue, NumberValue, StringValue);\r\n\r\n            Root = Program;\r\n            LanguageFlags = LanguageFlags.CreateAst;\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Now the expression that I want to allow is the following:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<pre>TestFuncDeclaration(DefaultTestArg=true) {\r\n\t$StartTestMethodCall()\r\n\t@SimpleTextOutput\r\n\t<span style=\"color: #800000;\">@TextOutputWith</span><span style=\"color: #0000ff;\">$SimpleMethodCall()</span>\r\n\t<span style=\"color: #800000;\">@TextOutputWith</span><span style=\"color: #0000ff;\">$SimpleMethodCall()</span><span style=\"color: #008000;\">AndAdditionalOutput</span>\r\n\t<span style=\"color: #800000;\">@TextOutputWith</span><span style=\"color: #0000ff;\">$SimpleMethodCall()</span><span style=\"color: #008000;\">AndAdditionalOutput</span><span style=\"color: #ff0000;\">$AndAnotherMethodCall()</span><span style=\"color: #008000;\">Etc</span>\r\n\t$EndTestMethodCall()\r\n}</pre>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color: #800000;\">Dark Red = Text output start, initialized with \"@\"</span></p>\r\n<p><span style=\"color: #0000ff;\">Blue = Method call expression</span></p>\r\n<p><span style=\"color: #008000;\">Green = Text output, same as the \"Dark Red\" except that it's not initialized with A \"@\"</span></p>\r\n<p><span style=\"color: #ff0000;\">Red = Method call... </span></p>\r\n<p>&nbsp;</p>\r\n<p>The point is to be able to continue recursively like this:</p>\r\n<p><span style=\"color: #ff0000;\">Text / MethodCall / MethodCall / MethodCall / Text / Text etc...</span></p>\r\n<p>&nbsp;</p>\r\n<p>The problem I'm having is to allow the \"recursion\" of</p>\r\n<p>@SomeText in combination with $MethodCall</p>\r\n<p>&nbsp;</p>\r\n<p>As you can see - it's \"important\" that I can initialize the statement with \"@\" and then continue typing text until I hit \"$\" (which means there is a method call) ... once method call is completed, text follows again.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks a lot for the help :)</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-15T03:44:08.567-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "926726",
    "ThreadId": "399342",
    "Html": "\r\n<p>This seems to work fine:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>  ValueExpression.Rule\t= <span style=\"color:#a31515\">&quot;@&quot;</span> &#43; Identifier;\r\n  FunctionCall.Rule\t= <span style=\"color:#a31515\">&quot;$&quot;</span> &#43; Identifier &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; FunctionCallArgs &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>\r\n\t\t\t| <span style=\"color:#a31515\">&quot;$&quot;</span> &#43; Identifier &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; FunctionCallArgs &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> &#43; Identifier;\r\n</pre>\r\n</div>\r\n<p>In your ValueExpression rule, FunctionCall is also an Expression, causing the ambiguity.</p>\r\n",
    "PostedDate": "2012-10-15T06:55:43.367-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "927420",
    "ThreadId": "399342",
    "Html": "<p>Ahaa, I see :)</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks a bunch! :)</p>\r\n<p>&nbsp;</p>\r\n<p>See you,</p>\r\n<p>/Bilsa</p>",
    "PostedDate": "2012-10-16T07:33:54.92-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]