[
  {
    "Id": "1045077",
    "ThreadId": "444049",
    "Html": "I've got very simple grammar adapted from &quot;Writing a calculator in C# using Irony&quot; sample (see below) and parsing works fine, however when I add <br />\n<pre><code>LanguageFlags = LanguageFlags.CreateAst;</code></pre>\n\nto generate AST I get following error in Parser Output tab:<br />\n<pre><code>AstNodeType or AstNodeCreator is not set on non-terminals: Irony.Parsing.BnfTermList. Either set Term.AstConfig.NodeType, or provide default values in AstContext.</code></pre>\n\nand an exception in Irony Grammar Explorer:<br />\n<pre><code>System.NullReferenceException: Object reference not set to an instance of an object.\n   at Irony.Ast.AstBuilder.BuildAst(ParseTreeNode parseNode) in C:\\Programming\\Irony_2013_03_10\\Irony_2013_03_10\\Irony\\Ast\\AstBuilder.cs:line 97\n   at Irony.Ast.AstBuilder.BuildAst(ParseTreeNode parseNode) in C:\\Programming\\Irony_2013_03_10\\Irony_2013_03_10\\Irony\\Ast\\AstBuilder.cs:line 86\n   at Irony.Ast.AstBuilder.BuildAst(ParseTree parseTree) in C:\\Programming\\Irony_2013_03_10\\Irony_2013_03_10\\Irony\\Ast\\AstBuilder.cs:line 38\n   at Irony.Parsing.Grammar.BuildAst(LanguageData language, ParseTree parseTree) in C:\\Programming\\Irony_2013_03_10\\Irony_2013_03_10\\Irony\\Parsing\\Grammar\\Grammar.cs:line 499\n   at Irony.Parsing.Parser.Parse(String sourceText, String fileName) in C:\\Programming\\Irony_2013_03_10\\Irony_2013_03_10\\Irony\\Parsing\\Parser\\Parser.cs:line 88\n   at Irony.GrammarExplorer.fmGrammarExplorer.ParseSample() in C:\\Programming\\Irony_2013_03_10\\Irony_2013_03_10\\Irony.GrammarExplorer\\fmGrammarExplorer.cs:line 359\n   at Irony.GrammarExplorer.fmGrammarExplorer.btnParse_Click(Object sender, EventArgs e) in C:\\Programming\\Irony_2013_03_10\\Irony_2013_03_10\\Irony.GrammarExplorer\\fmGrammarExplorer.cs:line 507\n   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)\n   at System.Windows.Forms.Control.WmMouseUp(Message&amp; m, MouseButtons button, Int32 clicks)\n   at System.Windows.Forms.Control.WndProc(Message&amp; m)\n   at System.Windows.Forms.ButtonBase.WndProc(Message&amp; m)\n   at System.Windows.Forms.Button.WndProc(Message&amp; m)\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)</code></pre>\n\nMy grammar is:<br />\n<pre><code>public class TestGrammar1 : Grammar\n    {\n        public TestGrammar1 () : base(false)\n        {\n            var number = new NumberLiteral(&quot;number&quot;, NumberOptions.AllowSign | NumberOptions.AllowStartEndDot);\n            var fnname = new IdentifierTerminal(&quot;fnname&quot;);\n            \n            var colname = new StringLiteral(&quot;colname&quot;);\n            colname.AddStartEnd(&quot;[&quot;, &quot;]&quot;, StringOptions.None);\n\n            var expression = new NonTerminal(&quot;expression&quot;);\n            var binexpr = new NonTerminal(&quot;binexpr&quot;, typeof(BinaryOperationNode));\n            var parexpr = new NonTerminal(&quot;parexpr&quot;);\n            var fncall = new NonTerminal(&quot;fncall&quot;, typeof(FunctionCallNode));\n            var binop = new NonTerminal(&quot;binop&quot;, &quot;operator&quot;);\n\n            expression.Rule = parexpr | binexpr | number | colname | fncall;\n            parexpr.Rule = &quot;(&quot; + expression + &quot;)&quot;;\n            binexpr.Rule = expression + binop + expression;\n            binop.Rule = ToTerm(&quot;+&quot;) | &quot;-&quot; | &quot;/&quot; | &quot;*&quot;;\n            fncall.Rule = fnname + &quot;(&quot; + expression + &quot;)&quot;;\n            this.Root = expression;\n\n            MarkPunctuation(&quot;(&quot;,&quot;)&quot;);\n\n            RegisterOperators(1, &quot;+&quot;, &quot;-&quot;);\n            RegisterOperators(2, &quot;*&quot;, &quot;/&quot;);\n            AddOperatorReportGroup(&quot;operator&quot;);\n            \n            MarkTransient(parexpr, expression, binop);\n            LanguageFlags = LanguageFlags.CreateAst;\n        }\n    }</code></pre>\n\nMy test expression:<br />\n<pre><code>sum([a])</code></pre>\n\nCan somebody please help me figure out what's wrong with my grammar?\r<br />\nThanks!<br />\n",
    "PostedDate": "2013-05-17T06:24:11.523-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045392",
    "ThreadId": "444049",
    "Html": "at first look, you are missing AST node type for colname terminal. Stop in debugger on exception and look around on data involved (which non-terminal/terminal is there). But this is my guess - colname. You have to provide AstNode implementation - a class that knows how to interpret the colname at runtime. \r<br />\nLet me know if you're stuck, I may be able to investigate in details later\r<br />\nRoman<br />\n",
    "PostedDate": "2013-05-17T21:11:13.753-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045514",
    "ThreadId": "444049",
    "Html": "Hi Roman, thanks for your reply.\r<br />\n<br />\nI've started by stripping my grammar to bare minimum (only numbers and operators) but had the same issue. During debugging I found that DefaultLiteralNodeType was null and found <a href=\"http://irony.codeplex.com/discussions/346530\" rel=\"nofollow\">this discussion</a> that explained what was going on. Overriding BuildAst() did the trick and I got the basic grammar working. I'll start adding more stuff to my grammar and see what happens. At least I've got slightly better understanding of how it all works now.\r<br />\n<br />\nThanks!<br />\n",
    "PostedDate": "2013-05-18T10:52:28.293-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]