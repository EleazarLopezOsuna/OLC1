[
  {
    "Id": "475607",
    "ThreadId": "222231",
    "Html": "<p>Hi,  I am new at language processing and I want to create a parser with Irony for a following syntax:  name1:value1 name2:value2 name3:value ...  where name1 is the name of an xml element and value is the value of the element which can also include spaces.  I have tried to modify included samples like this:</p>\r\n<pre><code><span></span><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\">public</span> TestGrammar()\r\n    {\r\n        <span style=\"color:blue\">var</span> name = <span style=\"color:blue\">new</span> IdentifierTerminal(<span style=\"color:#a31515\">&quot;name&quot;</span>);\r\n        <span style=\"color:blue\">var</span> value = CreateTerm(<span style=\"color:#a31515\">&quot;value&quot;</span>);\r\n\r\n        <span style=\"color:blue\">var</span> queries = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;queries&quot;</span>);\r\n        <span style=\"color:blue\">var</span> query = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;query&quot;</span>);\r\n        queries.Rule = MakePlusRule(queries, <span style=\"color:blue\">null</span>, query);\r\n        query.Rule = name + <span style=\"color:#a31515\">&quot;:&quot;</span> + value;\r\n        Root = queries;\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> IdentifierTerminal CreateTerm(<span style=\"color:blue\">string</span> name)\r\n    {\r\n        IdentifierTerminal term = <span style=\"color:blue\">new</span> IdentifierTerminal(name, <span style=\"color:#a31515\">&quot;!@#$%^*_'.?-&quot;</span>, <span style=\"color:#a31515\">&quot;!@#$%^*_'.?0123456789&quot;</span>);\r\n        term.CharCategories.AddRange(<span style=\"color:blue\">new</span>[]\r\n                                         {\r\n                                             UnicodeCategory.UppercaseLetter, <span style=\"color:green\">//Ul</span>\r\n                                             UnicodeCategory.LowercaseLetter, <span style=\"color:green\">//Ll</span>\r\n                                             UnicodeCategory.TitlecaseLetter, <span style=\"color:green\">//Lt</span>\r\n                                             UnicodeCategory.ModifierLetter, <span style=\"color:green\">//Lm</span>\r\n                                             UnicodeCategory.OtherLetter, <span style=\"color:green\">//Lo</span>\r\n                                             UnicodeCategory.LetterNumber, <span style=\"color:green\">//Nl</span>\r\n                                             UnicodeCategory.DecimalDigitNumber, <span style=\"color:green\">//Nd</span>\r\n                                             UnicodeCategory.ConnectorPunctuation, <span style=\"color:green\">//Pc</span>\r\n                                             UnicodeCategory.SpacingCombiningMark, <span style=\"color:green\">//Mc</span>\r\n                                             UnicodeCategory.NonSpacingMark, <span style=\"color:green\">//Mn</span>\r\n                                             UnicodeCategory.Format <span style=\"color:green\">//Cf</span>\r\n                                         });\r\n        <span style=\"color:green\">//StartCharCategories are the same</span>\r\n        term.StartCharCategories.AddRange(term.CharCategories);\r\n        <span style=\"color:blue\">return</span> term;\r\n    }\r\n</pre>\r\n</div>\r\n<span></span><span><br></span></code></pre>\r\n<p>but this doesn't work if the values include spaces. Can this be done (using Irony) without modifying the syntax (like adding quotes around values)?  Many thanks!</p>",
    "PostedDate": "2010-08-02T13:24:29.563-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "475801",
    "ThreadId": "222231",
    "Html": "<p>I can think of 3 easy solutions:</p>\r\n<ul>\r\n<li>You escape the spaces with something like &quot;\\s&quot;. I believe this requires some extra code.</li>\r\n</ul>\r\n<ul>\r\n<li>You use delimiters for the string:</li>\r\n</ul>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>      <span style=\"color:blue\">public</span> TestGrammar()\r\n      {\r\n         <span style=\"color:blue\">var</span> name = CreateTerm(<span style=\"color:#a31515\">&quot;name&quot;</span>);\r\n         <span style=\"color:blue\">var</span> value = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;value&quot;</span>, <span style=\"color:#a31515\">&quot;\\&quot;&quot;</span>, StringOptions.AllowsDoubledQuote | StringOptions.NoEscapes);\r\n         <span style=\"color:blue\">var</span> queries = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;queries&quot;</span>);\r\n         <span style=\"color:blue\">var</span> query = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;query&quot;</span>);\r\n\r\n         queries.Rule = MakePlusRule(queries, <span style=\"color:blue\">null</span>, query);\r\n         query.Rule = Empty | name + <span style=\"color:#a31515\">&quot;:&quot;</span> + value;\r\n\r\n         Root = queries;\r\n      }\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<ul>\r\n<li>You place each query on a different line:</li>\r\n</ul>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>      <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> TestGrammar()\r\n      {\r\n         <span style=\"color:blue\">var</span> name = CreateTerm(<span style=\"color:#a31515\">&quot;name&quot;</span>);\r\n         <span style=\"color:blue\">var</span> value = <span style=\"color:blue\">new</span> FreeTextLiteral(<span style=\"color:#a31515\">&quot;value&quot;</span>, FreeTextOptions.AllowEof, <span style=\"color:#a31515\">&quot;\\r&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>);\r\n         <span style=\"color:blue\">var</span> queries = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;queries&quot;</span>);\r\n         <span style=\"color:blue\">var</span> query = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;query&quot;</span>);\r\n\r\n         queries.Rule = MakePlusRule(queries, <span style=\"color:blue\">null</span>, query);\r\n         query.Rule = Empty | name + <span style=\"color:#a31515\">&quot;:&quot;</span> + value;\r\n\r\n         Root = queries;\r\n      }\r\n\r\n</pre>\r\n<pre>The code here is not perfect and has not been thoroughly tested, but it might give you a good starting point.</pre>\r\n<pre><br></pre>\r\n<pre>Good luck!</pre>\r\n</div>",
    "PostedDate": "2010-08-03T00:38:45.817-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]