[
  {
    "Id": "981598",
    "ThreadId": "427983",
    "Html": "\r\n<p>Hi,</p>\r\n<p>The promise of Irony if amazing. But it's HARD.&nbsp;Help.</p>\r\n<p>I got the Expression sample running. But didn't understand all of it as it's pretty far along from a newbie/entry level.</p>\r\n<p>Trying to go back to basics of a language of simple commands.</p>\r\n<p>Assuming a Grammar (probably wrong ...but its my first time) to define one or more simple Commands:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyGrammar : Irony.Parsing.Grammar\r\n    {\r\n        <span style=\"color:blue\">public</span> MyGrammar():<span style=\"color:blue\">base</span>(<span style=\"color:blue\">false</span>)\r\n        {\r\n\r\n            <span style=\"color:blue\">var</span> program = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;program&quot;</span>);\r\n\r\n            <span style=\"color:green\">//Set the Grammar root:</span>\r\n            <span style=\"color:blue\">this</span>.Root = program;\r\n\r\n            <span style=\"color:green\">//How do I define Guids?</span>\r\n            <span style=\"color:blue\">var</span> guid = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;guid&quot;</span>);\r\n            <span style=\"color:blue\">var</span> number = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;number&quot;</span>);\r\n            <span style=\"color:blue\">var</span> v = <span style=\"color:blue\">new</span> IdentifierTerminal(<span style=\"color:#a31515\">&quot;v&quot;</span>);\r\n            <span style=\"color:blue\">var</span> commandList = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;commandList&quot;</span>);\r\n\r\n            <span style=\"color:blue\">var</span> ringBellCommand = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ringBellCommand&quot;</span>, <span style=\"color:blue\">typeof</span>(RingBellNode));\r\n\r\n            program.Rule = commandList;\r\n            commandList.Rule = MakePlusRule(commandList, <span style=\"color:blue\">null</span>, ringBellCommand);\r\n\r\n            ringBellCommand.Rule = ToTerm(<span style=\"color:#a31515\">&quot;ring&quot;</span>) &#43; <span style=\"color:#a31515\">&quot;bell&quot;</span> &#43; (guid | number | v);\r\n            \r\n            <span style=\"color:green\">//Q: How do I define the second Command syntax?</span>\r\n            <span style=\"color:green\">//var honkHornCommand = new NonTerminal(&quot;honkHornCommand&quot;);</span>\r\n            <span style=\"color:green\">//honkHornCommand.Rule = ToTerm(&quot;honk&quot;) &#43; &quot;horn&quot; &#43; (guid | number | v);</span>\r\n            <span style=\"color:green\">//commandList.Rule = MakePlusRule(commandList, null, honkHornCommand);</span>\r\n\r\n            <span style=\"color:blue\">this</span>.LanguageFlags =  LanguageFlags.CreateAst;\r\n        }\r\n    }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The command is backed by an ASTNode (that currently does nothing):</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> RingBellNode : AstNode \r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Init(Irony.Ast.AstContext context, Irony.Parsing.ParseTreeNode treeNode)\r\n        {\r\n            <span style=\"color:blue\">base</span>.Init(context, treeNode);\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">object</span> DoEvaluate(Irony.Interpreter.ScriptThread thread)\r\n        {\r\n            <span style=\"color:green\">//No idea what to do here yet.</span>\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">base</span>.DoEvaluate(thread);\r\n        }\r\n    }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>I then run it with:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Main(<span style=\"color:blue\">string</span>[] args)\r\n        {\r\n\r\n            MyGrammar myGrammar = <span style=\"color:blue\">new</span> MyGrammar();\r\n\r\n            Parser p = <span style=\"color:blue\">new</span> Parser(myGrammar);\r\n\r\n            <span style=\"color:green\">//Q: what's wrong with grammer that I can't define more than one command?</span>\r\n            ParseTree t = p.Parse(<span style=\"color:#a31515\">&quot;ring bell 3&quot;</span>);\r\n\r\n            <span style=\"color:green\">//Q: Now what? How do I execute the command defined in RingBellNode.Evaluate?</span>\r\n            <span style=\"color:green\">//Or is that not how it's done?</span>\r\n        }\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>It parses. I've got child nodes in root. (although it won't let me parse more than one command at a time...but that can wait).</p>\r\n<p>The question is...what's the point of a AST on its own? Isn't the AST just an artefact needed for it to in the end invoke the ASTNode?&nbsp;</p>\r\n<p>If so...HOW!?</p>\r\n<p>Thank you for your help.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-12-29T04:51:41.67-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]