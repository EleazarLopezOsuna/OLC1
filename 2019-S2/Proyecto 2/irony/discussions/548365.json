[
  {
    "Id": "1255399",
    "ThreadId": "548365",
    "Html": "I'm trying to create a rather simple DSL that's indentation-based.\r<br />\nI would like to be able to parse the following code:<br />\n<pre><code>@default &quot;test&quot;\n@test default ()\n\n// this is also a comment\n\ntest:\n    Log.debug 5\n    Log.info &quot;test&quot; // end of line comment\n\ntest2:\n    @depends [test]\n    Log.info &quot;this is friggin test2&quot;</code></pre>\n\nHowever, I'm having some problems. When I run the code above against my parser I get a syntax error saying it expected <code>(, [, identifier, string, number</code>, basically a <code>Value</code> terminal, at the begining of the line with <code>test2:</code>.<br />\nAny help with getting this to work would be much appreciated.\r<br />\n<br />\nThe grammar-file I have looks like this:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> System;\n<span style=\"color:Blue;\">using</span> System.Collections.Generic;\n<span style=\"color:Blue;\">using</span> System.Globalization;\n<span style=\"color:Blue;\">using</span> System.Linq;\n<span style=\"color:Blue;\">using</span> System.Text;\n<span style=\"color:Blue;\">using</span> System.Threading.Tasks;\n<span style=\"color:Blue;\">using</span> Irony.Parsing;\n\n<span style=\"color:Blue;\">namespace</span> Kake.Parser\n{\n    [Language(<span style=\"color:#A31515;\">&quot;Kakefile&quot;</span>, <span style=\"color:#A31515;\">&quot;0.1&quot;</span>, <span style=\"color:#A31515;\">&quot;Kake DSL&quot;</span>)]\n    <span style=\"color:Blue;\">class</span> KakeGrammar : Grammar\n    {\n        <span style=\"color:Blue;\">public</span> KakeGrammar()\n            : <span style=\"color:Blue;\">base</span>(caseSensitive: <span style=\"color:Blue;\">true</span>)\n        {\n            <span style=\"color:Green;\">// 1. Terminals</span>\n            <span style=\"color:Blue;\">var</span> number = TerminalFactory.CreatePythonNumber(<span style=\"color:#A31515;\">&quot;number&quot;</span>);\n            <span style=\"color:Blue;\">var</span> identifier = CreateKakeIdentifier(<span style=\"color:#A31515;\">&quot;identifier&quot;</span>);\n            <span style=\"color:Blue;\">var</span> comment = <span style=\"color:Blue;\">new</span> CommentTerminal(<span style=\"color:#A31515;\">&quot;comment&quot;</span>, <span style=\"color:#A31515;\">&quot;//&quot;</span>, <span style=\"color:#A31515;\">&quot;\\n&quot;</span>, <span style=\"color:#A31515;\">&quot;\\r&quot;</span>);\n\n            <span style=\"color:Green;\">//comment must to be added to NonGrammarTerminals list; it is not used directly in grammar rules,</span>\n            <span style=\"color:Green;\">// so we add it to this list to let Scanner know that it is also a valid terminal. </span>\n            NonGrammarTerminals.Add(comment);\n            <span style=\"color:Blue;\">var</span> comma = ToTerm(<span style=\"color:#A31515;\">&quot;,&quot;</span>);\n            <span style=\"color:Blue;\">var</span> colon = ToTerm(<span style=\"color:#A31515;\">&quot;:&quot;</span>);\n            <span style=\"color:Blue;\">var</span> semi = ToTerm(<span style=\"color:#A31515;\">&quot;;&quot;</span>);\n            <span style=\"color:Blue;\">var</span> dot = ToTerm(<span style=\"color:#A31515;\">&quot;.&quot;</span>);\n            <span style=\"color:Blue;\">var</span> ws = ToTerm(<span style=\"color:#A31515;\">&quot; &quot;</span>);\n            <span style=\"color:Blue;\">var</span> str = TerminalFactory.CreateCSharpString(<span style=\"color:#A31515;\">&quot;string&quot;</span>);\n            <span style=\"color:Blue;\">var</span> num = TerminalFactory.CreateCSharpNumber(<span style=\"color:#A31515;\">&quot;number&quot;</span>);\n\n            <span style=\"color:Green;\">// 2. Non-terminals</span>\n            <span style=\"color:Blue;\">var</span> Expr = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Expr&quot;</span>);\n            <span style=\"color:Blue;\">var</span> Exprs = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Exprs&quot;</span>);\n            <span style=\"color:Blue;\">var</span> ParExpr = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;ParExpr&quot;</span>);\n\n            <span style=\"color:Blue;\">var</span> AssignmentExpr = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;AssignmentExpr&quot;</span>);\n            <span style=\"color:Blue;\">var</span> Targets = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Targets&quot;</span>);\n            <span style=\"color:Blue;\">var</span> TargetList = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;TargetList&quot;</span>);\n            <span style=\"color:Blue;\">var</span> TargetTuple = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;TargetTuple&quot;</span>);\n\n            <span style=\"color:Blue;\">var</span> Call = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Call&quot;</span>);\n            <span style=\"color:Blue;\">var</span> CallTarget = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;CallTarget&quot;</span>);\n            <span style=\"color:Blue;\">var</span> CallArg = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;CallArg&quot;</span>);\n            <span style=\"color:Blue;\">var</span> CallArgs = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;CallArgs&quot;</span>);\n\n            <span style=\"color:Blue;\">var</span> Value = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Value&quot;</span>);\n            <span style=\"color:Blue;\">var</span> Array = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Array&quot;</span>);\n            <span style=\"color:Blue;\">var</span> ArrayElements = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;ArrayElements&quot;</span>);\n\n            <span style=\"color:Blue;\">var</span> Meta = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Meta&quot;</span>);\n            <span style=\"color:Blue;\">var</span> MetaList = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;MetaList&quot;</span>);\n\n            <span style=\"color:Blue;\">var</span> Target = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Target&quot;</span>);\n            <span style=\"color:Blue;\">var</span> TargetArgs = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;TargetArgs&quot;</span>);\n            <span style=\"color:Blue;\">var</span> TargetBody = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;TargetBody&quot;</span>);\n            <span style=\"color:Blue;\">var</span> DocTargets = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;DocTargets&quot;</span>);\n\n            <span style=\"color:Blue;\">var</span> Document = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Document&quot;</span>);\n\n            <span style=\"color:Green;\">// 3. BNF rules</span>\n            Expr.Rule = ParExpr | identifier | Value | AssignmentExpr | Call;\n            ParExpr.Rule = <span style=\"color:#A31515;\">&quot;(&quot;</span> + (Expr | Empty) + <span style=\"color:#A31515;\">&quot;)&quot;</span>;\n            Exprs.Rule = MakePlusRule(Exprs, Eos, Expr);\n\n            AssignmentExpr.Rule = Targets + <span style=\"color:#A31515;\">&quot;=&quot;</span> + Expr;\n\n            TargetList.Rule = MakePlusRule(TargetList, comma, Targets);\n            TargetTuple.Rule = <span style=\"color:#A31515;\">&quot;(&quot;</span> + TargetList + <span style=\"color:#A31515;\">&quot;)&quot;</span>;\n            Targets.Rule = identifier | TargetTuple;\n\n            Call.Rule = CallTarget + CallArgs;\n            CallTarget.Rule = MakePlusRule(CallTarget, dot, identifier);\n            CallArg.Rule = ParExpr | identifier | Value;\n            CallArgs.Rule = MakePlusRule(CallArgs, CallArg);\n\n            Value.Rule = Array | str | num;\n            Array.Rule = ToTerm(<span style=\"color:#A31515;\">&quot;[&quot;</span>) + ArrayElements + <span style=\"color:#A31515;\">&quot;]&quot;</span>;\n            ArrayElements.Rule = MakeStarRule(ArrayElements, semi, Value);\n\n            Meta.Rule = ToTerm(<span style=\"color:#A31515;\">&quot;@&quot;</span>) + identifier + CallArgs + Eos;\n            MetaList.Rule = MakeStarRule(MetaList, Meta);\n\n            Target.Rule = identifier + TargetArgs + colon + Eos + Indent + TargetBody + Dedent + Eos;\n            TargetArgs.Rule = MakeStarRule(TargetArgs, identifier);\n            TargetBody.Rule = MetaList + Exprs;\n            DocTargets.Rule = MakeStarRule(DocTargets, Target);\n\n            Document.Rule = MetaList + DocTargets + Eof;\n\n            Root = Document;\n\n            <span style=\"color:Green;\">// 4. Misc</span>\n            MarkPunctuation(<span style=\"color:#A31515;\">&quot;(&quot;</span>, <span style=\"color:#A31515;\">&quot;)&quot;</span>, <span style=\"color:#A31515;\">&quot;[&quot;</span>, <span style=\"color:#A31515;\">&quot;]&quot;</span>, <span style=\"color:#A31515;\">&quot;:&quot;</span>);\n            RegisterBracePair(<span style=\"color:#A31515;\">&quot;(&quot;</span>, <span style=\"color:#A31515;\">&quot;)&quot;</span>);\n            RegisterBracePair(<span style=\"color:#A31515;\">&quot;[&quot;</span>, <span style=\"color:#A31515;\">&quot;]&quot;</span>);\n        }\n\n        <span style=\"color:Blue;\">static</span> IdentifierTerminal CreateKakeIdentifier(<span style=\"color:Blue;\">string</span> name)\n        {\n            <span style=\"color:Blue;\">var</span> id = <span style=\"color:Blue;\">new</span> IdentifierTerminal(name);\n            id.CharCategories.Add(UnicodeCategory.DashPunctuation);\n            <span style=\"color:Blue;\">return</span> id;\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> CreateTokenFilters(LanguageData language, TokenFilterList filters)\n        {\n            <span style=\"color:Blue;\">var</span> outlineFilter = <span style=\"color:Blue;\">new</span> CodeOutlineFilter(language.GrammarData, OutlineOptions.ProduceIndents | OutlineOptions.CheckBraces, <span style=\"color:Blue;\">null</span>);\n            filters.Add(outlineFilter);\n        }\n    }\n}\r\n</pre></div>",
    "PostedDate": "2014-06-11T16:08:10.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1255439",
    "ThreadId": "548365",
    "Html": "I think the problem is empty line - your grammar does not allow this, at least the Targets is a list of Target, which may not be empty. Modify grammar (change Target?) to allow empty lines<br />\n",
    "PostedDate": "2014-06-11T20:33:03.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1255506",
    "ThreadId": "548365",
    "Html": "Removing the empty line does not help. Also, there is nowhere in my grammar that allows for empty lines, yet the empty lines everywhere else works. I expect the tokenization removes these. Is there some way I can get a token-stream out of my <code>Grammar</code>, that way I could inspect the tokens and see if it creates <code>Indent</code>, <code>Dedent</code> and <code>Eos</code> correctly. Cause it tells me it's expecting a <code>identifier</code> at <code>(10,1)</code> which is an identifier, so I'm guessing there has to be a virtual token there.<br />\n",
    "PostedDate": "2014-06-12T02:24:55.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1255508",
    "ThreadId": "548365",
    "Html": "Ah, I figured it out :)\r<br />\nChanging <code>Exprs.Rule</code> to <code>MakeListRule(Exprs, Eos, Expr, TermListOptions.PlusList | TermListOptions.AllowTrailingDelimiter);</code> resolved the problem (and made new ones, but those are easier to fix).<br />\n",
    "PostedDate": "2014-06-12T02:31:17.54-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]