[
  {
    "Id": "606278",
    "ThreadId": "256101",
    "Html": "<p>I am trying to create the a parser with the following BNF</p>\n<p>&lt;action&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= {&lt;statement&gt;} // How do I write this in irony ??<br /> &lt;statement&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= &lt;FOR-statement&gt;|<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;IF-DO-statement&gt;|<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;IF-ELSE-statement&gt;|<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;effect&gt;|<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {}<br /> &lt;FOR-statement&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= FOR &lt;FOR-variable&gt;<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;action&gt;<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ENDFOR<br /> &lt;FOR-variable&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= EACH BOOK|COVER TYPES [&lt;cover-List&gt;]<br /> &lt;cover-list&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= {&lt;cover-type&gt;}{;&lt;cover-type&gt;}<br /> &lt;cover-type&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= COMP|TPFT|TPO<br /> &lt;IF-DO-statement&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= IF<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;condition&gt;<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; DO<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;action&gt;<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ENDIF<br /> &lt;IF-ELSE-statement&gt;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= IF<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &lt;condition&gt;<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; THEN<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;action&gt;<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ELSE<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;action&gt;<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ENDIF<br /> &lt;condition&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= &lt;cause&gt;|<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( NOT &lt;condition&gt; )|<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ( &lt;condition&gt; &lt;logic-operator&gt; &lt;condition&gt;} )|<br /> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ()<br /> &lt;logic-operator&gt;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= AND|OR<br /> &lt;cause&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= \"{\"&lt;text&gt;|[&lt;parameter&gt;]\"}\"<br /> &lt;effect&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= \"{\"&lt;text&gt;|[&lt;parameter&gt;]\"}\"<br /> &lt;text&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= [&lt;char&gt;]<br /> &lt;parameter&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= \"[\"&lt;table-parameter-value&gt;|&lt;other-parametervalue&gt;\"]\"<br /> &lt;table-parametervalue&gt;&nbsp; ::= [&lt;alphanumeric&gt;].&lt;numeric&gt;&lt;numeric&gt;&lt;numeric&gt;<br /> &lt;other-parametervalue&gt;&nbsp; ::= &lt;text&gt;<br /> &lt;char&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= &lt;alpha&gt;|&lt;numeric&gt;|&lt;TMSL-symbol&gt;<br /> &lt;alpha&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= \"A\"-\"Z\" \"a\"-\"z\" \" \"<br /> &lt;numeric&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= \"0\"-\"9\"<br /> &lt;TMSL-symbol&gt; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ::= \"-\" | \".\" | \";\" | \"%\" | \"&pound;\"</p>\n<p>&nbsp;</p>\n<p>I have written the Grammar class for it as below but i get Parser error \"expected For If...\" Parser state s14</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">using</span> System;\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\n<span style=\"color: blue;\">using</span> System.Text;\n<span style=\"color: blue;\">using</span> Irony.Parsing;\n<span style=\"color: blue;\">using</span> Irony.Ast;\n\n<span style=\"color: blue;\">namespace</span> Irony.Samples.My\n{\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> MyGrammar : Irony.Parsing.Grammar\n    {\n        <span style=\"color: blue;\">public</span> MyGrammar()\n        {\n            StringLiteral text = <span style=\"color: blue;\">new</span> StringLiteral(<span style=\"color: #a31515;\">\"text\"</span>, <span style=\"color: #a31515;\">\"\\\"\"</span>, StringOptions.AllowsAllEscapes);\n            NumberLiteral number = <span style=\"color: blue;\">new</span> NumberLiteral(<span style=\"color: #a31515;\">\"number\"</span>);\n\n            NonTerminal text1 = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"text\"</span>);\n            NonTerminal acion = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"action\"</span>);\n            NonTerminal statement = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"statement\"</span>);\n            NonTerminal FOR_statement = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FOR-statement\"</span>);\n            NonTerminal FOR_variable = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FOR-variable\"</span>);\n            NonTerminal cover_list = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"cover-list\"</span>);\n            NonTerminal cover_type = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"cover-type\"</span>);\n            NonTerminal IF_DO_statement = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"IF-DO-statement\"</span>);\n            NonTerminal IF_ELSE_statement = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"IF-ELSE-statement\"</span>);\n            NonTerminal condition = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"condition\"</span>);\n            NonTerminal logic_operator = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"logic-operator\"</span>);\n            NonTerminal cause = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"cause\"</span>);\n            NonTerminal effect = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"effect\"</span>);\n            <span style=\"color: green;\">//NonTerminal text = new NonTerminal(\"text\");</span>\n            NonTerminal parameter = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"parameter\"</span>);\n            NonTerminal table_parametervalue = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"table-parametervalue\"</span>);\n            NonTerminal other_parametervalue = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"other-parametervalue\"</span>);\n            <span style=\"color: green;\">//NonTerminal chars = new NonTerminal(\"char\");</span>\n            <span style=\"color: green;\">//NonTerminal alpha = new NonTerminal(\"alpha\");</span>\n            <span style=\"color: green;\">//NonTerminal numeric = new NonTerminal(\"numeric\");</span>\n\n            text1.Rule = text | number ;\n\n            <span style=\"color: green;\">// &lt;statement&gt; ::= &lt;FOR-statement&gt;|&lt;IF-DO-statement&gt;|&lt;IF-ELSE-statement&gt;|&lt;effect&gt;|{}</span>\n            statement.Rule = FOR_statement | IF_DO_statement | IF_ELSE_statement | effect | <span style=\"color: #a31515;\">\"(\"</span> + Empty + <span style=\"color: #a31515;\">\")\"</span>;\n\n            <span style=\"color: green;\">//&lt;FOR-statement&gt;::= FOR &lt;FOR-variable&gt;&lt;action&gt;ENDFOR</span>\n            FOR_statement.Rule = ToTerm(<span style=\"color: #a31515;\">\"FOR\"</span>) + FOR_variable + acion + ToTerm(<span style=\"color: #a31515;\">\"ENDFOR\"</span>);\n\n            <span style=\"color: green;\">//&lt;FOR-variable&gt; ::= EACH BOOK|COVER TYPES [&lt;cover-List&gt;]</span>\n            FOR_variable.Rule = ToTerm(<span style=\"color: #a31515;\">\"EACH BOOK\"</span>) | ToTerm(<span style=\"color: #a31515;\">\"COVER TYPES\"</span>) + <span style=\"color: #a31515;\">\"[\"</span> + cover_list + <span style=\"color: #a31515;\">\"]\"</span>;\n\n            <span style=\"color: green;\">//&lt;cover-type&gt; ::= COMP|TPFT|TPO</span>\n            <span style=\"color: green;\">//cover_type.Rule = \"COMP\" | \"TPFT\" | \"TPO\";</span>\n            cover_type.Rule = <span style=\"color: #a31515;\">\"COMP\"</span>;\n\n            <span style=\"color: green;\">//&lt;cover-list&gt; ::= {&lt;cover-type&gt;}{;&lt;cover-type&gt;}</span>\n            cover_list.Rule = cover_type;\n\n            <span style=\"color: green;\">// &lt;IF-DO-statement&gt; ::= IF\t&lt;condition&gt;\tDO &lt;action&gt; ENDIF</span>\n            IF_DO_statement.Rule = ToTerm(<span style=\"color: #a31515;\">\"IF\"</span>) + condition + ToTerm(<span style=\"color: #a31515;\">\"DO\"</span>) + acion + ToTerm(<span style=\"color: #a31515;\">\"ENDIF\"</span>);\n\n            <span style=\"color: green;\">//&lt;IF-ELSE-statement&gt;\t::= IF &lt;condition&gt; THEN &lt;action&gt; ELSE &lt;action&gt; ENDIF</span>\n            IF_ELSE_statement.Rule = ToTerm(<span style=\"color: #a31515;\">\"IF\"</span>) + condition + ToTerm(<span style=\"color: #a31515;\">\"THEN\"</span>) + acion + ToTerm(<span style=\"color: #a31515;\">\"ELSE\"</span>) + acion + ToTerm(<span style=\"color: #a31515;\">\"ENDIF\"</span>);\n\n            <span style=\"color: green;\">// &lt;condition&gt; ::= &lt;cause&gt;|( NOT &lt;condition&gt; )|( &lt;condition&gt;&lt;logic-operator&gt; &lt;condition&gt;} )|()</span>\n            condition.Rule = cause |\n                            <span style=\"color: #a31515;\">\"(\"</span> + ToTerm(<span style=\"color: #a31515;\">\"NOT\"</span>) + condition + <span style=\"color: #a31515;\">\")\"</span> |\n                            <span style=\"color: #a31515;\">\"(\"</span> + condition + logic_operator + condition + <span style=\"color: #a31515;\">\")\"</span> |\n                            <span style=\"color: #a31515;\">\"(\"</span> + Empty + <span style=\"color: #a31515;\">\")\"</span>;\n\n            <span style=\"color: green;\">//&lt;logic-operator&gt; ::= AND|OR</span>\n            logic_operator.Rule = ToTerm(<span style=\"color: #a31515;\">\"AND\"</span>) + ToTerm(<span style=\"color: #a31515;\">\"OR\"</span>);\n\n            <span style=\"color: green;\">//&lt;cause&gt; ::= \"{\"&lt;text&gt;|[&lt;parameter&gt;]\"}\"</span>\n            cause.Rule = <span style=\"color: #a31515;\">\"{\"</span> + text1 | <span style=\"color: #a31515;\">\"[\"</span> + parameter + <span style=\"color: #a31515;\">\"]\"</span> + <span style=\"color: #a31515;\">\"}\"</span>;\n\n            <span style=\"color: green;\">//&lt;effect&gt; ::= \"{\"&lt;text&gt;|[&lt;parameter&gt;]\"}\"</span>\n            effect.Rule = <span style=\"color: #a31515;\">\"{\"</span> + text1 | <span style=\"color: #a31515;\">\"[\"</span> + parameter + <span style=\"color: #a31515;\">\"]\"</span> + <span style=\"color: #a31515;\">\"}\"</span>;\n\n            <span style=\"color: green;\">//&lt;text&gt; ::= [&lt;char&gt;]</span>\n            <span style=\"color: green;\">//text.Rule = new StringLiteral(\"text\", \"\\\"\", StringOptions.AllowsAllEscapes);</span>\n\n            <span style=\"color: green;\">//&lt;parameter&gt; ::= \"[\"&lt;table-parameter-value&gt;|&lt;other-parametervalue&gt;\"]\"</span>\n            <span style=\"color: green;\">//parameter.Rule = \"[\" + table_parametervalue | other_parametervalue + \"]\";</span>\n            parameter.Rule = <span style=\"color: #a31515;\">\"[\"</span> + other_parametervalue + <span style=\"color: #a31515;\">\"]\"</span>;\n\n            <span style=\"color: green;\">//&lt;other-parametervalue&gt;  ::= &lt;text&gt;</span>\n            other_parametervalue.Rule = text1;\n\n            acion.Rule = MakePlusRule(acion, NewLine, statement);\n\n            <span style=\"color: blue;\">this</span>.Root = acion;\n        }\n    }\n}\n<br />I feel that I have not defined the options elements correctly. It would be great if anyone could point me to the right direction being a newbie I am stuck here.<br /><br />Thanks<br /><br />Muffadal. <br /></pre>\n</div>",
    "PostedDate": "2011-05-03T00:32:19.123-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "606631",
    "ThreadId": "256101",
    "Html": "<p>a few small things:&nbsp;</p>\r\n<p>\"action\" var is misspelled (acion)</p>\r\n<p>you have 2 elements named \"text\", the non-terminal should be \"text1\" probably; from its definition \"term\" is a better name</p>\r\n<p>logic_operator seems wrong - should be \"|\" between terms, not \"+\"</p>\r\n<p>Now, after you fix these, load your grammar into grammar explorer - see if it shows any errors. If yes, fix them - fix grammar errors before you do any parsing</p>\r\n<p>Then try to parse a sample. If it gives you error, double-click it and goto parser state for the error, look at productions, see what's wrong in your definitions</p>\r\n<p>Roman</p>",
    "PostedDate": "2011-05-03T12:25:21.753-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "606931",
    "ThreadId": "256101",
    "Html": "<p>Hello Roman,</p>\n<p>Thanks for the prompt reply. I have managed to parse the sample text without any errors. However I am not sure if I have done this correctly.</p>\n<ol>\n<li>every cause will have a string that will have parameters wrapped inside square brackets \"[]\". I am planning to use regex to extract this info from the text. </li>\n<li>In the \"FOR\" rule the \"[\" &amp; \"]\" is appearing in the parser tree as Keyword. How to remove these? </li>\n<li>Also constants values of the cover types (CP|TF|TP) are also appearing as keyword. </li>\n<li>I have changed the ctor of the StringLiteral class to accept different start and end strings. Is there a better way to do this </li>\n<li>If u see I have put NewLine in almost every rule, If I remove them I get syntax error. I want the parser to work the same way even if the New line feed is missing in the text. </li>\n</ol>\n<p>I have put the code for the grammar below.</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> MyGrammar : Grammar\n    {\n        <span style=\"color: blue;\">public</span> MyGrammar()\n        {\n            StringLiteral stringLiteral = <span style=\"color: blue;\">new</span> StringLiteral(<span style=\"color: #a31515;\">\"stringLiteral\"</span>, <span style=\"color: #a31515;\">\"{\"</span>, <span style=\"color: #a31515;\">\"}\"</span>);\n            NumberLiteral number = <span style=\"color: blue;\">new</span> NumberLiteral(<span style=\"color: #a31515;\">\"number\"</span>);\n\n            NonTerminal text = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"text\"</span>);\n            NonTerminal block = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"block\"</span>);\n            NonTerminal statement = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"statement\"</span>);\n            NonTerminal for_cover = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"for-cover-types\"</span>);\n            NonTerminal for_each_driver = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"for-each-driver\"</span>);\n            NonTerminal cover_list = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"cover-list\"</span>);\n            NonTerminal cover_type = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"cover-type\"</span>);\n            NonTerminal if_do_endif = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"if-do-endif\"</span>);\n            NonTerminal if_else_endif = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"if-else-endif\"</span>);\n            NonTerminal condition = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"condition\"</span>);\n            NonTerminal logic_operator = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"logic-operator\"</span>);\n            NonTerminal cause = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"cause\"</span>);\n            NonTerminal effect = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"effect\"</span>);\n            NonTerminal TMSL_symbol = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"TMSL-symbol\"</span>);\n\n            <span style=\"color: green;\">//NonTerminal FOR_statement = new NonTerminal(\"FOR-statement\");</span>\n            <span style=\"color: green;\">//NonTerminal parameter = new NonTerminal(\"parameter\");</span>\n            <span style=\"color: green;\">//NonTerminal table_parametervalue = new NonTerminal(\"table-parametervalue\");</span>\n            <span style=\"color: green;\">//NonTerminal other_parametervalue = new NonTerminal(\"other-parametervalue\");</span>\n            <span style=\"color: green;\">//NonTerminal FOR_variable = new NonTerminal(\"FOR-variable\");</span>\n\n            text.Rule = stringLiteral | number;<span style=\"color: green;\">&nbsp;</span>\n\n            <span style=\"color: green;\">// &lt;statement&gt; ::= &lt;FOR-statement&gt;|&lt;IF-DO-statement&gt;|&lt;IF-ELSE-statement&gt;|&lt;effect&gt;|{}</span>\n            statement.Rule = for_cover | for_each_driver | if_do_endif | if_else_endif | cause | effect | <span style=\"color: #a31515;\">\"(\"</span> + Empty + <span style=\"color: #a31515;\">\")\"</span>;\n\n            for_cover.Rule = ToTerm(<span style=\"color: #a31515;\">\"FOR BOOK COVER\"</span>) + <span style=\"color: #a31515;\">\"[\"</span> + cover_list + <span style=\"color: #a31515;\">\"]\"</span> + <span style=\"color: #a31515;\">\"DO\"</span> + NewLine +\n                                block + NewLine +\n                             ToTerm(<span style=\"color: #a31515;\">\"ENDFOR\"</span>);\n\n            for_each_driver.Rule =  ToTerm(<span style=\"color: #a31515;\">\"FOR EACH CUSTOMER DO\"</span>) + NewLine +\n                                        block + NewLine +\n                                    ToTerm(<span style=\"color: #a31515;\">\"ENDFOR\"</span>);\n\n            <span style=\"color: gray;\">///</span><span style=\"color: green;\">/&lt;FOR-statement&gt;::= FOR &lt;FOR-variable&gt;&lt;action&gt;ENDFOR</span>\n            <span style=\"color: green;\">//FOR_statement.Rule = ToTerm(\"FOR\") + FOR_variable + \"DO\" + NewLine + </span>\n            <span style=\"color: green;\">//                        action + NewLine +</span>\n            <span style=\"color: green;\">//                     ToTerm(\"ENDFOR\");</span>\n\n            <span style=\"color: gray;\">///</span><span style=\"color: green;\">/&lt;FOR-variable&gt; ::= EACH CUSTOMER|BOOK COVER [&lt;cover-List&gt;]</span>\n            <span style=\"color: green;\">//FOR_variable.Rule = ToTerm(\"EACH CUSTOMER\") | ToTerm(\"BOOK COVER\") + \"[\" + cover_list + \"]\";</span>\n\n            <span style=\"color: green;\">//&lt;cover-type&gt; ::= CP|TF|TP</span>\n            cover_type.Rule = ToTerm(<span style=\"color: #a31515;\">\"CP\"</span>) | <span style=\"color: #a31515;\">\"TF\"</span> | <span style=\"color: #a31515;\">\"TP\"</span>;\n\n            <span style=\"color: green;\">//&lt;cover-list&gt; ::= {&lt;cover-type&gt;}{;&lt;cover-type&gt;}</span>\n            cover_list.Rule = MakeStarRule(cover_list, ToTerm(<span style=\"color: #a31515;\">\";\"</span>), cover_type);\n\n            <span style=\"color: green;\">// &lt;IF-DO-statement&gt; ::= IF\t&lt;condition&gt;\tDO &lt;action&gt; ENDIF</span>\n            if_do_endif.Rule = <span style=\"color: #a31515;\">\"IF\"</span> + \n                                    condition + \n                                <span style=\"color: #a31515;\">\"DO\"</span> + NewLine +\n                                    block + NewLine +  <span style=\"color: green;\">//MakeStarRule(action, NewLine, action) + </span>\n                                <span style=\"color: #a31515;\">\"ENDIF\"</span>;\n\n            <span style=\"color: green;\">//&lt;IF-ELSE-statement&gt;\t::= IF &lt;condition&gt; THEN &lt;action&gt; ELSE &lt;action&gt; ENDIF</span>\n            if_else_endif.Rule = <span style=\"color: #a31515;\">\"IF\"</span> + \n                                      condition + \n                                  <span style=\"color: #a31515;\">\"THEN\"</span> + NewLine + \n                                      block + NewLine + \n                                  <span style=\"color: #a31515;\">\"ELSE\"</span> + NewLine + \n                                      block + NewLine + \n                                  <span style=\"color: #a31515;\">\"ENDIF\"</span>;\n\n            <span style=\"color: green;\">// &lt;condition&gt; ::= &lt;cause&gt;|( NOT &lt;condition&gt; )|( &lt;condition&gt;&lt;logic-operator&gt; &lt;condition&gt;} )|()</span>\n            condition.Rule = NewLine + cause + NewLine |\n                            NewLine + <span style=\"color: #a31515;\">\"(\"</span> + NewLine + ToTerm(<span style=\"color: #a31515;\">\"NOT\"</span>) + condition + <span style=\"color: #a31515;\">\")\"</span> + NewLine |\n                            NewLine + <span style=\"color: #a31515;\">\"(\"</span> + condition + logic_operator + condition + <span style=\"color: #a31515;\">\")\"</span> + NewLine |\n                            NewLine + <span style=\"color: #a31515;\">\"(\"</span> + Empty + <span style=\"color: #a31515;\">\")\"</span> + NewLine;\n\n            <span style=\"color: green;\">//&lt;logic-operator&gt; ::= AND|OR</span>\n            logic_operator.Rule = ToTerm(<span style=\"color: #a31515;\">\"AND\"</span>) | ToTerm(<span style=\"color: #a31515;\">\"OR\"</span>);\n\n            <span style=\"color: green;\">//&lt;cause&gt; ::= \"{\"&lt;text&gt;|[&lt;parameter&gt;]\"}\"</span>\n            cause.Rule = text;\n\n            <span style=\"color: green;\">//&lt;effect&gt; ::= \"{\"&lt;text&gt;|[&lt;parameter&gt;]\"}\"</span>\n            effect.Rule = text;\n\n            <span style=\"color: green;\">//&lt;text&gt; ::= [&lt;char&gt;]</span>\n\n            block.Rule = MakePlusRule(block, NewLine, statement) ;\n\n            RegisterBracePair(<span style=\"color: #a31515;\">\"(\"</span>, <span style=\"color: #a31515;\">\")\"</span>);\n            RegisterBracePair(<span style=\"color: #a31515;\">\"[\"</span>, <span style=\"color: #a31515;\">\"]\"</span>);\n            RegisterBracePair(<span style=\"color: #a31515;\">\"{\"</span>, <span style=\"color: #a31515;\">\"}\"</span>);\n\n            <span style=\"color: green;\">//MarkPunctuation(\"[\", \"]\");</span>\n            <span style=\"color: green;\">//MarkPunctuation(\"(\", \")\");</span>\n\t\t\t\n            <span style=\"color: blue;\">this</span>.Root = block;\n            <span style=\"color: green;\">//base.MarkTransient(statement);</span>\n        }\n}\n</pre>\n</div>\n<p>&nbsp;</p>",
    "PostedDate": "2011-05-04T01:36:17.453-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "607952",
    "ThreadId": "256101",
    "Html": "<p>hmmm... the new version looks quite different, and to be honest - a bit messed up. Let's get back to original grammar (with fixes I proposed) and then see what the problems are there.</p>\r\n<p>One note: you don't need all these \"(\" and \")\" around expressions if you register AND and OR as operators with proper precedence and associativity.</p>",
    "PostedDate": "2011-05-05T10:44:49.753-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]