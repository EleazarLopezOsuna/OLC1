[
  {
    "Id": "839927",
    "ThreadId": "356854",
    "Html": "\r\n<p>Hello every one,</p>\r\n<p>&nbsp;</p>\r\n<p>i want to make a SQL Parser with Irony, so i've taken</p>\r\n<p>Irony_2012_03_15\\Irony.Samples\\SQL\\SqlGrammar.cs</p>\r\n<p>but i don t success to parse anything. I ve try to make like <a title=\"him\" href=\"http://www.codeproject.com/Articles/26975/Writing-Your-First-Domain-Specific-Language-Part-1\">\r\nhim</a> :</p>\r\n<pre id=\"pre9\" lang=\"cs\" style=\"margin-top:0pt\">CameraControlGrammar grammar = <span>new</span> CameraControlGrammar();\nLanguageCompiler compiler = <span>new</span> LanguageCompiler(grammar);\nAstNode program = compiler.Parse(<span>&quot;</span><span>the source code as a string&quot;</span>);</pre>\r\n<p>&nbsp;</p>\r\n<p>But it don t works because my Irony.dll is more recent, and i don t want to take his Irony.Dll more older. So i've inspect the source code to find &quot;how in the software SQL is integrated&quot; and i ve tried this :</p>\r\n<p>Grammar myParser = new ParserSQL() as Grammar;<br>\r\nLanguageData _language = new LanguageData(myParser);<br>\r\nParser _parser = new Parser(_language);</p>\r\n<p>&nbsp;</p>\r\n<p>but don t know how to exploit my parsetree, is anyone have documentation ?</p>\r\n<p>My source :</p>\r\n<p>&nbsp;</p>\r\n<p>ParserSQL</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\n<span style=\"color:blue\">using</span> System.Collections.Generic;\n<span style=\"color:blue\">using</span> System.Linq;\n<span style=\"color:blue\">using</span> System.Text;\n<span style=\"color:blue\">using</span> Irony.Ast;\n<span style=\"color:blue\">using</span> Irony.Parsing;\n<span style=\"color:blue\">namespace</span> IronyTest\n{\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ParserSQL : Grammar\n    {\n        <span style=\"color:blue\">public</span> ParserSQL() : <span style=\"color:blue\">base</span>(<span style=\"color:blue\">false</span>)\n        { <span style=\"color:green\">//SQL is case insensitive</span>\n            <span style=\"color:green\">//Terminals</span>\n            <span style=\"color:blue\">var</span> comment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;comment&quot;</span>, <span style=\"color:#a31515\">&quot;/*&quot;</span>, <span style=\"color:#a31515\">&quot;*/&quot;</span>);\n            <span style=\"color:blue\">var</span> lineComment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;line_comment&quot;</span>, <span style=\"color:#a31515\">&quot;--&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>, <span style=\"color:#a31515\">&quot;\\r\\n&quot;</span>);\n            NonGrammarTerminals.Add(comment);\n            NonGrammarTerminals.Add(lineComment);\n            <span style=\"color:blue\">var</span> number = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;number&quot;</span>);\n            <span style=\"color:blue\">var</span> string_literal = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;string&quot;</span>, <span style=\"color:#a31515\">&quot;'&quot;</span>, StringOptions.AllowsDoubledQuote);\n            <span style=\"color:blue\">var</span> Id_simple = TerminalFactory.CreateSqlExtIdentifier(<span style=\"color:blue\">this</span>, <span style=\"color:#a31515\">&quot;id_simple&quot;</span>); <span style=\"color:green\">//covers normal identifiers (abc) and quoted id's ([abc d], &quot;abc d&quot;)</span>\n            <span style=\"color:blue\">var</span> comma = ToTerm(<span style=\"color:#a31515\">&quot;,&quot;</span>);\n            <span style=\"color:blue\">var</span> dot = ToTerm(<span style=\"color:#a31515\">&quot;.&quot;</span>);\n            <span style=\"color:blue\">var</span> CREATE = ToTerm(<span style=\"color:#a31515\">&quot;CREATE&quot;</span>);\n            <span style=\"color:blue\">var</span> NULL = ToTerm(<span style=\"color:#a31515\">&quot;NULL&quot;</span>);\n            <span style=\"color:blue\">var</span> NOT = ToTerm(<span style=\"color:#a31515\">&quot;NOT&quot;</span>);\n            <span style=\"color:blue\">var</span> UNIQUE = ToTerm(<span style=\"color:#a31515\">&quot;UNIQUE&quot;</span>);\n            <span style=\"color:blue\">var</span> WITH = ToTerm(<span style=\"color:#a31515\">&quot;WITH&quot;</span>);\n            <span style=\"color:blue\">var</span> TABLE = ToTerm(<span style=\"color:#a31515\">&quot;TABLE&quot;</span>);\n            <span style=\"color:blue\">var</span> ALTER = ToTerm(<span style=\"color:#a31515\">&quot;ALTER&quot;</span>);\n            <span style=\"color:blue\">var</span> ADD = ToTerm(<span style=\"color:#a31515\">&quot;ADD&quot;</span>);\n            <span style=\"color:blue\">var</span> COLUMN = ToTerm(<span style=\"color:#a31515\">&quot;COLUMN&quot;</span>);\n            <span style=\"color:blue\">var</span> DROP = ToTerm(<span style=\"color:#a31515\">&quot;DROP&quot;</span>);\n            <span style=\"color:blue\">var</span> CONSTRAINT = ToTerm(<span style=\"color:#a31515\">&quot;CONSTRAINT&quot;</span>);\n            <span style=\"color:blue\">var</span> INDEX = ToTerm(<span style=\"color:#a31515\">&quot;INDEX&quot;</span>);\n            <span style=\"color:blue\">var</span> ON = ToTerm(<span style=\"color:#a31515\">&quot;ON&quot;</span>);\n            <span style=\"color:blue\">var</span> KEY = ToTerm(<span style=\"color:#a31515\">&quot;KEY&quot;</span>);\n            <span style=\"color:blue\">var</span> PRIMARY = ToTerm(<span style=\"color:#a31515\">&quot;PRIMARY&quot;</span>);\n            <span style=\"color:blue\">var</span> INSERT = ToTerm(<span style=\"color:#a31515\">&quot;INSERT&quot;</span>);\n            <span style=\"color:blue\">var</span> INTO = ToTerm(<span style=\"color:#a31515\">&quot;INTO&quot;</span>);\n            <span style=\"color:blue\">var</span> UPDATE = ToTerm(<span style=\"color:#a31515\">&quot;UPDATE&quot;</span>);\n            <span style=\"color:blue\">var</span> SET = ToTerm(<span style=\"color:#a31515\">&quot;SET&quot;</span>);\n            <span style=\"color:blue\">var</span> VALUES = ToTerm(<span style=\"color:#a31515\">&quot;VALUES&quot;</span>);\n            <span style=\"color:blue\">var</span> DELETE = ToTerm(<span style=\"color:#a31515\">&quot;DELETE&quot;</span>);\n            <span style=\"color:blue\">var</span> SELECT = ToTerm(<span style=\"color:#a31515\">&quot;SELECT&quot;</span>);\n            <span style=\"color:blue\">var</span> FROM = ToTerm(<span style=\"color:#a31515\">&quot;FROM&quot;</span>);\n            <span style=\"color:blue\">var</span> AS = ToTerm(<span style=\"color:#a31515\">&quot;AS&quot;</span>);\n            <span style=\"color:blue\">var</span> COUNT = ToTerm(<span style=\"color:#a31515\">&quot;COUNT&quot;</span>);\n            <span style=\"color:blue\">var</span> JOIN = ToTerm(<span style=\"color:#a31515\">&quot;JOIN&quot;</span>);\n            <span style=\"color:blue\">var</span> BY = ToTerm(<span style=\"color:#a31515\">&quot;BY&quot;</span>);\n\n            <span style=\"color:green\">//Non-terminals</span>\n            <span style=\"color:blue\">var</span> Id = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;Id&quot;</span>);\n            <span style=\"color:blue\">var</span> stmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;stmt&quot;</span>);\n            <span style=\"color:blue\">var</span> createTableStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;createTableStmt&quot;</span>);\n            <span style=\"color:blue\">var</span> createIndexStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;createIndexStmt&quot;</span>);\n            <span style=\"color:blue\">var</span> alterStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;alterStmt&quot;</span>);\n            <span style=\"color:blue\">var</span> dropTableStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;dropTableStmt&quot;</span>);\n            <span style=\"color:blue\">var</span> dropIndexStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;dropIndexStmt&quot;</span>);\n            <span style=\"color:blue\">var</span> selectStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;selectStmt&quot;</span>);\n            <span style=\"color:blue\">var</span> insertStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;insertStmt&quot;</span>);\n            <span style=\"color:blue\">var</span> updateStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;updateStmt&quot;</span>);\n            <span style=\"color:blue\">var</span> deleteStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;deleteStmt&quot;</span>);\n            <span style=\"color:blue\">var</span> fieldDef = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;fieldDef&quot;</span>);\n            <span style=\"color:blue\">var</span> fieldDefList = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;fieldDefList&quot;</span>);\n            <span style=\"color:blue\">var</span> nullSpecOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;nullSpecOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> typeName = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;typeName&quot;</span>);\n            <span style=\"color:blue\">var</span> typeSpec = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;typeSpec&quot;</span>);\n            <span style=\"color:blue\">var</span> typeParamsOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;typeParams&quot;</span>);\n            <span style=\"color:blue\">var</span> constraintDef = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;constraintDef&quot;</span>);\n            <span style=\"color:blue\">var</span> constraintListOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;constraintListOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> constraintTypeOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;constraintTypeOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> idlist = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;idlist&quot;</span>);\n            <span style=\"color:blue\">var</span> idlistPar = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;idlistPar&quot;</span>);\n            <span style=\"color:blue\">var</span> uniqueOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;uniqueOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> orderList = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;orderList&quot;</span>);\n            <span style=\"color:blue\">var</span> orderMember = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;orderMember&quot;</span>);\n            <span style=\"color:blue\">var</span> orderDirOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;orderDirOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> withClauseOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;withClauseOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> alterCmd = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;alterCmd&quot;</span>);\n            <span style=\"color:blue\">var</span> insertData = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;insertData&quot;</span>);\n            <span style=\"color:blue\">var</span> intoOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;intoOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> assignList = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;assignList&quot;</span>);\n            <span style=\"color:blue\">var</span> whereClauseOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;whereClauseOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> assignment = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;assignment&quot;</span>);\n            <span style=\"color:blue\">var</span> expression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;expression&quot;</span>);\n            <span style=\"color:blue\">var</span> exprList = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;exprList&quot;</span>);\n            <span style=\"color:blue\">var</span> selRestrOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;selRestrOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> selList = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;selList&quot;</span>);\n            <span style=\"color:blue\">var</span> intoClauseOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;intoClauseOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> fromClauseOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;fromClauseOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> groupClauseOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;groupClauseOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> havingClauseOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;havingClauseOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> orderClauseOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;orderClauseOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> columnItemList = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;columnItemList&quot;</span>);\n            <span style=\"color:blue\">var</span> columnItem = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;columnItem&quot;</span>);\n            <span style=\"color:blue\">var</span> columnSource = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;columnSource&quot;</span>);\n            <span style=\"color:blue\">var</span> asOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;asOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> aliasOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;aliasOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> aggregate = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;aggregate&quot;</span>);\n            <span style=\"color:blue\">var</span> aggregateArg = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;aggregateArg&quot;</span>);\n            <span style=\"color:blue\">var</span> aggregateName = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;aggregateName&quot;</span>);\n            <span style=\"color:blue\">var</span> tuple = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;tuple&quot;</span>);\n            <span style=\"color:blue\">var</span> joinChainOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;joinChainOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> joinKindOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;joinKindOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> term = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;term&quot;</span>);\n            <span style=\"color:blue\">var</span> unExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;unExpr&quot;</span>);\n            <span style=\"color:blue\">var</span> unOp = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;unOp&quot;</span>);\n            <span style=\"color:blue\">var</span> binExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;binExpr&quot;</span>);\n            <span style=\"color:blue\">var</span> binOp = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;binOp&quot;</span>);\n            <span style=\"color:blue\">var</span> betweenExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;betweenExpr&quot;</span>);\n            <span style=\"color:blue\">var</span> inExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;inExpr&quot;</span>);\n            <span style=\"color:blue\">var</span> parSelectStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;parSelectStmt&quot;</span>);\n            <span style=\"color:blue\">var</span> notOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;notOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> funCall = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;funCall&quot;</span>);\n            <span style=\"color:blue\">var</span> stmtLine = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;stmtLine&quot;</span>);\n            <span style=\"color:blue\">var</span> semiOpt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;semiOpt&quot;</span>);\n            <span style=\"color:blue\">var</span> stmtList = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;stmtList&quot;</span>);\n            <span style=\"color:blue\">var</span> funArgs = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;funArgs&quot;</span>);\n            <span style=\"color:blue\">var</span> inStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;inStmt&quot;</span>);\n\n            <span style=\"color:green\">//BNF Rules</span>\n            <span style=\"color:blue\">this</span>.Root = stmtList;\n            stmtLine.Rule = stmt &#43; semiOpt;\n            semiOpt.Rule = Empty | <span style=\"color:#a31515\">&quot;;&quot;</span>;\n            stmtList.Rule = MakePlusRule(stmtList, stmtLine);\n\n            <span style=\"color:green\">//ID</span>\n            Id.Rule = MakePlusRule(Id, dot, Id_simple);\n\n            stmt.Rule = createTableStmt | createIndexStmt | alterStmt\n                      | dropTableStmt | dropIndexStmt\n                      | selectStmt | insertStmt | updateStmt | deleteStmt\n                      | <span style=\"color:#a31515\">&quot;GO&quot;</span>;\n            <span style=\"color:green\">//Create table</span>\n            createTableStmt.Rule = CREATE &#43; TABLE &#43; Id &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; fieldDefList &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> &#43; constraintListOpt;\n            fieldDefList.Rule = MakePlusRule(fieldDefList, comma, fieldDef);\n            fieldDef.Rule = Id &#43; typeName &#43; typeParamsOpt &#43; nullSpecOpt;\n            nullSpecOpt.Rule = NULL | NOT &#43; NULL | Empty;\n            typeName.Rule = ToTerm(<span style=\"color:#a31515\">&quot;BIT&quot;</span>) | <span style=\"color:#a31515\">&quot;DATE&quot;</span> | <span style=\"color:#a31515\">&quot;TIME&quot;</span> | <span style=\"color:#a31515\">&quot;TIMESTAMP&quot;</span> | <span style=\"color:#a31515\">&quot;DECIMAL&quot;</span> | <span style=\"color:#a31515\">&quot;REAL&quot;</span> | <span style=\"color:#a31515\">&quot;FLOAT&quot;</span> | <span style=\"color:#a31515\">&quot;SMALLINT&quot;</span> | <span style=\"color:#a31515\">&quot;INTEGER&quot;</span>\n                                         | <span style=\"color:#a31515\">&quot;INTERVAL&quot;</span> | <span style=\"color:#a31515\">&quot;CHARACTER&quot;</span>\n                <span style=\"color:green\">// MS SQL types:  </span>\n                                         | <span style=\"color:#a31515\">&quot;DATETIME&quot;</span> | <span style=\"color:#a31515\">&quot;INT&quot;</span> | <span style=\"color:#a31515\">&quot;DOUBLE&quot;</span> | <span style=\"color:#a31515\">&quot;CHAR&quot;</span> | <span style=\"color:#a31515\">&quot;NCHAR&quot;</span> | <span style=\"color:#a31515\">&quot;VARCHAR&quot;</span> | <span style=\"color:#a31515\">&quot;NVARCHAR&quot;</span>\n                                         | <span style=\"color:#a31515\">&quot;IMAGE&quot;</span> | <span style=\"color:#a31515\">&quot;TEXT&quot;</span> | <span style=\"color:#a31515\">&quot;NTEXT&quot;</span>;\n            typeParamsOpt.Rule = <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; number &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> | <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; number &#43; comma &#43; number &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> | Empty;\n            constraintDef.Rule = CONSTRAINT &#43; Id &#43; constraintTypeOpt;\n            constraintListOpt.Rule = MakeStarRule(constraintListOpt, constraintDef);\n            constraintTypeOpt.Rule = PRIMARY &#43; KEY &#43; idlistPar | UNIQUE &#43; idlistPar | NOT &#43; NULL &#43; idlistPar\n                                   | <span style=\"color:#a31515\">&quot;Foreign&quot;</span> &#43; KEY &#43; idlistPar &#43; <span style=\"color:#a31515\">&quot;References&quot;</span> &#43; Id &#43; idlistPar;\n            idlistPar.Rule = <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; idlist &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n            idlist.Rule = MakePlusRule(idlist, comma, Id);\n\n            <span style=\"color:green\">//Create Index</span>\n            createIndexStmt.Rule = CREATE &#43; uniqueOpt &#43; INDEX &#43; Id &#43; ON &#43; Id &#43; orderList &#43; withClauseOpt;\n            uniqueOpt.Rule = Empty | UNIQUE;\n            orderList.Rule = MakePlusRule(orderList, comma, orderMember);\n            orderMember.Rule = Id &#43; orderDirOpt;\n            orderDirOpt.Rule = Empty | <span style=\"color:#a31515\">&quot;ASC&quot;</span> | <span style=\"color:#a31515\">&quot;DESC&quot;</span>;\n            withClauseOpt.Rule = Empty | WITH &#43; PRIMARY | WITH &#43; <span style=\"color:#a31515\">&quot;Disallow&quot;</span> &#43; NULL | WITH &#43; <span style=\"color:#a31515\">&quot;Ignore&quot;</span> &#43; NULL;\n\n            <span style=\"color:green\">//Alter </span>\n            alterStmt.Rule = ALTER &#43; TABLE &#43; Id &#43; alterCmd;\n            alterCmd.Rule = ADD &#43; COLUMN &#43; fieldDefList &#43; constraintListOpt\n                          | ADD &#43; constraintDef\n                          | DROP &#43; COLUMN &#43; Id\n                          | DROP &#43; CONSTRAINT &#43; Id;\n\n            <span style=\"color:green\">//Drop stmts</span>\n            dropTableStmt.Rule = DROP &#43; TABLE &#43; Id;\n            dropIndexStmt.Rule = DROP &#43; INDEX &#43; Id &#43; ON &#43; Id;\n\n            <span style=\"color:green\">//Insert stmt</span>\n            insertStmt.Rule = INSERT &#43; intoOpt &#43; Id &#43; idlistPar &#43; insertData;\n            insertData.Rule = selectStmt | VALUES &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; exprList &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n            intoOpt.Rule = Empty | INTO; <span style=\"color:green\">//Into is optional in MSSQL</span>\n\n            <span style=\"color:green\">//Update stmt</span>\n            updateStmt.Rule = UPDATE &#43; Id &#43; SET &#43; assignList &#43; whereClauseOpt;\n            assignList.Rule = MakePlusRule(assignList, comma, assignment);\n            assignment.Rule = Id &#43; <span style=\"color:#a31515\">&quot;=&quot;</span> &#43; expression;\n\n            <span style=\"color:green\">//Delete stmt</span>\n            deleteStmt.Rule = DELETE &#43; FROM &#43; Id &#43; whereClauseOpt;\n\n            <span style=\"color:green\">//Select stmt</span>\n            selectStmt.Rule = SELECT &#43; selRestrOpt &#43; selList &#43; intoClauseOpt &#43; fromClauseOpt &#43; whereClauseOpt &#43;\n                              groupClauseOpt &#43; havingClauseOpt &#43; orderClauseOpt;\n            selRestrOpt.Rule = Empty | <span style=\"color:#a31515\">&quot;ALL&quot;</span> | <span style=\"color:#a31515\">&quot;DISTINCT&quot;</span>;\n            selList.Rule = columnItemList | <span style=\"color:#a31515\">&quot;*&quot;</span>;\n            columnItemList.Rule = MakePlusRule(columnItemList, comma, columnItem);\n            columnItem.Rule = columnSource &#43; aliasOpt;\n            aliasOpt.Rule = Empty | asOpt &#43; Id;\n            asOpt.Rule = Empty | AS;\n            columnSource.Rule = aggregate | Id;\n            aggregate.Rule = aggregateName &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; aggregateArg &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n            aggregateArg.Rule = expression | <span style=\"color:#a31515\">&quot;*&quot;</span>;\n            aggregateName.Rule = COUNT | <span style=\"color:#a31515\">&quot;Avg&quot;</span> | <span style=\"color:#a31515\">&quot;Min&quot;</span> | <span style=\"color:#a31515\">&quot;Max&quot;</span> | <span style=\"color:#a31515\">&quot;StDev&quot;</span> | <span style=\"color:#a31515\">&quot;StDevP&quot;</span> | <span style=\"color:#a31515\">&quot;Sum&quot;</span> | <span style=\"color:#a31515\">&quot;Var&quot;</span> | <span style=\"color:#a31515\">&quot;VarP&quot;</span>;\n            intoClauseOpt.Rule = Empty | INTO &#43; Id;\n            fromClauseOpt.Rule = Empty | FROM &#43; idlist &#43; joinChainOpt;\n            joinChainOpt.Rule = Empty | joinKindOpt &#43; JOIN &#43; idlist &#43; ON &#43; Id &#43; <span style=\"color:#a31515\">&quot;=&quot;</span> &#43; Id;\n            joinKindOpt.Rule = Empty | <span style=\"color:#a31515\">&quot;INNER&quot;</span> | <span style=\"color:#a31515\">&quot;LEFT&quot;</span> | <span style=\"color:#a31515\">&quot;RIGHT&quot;</span>;\n            whereClauseOpt.Rule = Empty | <span style=\"color:#a31515\">&quot;WHERE&quot;</span> &#43; expression;\n            groupClauseOpt.Rule = Empty | <span style=\"color:#a31515\">&quot;GROUP&quot;</span> &#43; BY &#43; idlist;\n            havingClauseOpt.Rule = Empty | <span style=\"color:#a31515\">&quot;HAVING&quot;</span> &#43; expression;\n            orderClauseOpt.Rule = Empty | <span style=\"color:#a31515\">&quot;ORDER&quot;</span> &#43; BY &#43; orderList;\n\n            <span style=\"color:green\">//Expression</span>\n            exprList.Rule = MakePlusRule(exprList, comma, expression);\n            expression.Rule = term | unExpr | binExpr;<span style=\"color:green\">// | betweenExpr; //-- BETWEEN doesn't work - yet; brings a few parsing conflicts </span>\n            term.Rule = Id | string_literal | number | funCall | tuple | parSelectStmt;<span style=\"color:green\">// | inStmt;</span>\n            tuple.Rule = <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; exprList &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n            parSelectStmt.Rule = <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; selectStmt &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n            unExpr.Rule = unOp &#43; term;\n            unOp.Rule = NOT | <span style=\"color:#a31515\">&quot;&#43;&quot;</span> | <span style=\"color:#a31515\">&quot;-&quot;</span> | <span style=\"color:#a31515\">&quot;~&quot;</span>;\n            binExpr.Rule = expression &#43; binOp &#43; expression;\n            binOp.Rule = ToTerm(<span style=\"color:#a31515\">&quot;&#43;&quot;</span>) | <span style=\"color:#a31515\">&quot;-&quot;</span> | <span style=\"color:#a31515\">&quot;*&quot;</span> | <span style=\"color:#a31515\">&quot;/&quot;</span> | <span style=\"color:#a31515\">&quot;%&quot;</span> <span style=\"color:green\">//arithmetic</span>\n                       | <span style=\"color:#a31515\">&quot;&amp;&quot;</span> | <span style=\"color:#a31515\">&quot;|&quot;</span> | <span style=\"color:#a31515\">&quot;^&quot;</span>                     <span style=\"color:green\">//bit</span>\n                       | <span style=\"color:#a31515\">&quot;=&quot;</span> | <span style=\"color:#a31515\">&quot;&gt;&quot;</span> | <span style=\"color:#a31515\">&quot;&lt;&quot;</span> | <span style=\"color:#a31515\">&quot;&gt;=&quot;</span> | <span style=\"color:#a31515\">&quot;&lt;=&quot;</span> | <span style=\"color:#a31515\">&quot;&lt;&gt;&quot;</span> | <span style=\"color:#a31515\">&quot;!=&quot;</span> | <span style=\"color:#a31515\">&quot;!&lt;&quot;</span> | <span style=\"color:#a31515\">&quot;!&gt;&quot;</span>\n                       | <span style=\"color:#a31515\">&quot;AND&quot;</span> | <span style=\"color:#a31515\">&quot;OR&quot;</span> | <span style=\"color:#a31515\">&quot;LIKE&quot;</span> | NOT &#43; <span style=\"color:#a31515\">&quot;LIKE&quot;</span> | <span style=\"color:#a31515\">&quot;IN&quot;</span> | NOT &#43; <span style=\"color:#a31515\">&quot;IN&quot;</span>;\n            betweenExpr.Rule = expression &#43; notOpt &#43; <span style=\"color:#a31515\">&quot;BETWEEN&quot;</span> &#43; expression &#43; <span style=\"color:#a31515\">&quot;AND&quot;</span> &#43; expression;\n            notOpt.Rule = Empty | NOT;\n            <span style=\"color:green\">//funCall covers some psedo-operators and special forms like ANY(...), SOME(...), ALL(...), EXISTS(...), IN(...)</span>\n            funCall.Rule = Id &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; funArgs &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n            funArgs.Rule = selectStmt | exprList;\n            inStmt.Rule = expression &#43; <span style=\"color:#a31515\">&quot;IN&quot;</span> &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; exprList &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n\n            <span style=\"color:green\">//Operators</span>\n            RegisterOperators(10, <span style=\"color:#a31515\">&quot;*&quot;</span>, <span style=\"color:#a31515\">&quot;/&quot;</span>, <span style=\"color:#a31515\">&quot;%&quot;</span>);\n            RegisterOperators(9, <span style=\"color:#a31515\">&quot;&#43;&quot;</span>, <span style=\"color:#a31515\">&quot;-&quot;</span>);\n            RegisterOperators(8, <span style=\"color:#a31515\">&quot;=&quot;</span>, <span style=\"color:#a31515\">&quot;&gt;&quot;</span>, <span style=\"color:#a31515\">&quot;&lt;&quot;</span>, <span style=\"color:#a31515\">&quot;&gt;=&quot;</span>, <span style=\"color:#a31515\">&quot;&lt;=&quot;</span>, <span style=\"color:#a31515\">&quot;&lt;&gt;&quot;</span>, <span style=\"color:#a31515\">&quot;!=&quot;</span>, <span style=\"color:#a31515\">&quot;!&lt;&quot;</span>, <span style=\"color:#a31515\">&quot;!&gt;&quot;</span>, <span style=\"color:#a31515\">&quot;LIKE&quot;</span>, <span style=\"color:#a31515\">&quot;IN&quot;</span>);\n            RegisterOperators(7, <span style=\"color:#a31515\">&quot;^&quot;</span>, <span style=\"color:#a31515\">&quot;&amp;&quot;</span>, <span style=\"color:#a31515\">&quot;|&quot;</span>);\n            RegisterOperators(6, NOT);\n            RegisterOperators(5, <span style=\"color:#a31515\">&quot;AND&quot;</span>);\n            RegisterOperators(4, <span style=\"color:#a31515\">&quot;OR&quot;</span>);\n\n            MarkPunctuation(<span style=\"color:#a31515\">&quot;,&quot;</span>, <span style=\"color:#a31515\">&quot;(&quot;</span>, <span style=\"color:#a31515\">&quot;)&quot;</span>);\n            MarkPunctuation(asOpt, semiOpt);\n            <span style=\"color:green\">//Note: we cannot declare binOp as transient because it includes operators &quot;NOT LIKE&quot;, &quot;NOT IN&quot; consisting of two tokens. </span>\n            <span style=\"color:green\">// Transient non-terminals cannot have more than one non-punctuation child nodes.</span>\n            <span style=\"color:green\">// Instead, we set flag InheritPrecedence on binOp , so that it inherits precedence value from it's children, and this precedence is used</span>\n            <span style=\"color:green\">// in conflict resolution when binOp node is sitting on the stack</span>\n            <span style=\"color:blue\">base</span>.MarkTransient(stmt, term, asOpt, aliasOpt, stmtLine, expression, unOp, tuple);\n            binOp.SetFlag(TermFlags.InheritPrecedence); \n        }\n\n     \n    }\n}\n<br><br>ClassTest :<br><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">&nbsp;</span><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">using</span> System;\n<span style=\"color:blue\">using</span> System.Collections.Generic;\n<span style=\"color:blue\">using</span> System.Linq;\n<span style=\"color:blue\">using</span> System.Text;\n<span style=\"color:blue\">using</span> Irony.Ast;\n<span style=\"color:blue\">using</span> Irony.Parsing;\n\n<span style=\"color:blue\">namespace</span> IronyTest\n{\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Test\n    {\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span>  Main(<span style=\"color:blue\">string</span>[] args)\n        {\n\n\n        Grammar monParser = <span style=\"color:blue\">new</span> ParserSQL() <span style=\"color:blue\">as</span> Grammar;\n        LanguageData _language = <span style=\"color:blue\">new</span> LanguageData(monParser);\n        Parser _parser = <span style=\"color:blue\">new</span> Parser(_language);\n         ParseTree P=   _parser.Parse(<span style=\"color:#a31515\">&quot;select * from bug where bug= ' resolu '&quot;</span>);\n       \n        }\n      \n    }\n}\n\n</pre>\n</div>\n<br><br><br>it would be very nice, <br>thank you<br>zunk <br></pre>\n</div>\n&nbsp;</pre>\r\n</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px; top:4594px; width:1px; height:1px; overflow:hidden\">\r\n.ToString()</div>\r\n",
    "PostedDate": "2012-05-23T07:39:29.75-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "839989",
    "ThreadId": "356854",
    "Html": "<p>always start building/debugging grammar with Grammar Explorer. It allows you to detect conflicts and visualize output tree. See the code in the main form of Grammar Explorer for guidance how all this done in code</p>\r\n<p>Roman</p>",
    "PostedDate": "2012-05-23T09:23:47.257-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "840240",
    "ThreadId": "356854",
    "Html": "<p>Ok, thank you</p>",
    "PostedDate": "2012-05-23T23:46:31.327-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]