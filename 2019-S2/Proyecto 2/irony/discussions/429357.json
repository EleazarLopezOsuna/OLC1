[
  {
    "Id": "985730",
    "ThreadId": "429357",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm trying to create a grammar for the following syntax:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<pre><span style=\"color:#008000\">@some simple text </span><span style=\"color:#0000ff\">$SomeExpression</span> <span style=\"color:#008000\">other text again until newline</span>\n\n<span style=\"color:#0000ff\">$SomeOtherExpression\n\n$YetSomeOtherExpression</span>\n\n<span style=\"color:#008000\">@and again some simple text </span><span style=\"color:#0000ff\">$WithAnotherExpression</span>\n\n<span style=\"color:#008000\">@etc</span></pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>The logic behind this is:</p>\r\n<p><span style=\"white-space:pre\">&nbsp;</span>*<span style=\"white-space:pre\"> </span>\r\nEach line contains a set with expressions - either a &quot;TextExpression&quot; or a &quot;DollarExpression&quot;</p>\r\n<p><span style=\"white-space:pre\">&nbsp;</span>*<span style=\"white-space:pre\"> </span>\r\nThe expressions within a line are treated like this:</p>\r\n<p><span style=\"white-space:pre\">&nbsp;</span>* TextExpression - continues until the &quot;$&quot; character, which is a separator</p>\r\n<p><span style=\"white-space:pre\">&nbsp;</span>* DollarExpression - is initiated with the &quot;$&quot; character, followed by an identifier text</p>\r\n<p><span style=\"white-space:pre\">&nbsp;</span>*<span style=\"white-space:pre\"> </span>\r\nThe &quot;DollarExpression&quot; can be on a single line</p>\r\n<p><span style=\"white-space:pre\">&nbsp;</span>*&nbsp;<span style=\"white-space:pre\">\r\n</span>A line can thus consist of multiple expressions if started with the &quot;@&quot; character, or with a single &quot;DollarExpression&quot;</p>\r\n<p>&nbsp;</p>\r\n<p>So, I thought that the following &quot;pseudogrammar&quot; would work for this:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<pre>Program = list(LineExpression)\n\nLineExpression = DollarLineExpression | AtLineExpression\n\nAtLineExpression = @ &#43; list(AtExpression)\n\nAtExpression = TextExpression | $ &#43; DollarExpression\n\nTextExpression = &quot;Text including whitespace&quot;\n\nDollarLineExpression = list(DollarExpression)\n\nDollarExpression = IdentiferExpression\n\nIdentifierExpression = Identifier</pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>I implemented this with Irony with the following grammar (you should be able to copy paste this to an empty irony project of yours):</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\n<span style=\"color:blue\">using</span> Irony.Interpreter;\n<span style=\"color:blue\">using</span> Irony.Parsing;\n\n<span style=\"color:blue\">namespace</span> SlickScript.Language\n{\n\n    [Language(<span style=\"color:#a31515\">&quot;my grammar&quot;</span>, <span style=\"color:#a31515\">&quot;0.1&quot;</span>, <span style=\"color:#a31515\">&quot;my grammar&quot;</span>)]\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyGrammar : InterpretedLanguageGrammar\n    {\n        <span style=\"color:blue\">public</span> MyGrammar()\n            : <span style=\"color:blue\">base</span>(<span style=\"color:blue\">true</span>)\n        {\n            GrammarComments = <span style=\"color:#a31515\">&quot;my grammar.&quot;</span>;\n\n            <span style=\"color:blue\">#region</span> terminals\n\n            <span style=\"color:green\">//Number</span>\n            <span style=\"color:blue\">var</span> NumberLiteral = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;Number&quot;</span>);\n            NumberLiteral.DefaultIntTypes = <span style=\"color:blue\">new</span> TypeCode[] { TypeCode.Int32 };\n            NumberLiteral.Options |= NumberOptions.IntOnly;\n\n            <span style=\"color:green\">//String</span>\n            <span style=\"color:blue\">var</span> StringLiteral = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;String&quot;</span>, <span style=\"color:#a31515\">&quot;\\&quot;&quot;</span>, StringOptions.AllowsAllEscapes);\n            \n            <span style=\"color:green\">//Keywords</span>\n            <span style=\"color:blue\">var</span> TrueKeyword = ToTerm(<span style=\"color:#a31515\">&quot;true&quot;</span>, <span style=\"color:#a31515\">&quot;true&quot;</span>);\n            <span style=\"color:blue\">var</span> FalseKeyword = ToTerm(<span style=\"color:#a31515\">&quot;false&quot;</span>, <span style=\"color:#a31515\">&quot;false&quot;</span>);\n\n            <span style=\"color:green\">//Line comment</span>\n            <span style=\"color:blue\">var</span> LineComment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;LineComment&quot;</span>, <span style=\"color:#a31515\">&quot;//&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>, <span style=\"color:#a31515\">&quot;\\r&quot;</span>);\n            NonGrammarTerminals.Add(LineComment);\n\n            <span style=\"color:green\">//Block comment</span>\n            <span style=\"color:blue\">var</span> BlockComment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;BlockComment&quot;</span>, <span style=\"color:#a31515\">&quot;/*&quot;</span>, <span style=\"color:#a31515\">&quot;*/&quot;</span>);\n            NonGrammarTerminals.Add(BlockComment);\n\n            <span style=\"color:blue\">#endregion</span>\n\n\n            <span style=\"color:green\">//Simple terminals definitions</span>\n            <span style=\"color:green\">//var Identifier = new RegexTerminal(&quot;Identifier&quot;, @&quot;[a-zA-Z_][a-zA-Z_0-9]*&quot;, typeof(Identifier), &quot;&quot;);</span>\n            <span style=\"color:green\">//Identifier.AstConfig.NodeType = typeof(Identifier);</span>\n            <span style=\"color:blue\">var</span> Identifier = <span style=\"color:blue\">new</span> RegexBasedTerminal(<span style=\"color:#a31515\">&quot;Identifier&quot;</span>, <span style=\"color:#a31515\">@&quot;[a-zA-Z_][a-zA-Z_0-9]*&quot;</span>);\n            <span style=\"color:blue\">var</span> SimpleValue = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;SimpleValue&quot;</span>);\n            <span style=\"color:blue\">var</span> StringValue = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;StringValue&quot;</span>);\n            <span style=\"color:blue\">var</span> NumberValue = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;NumberValue&quot;</span>);\n            <span style=\"color:blue\">var</span> BoolValue = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;BoolValue&quot;</span>);\n            <span style=\"color:blue\">var</span> Text = <span style=\"color:blue\">new</span> RegexBasedTerminal(<span style=\"color:#a31515\">&quot;Text&quot;</span>, <span style=\"color:#a31515\">@&quot;[^@$}\\n]&quot;</span>);\n\n            <span style=\"color:green\">//Non terminals definitions</span>\n            <span style=\"color:blue\">var</span> Program = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;Program&quot;</span>);\n            <span style=\"color:blue\">var</span> LineExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;LineExpression&quot;</span>);\n            <span style=\"color:blue\">var</span> LineExpressions = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;LineExpressions&quot;</span>);\n            <span style=\"color:blue\">var</span> DollarLineExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;DollarLineExpression&quot;</span>);\n            <span style=\"color:blue\">var</span> AtLineExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AtLineExpression&quot;</span>);\n            <span style=\"color:blue\">var</span> AtExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AtExpression&quot;</span>);\n            <span style=\"color:blue\">var</span> AtExpressions = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AtExpressions&quot;</span>);\n            <span style=\"color:blue\">var</span> TextExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;TextExpression&quot;</span>);\n            <span style=\"color:blue\">var</span> DollarExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;DollarExpression&quot;</span>);\n            <span style=\"color:blue\">var</span> DollarExpressions = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;DollarExpressions&quot;</span>);\n            <span style=\"color:blue\">var</span> IdentifierExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;IdentifierExpression&quot;</span>);\n\n            <span style=\"color:green\">//Rules</span>\n\n            <span style=\"color:green\">//Simple</span>\n            StringValue.Rule = StringLiteral;\n\n            NumberValue.Rule = NumberLiteral;\n\n            BoolValue.Rule = TrueKeyword | FalseKeyword;\n\n            SimpleValue.Rule = StringValue | NumberValue | BoolValue;\n\n            <span style=\"color:green\">//Advanced</span>\n            Program.Rule = LineExpressions;\n\n            LineExpressions.Rule = MakeStarRule(LineExpressions, LineExpression);\n\n            LineExpression.Rule = DollarLineExpression | AtLineExpression;\n\n            AtLineExpression.Rule = <span style=\"color:#a31515\">&quot;@&quot;</span> &#43; AtExpressions;\n\n            AtExpressions.Rule = MakeStarRule(AtExpressions, AtExpression);\n\n            AtExpression.Rule = TextExpression | DollarExpression;\n\n            TextExpression.Rule = Text;\n\n            DollarLineExpression.Rule = DollarExpressions;\n\n            DollarExpressions.Rule = MakeStarRule(DollarExpressions, DollarExpression);\n\n            DollarExpression.Rule = <span style=\"color:#a31515\">&quot;$&quot;</span> &#43; IdentifierExpression;\n\n            IdentifierExpression.Rule = Identifier;\n\n            Root = Program;\n            LanguageFlags = LanguageFlags.CreateAst;\n        }\n    }\n}\n\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>However the grammar doesn't even seem to compile in the GrammarExplorer - i'm getting the following errors:</p>\r\n<p>&nbsp;</p>\r\n<pre>Shift-reduce conflict. State S0, lookaheads [$ @]. Selected shift as preferred action.\nReduce-reduce conflict. State S0, lookaheads: EOF. Selected reduce on first production in conflict set.\nShift-reduce conflict. State S3, lookaheads [$ @]. Selected shift as preferred action.\nReduce-reduce conflict. State S3, lookaheads: EOF. Selected reduce on first production in conflict set.\nShift-reduce conflict. State S7, lookaheads [$]. Selected shift as preferred action.\nShift-reduce conflict. State S11, lookaheads [$]. Selected shift as preferred action.\nShift-reduce conflict. State S18, lookaheads [$]. Selected shift as preferred action.</pre>\r\n<p>&nbsp;</p>\r\n<p>I don't really know exactly why I'm getting this (I do understand it has something to do with the lookahead characters which cannot be deduced from my grammar?)</p>\r\n<p>&nbsp;</p>\r\n<p>Could someone help me out? - would be really appreciated! :)</p>\r\n<p>What do I need to correct in order to get this working? Do I need to restructure the grammar somehow? (factoring of some sort?)</p>\r\n<p>&nbsp;</p>\r\n<p>Thank you,</p>\r\n<p>Btw, fantastic toolkit :)</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2013-01-11T16:14:35.84-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985751",
    "ThreadId": "429357",
    "Html": "\r\n<p>Short update:</p>\r\n<p>&nbsp;</p>\r\n<p>Ok, the issue seems to be due to the recursive rules?</p>\r\n<p>&nbsp;</p>\r\n<p>Changing the following gets me down to only two errors (though the grammar should still work I think):</p>\r\n<p>&nbsp;</p>\r\n<pre>DollarLineExpression.Rule = DollarExpressions;</pre>\r\n<p>TO:</p>\r\n<pre>DollarLineExpression.Rule = DollarExpression;</pre>\r\n<p>&nbsp;</p>\r\n<p>Since it's already implicitly included in the top declaration:</p>\r\n<p>&nbsp;</p>\r\n<pre>LineExpressions.Rule = MakeStarRule(LineExpressions, LineExpression);</pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>It feels like I'm having the wrong &quot;approach&quot; - as if my logic is more kind of &quot;recursive&quot; and I somehow need to &quot;flatten&quot; it for the LALR parsing?</p>\r\n<p>&nbsp;</p>\r\n<p>The following errors remain:</p>\r\n<pre>Shift-reduce conflict. State S9, lookaheads [$]. Selected shift as preferred action.\nShift-reduce conflict. State S15, lookaheads [$]. Selected shift as preferred action.</pre>\r\n<p>&nbsp;</p>\r\n<p>Thank you,</p>\r\n",
    "PostedDate": "2013-01-11T17:01:28.02-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985897",
    "ThreadId": "429357",
    "Html": "\r\n<p>Yay, I solved it.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>It seems like the problem was that some rules couldn't be deduced due to same starting terminals... the following works:</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> Irony.Interpreter;\r\n<span style=\"color:blue\">using</span> Irony.Parsing;\r\n\r\n\r\n<span style=\"color:blue\">namespace</span> SlickScript.Language\r\n{\r\n\r\n    [Language(<span style=\"color:#a31515\">&quot;my grammar&quot;</span>, <span style=\"color:#a31515\">&quot;0.1&quot;</span>, <span style=\"color:#a31515\">&quot;my grammar&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyGrammar : InterpretedLanguageGrammar\r\n    {\r\n        <span style=\"color:blue\">public</span> MyGrammar()\r\n            : <span style=\"color:blue\">base</span>(<span style=\"color:blue\">true</span>)\r\n        {\r\n            GrammarComments = <span style=\"color:#a31515\">&quot;my grammar.&quot;</span>;\r\n\r\n            <span style=\"color:blue\">#region</span> terminals\r\n\r\n            <span style=\"color:green\">//Number</span>\r\n            <span style=\"color:blue\">var</span> NumberLiteral = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;Number&quot;</span>);\r\n            NumberLiteral.DefaultIntTypes = <span style=\"color:blue\">new</span> TypeCode[] { TypeCode.Int32 };\r\n            NumberLiteral.Options |= NumberOptions.IntOnly;\r\n\r\n            <span style=\"color:green\">//String</span>\r\n            <span style=\"color:blue\">var</span> StringLiteral = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;String&quot;</span>, <span style=\"color:#a31515\">&quot;\\&quot;&quot;</span>, StringOptions.AllowsAllEscapes);\r\n            \r\n            <span style=\"color:green\">//Keywords</span>\r\n            <span style=\"color:blue\">var</span> TrueKeyword = ToTerm(<span style=\"color:#a31515\">&quot;true&quot;</span>, <span style=\"color:#a31515\">&quot;true&quot;</span>);\r\n            <span style=\"color:blue\">var</span> FalseKeyword = ToTerm(<span style=\"color:#a31515\">&quot;false&quot;</span>, <span style=\"color:#a31515\">&quot;false&quot;</span>);\r\n\r\n            <span style=\"color:green\">//Line comment</span>\r\n            <span style=\"color:blue\">var</span> LineComment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;LineComment&quot;</span>, <span style=\"color:#a31515\">&quot;//&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>, <span style=\"color:#a31515\">&quot;\\r&quot;</span>);\r\n            NonGrammarTerminals.Add(LineComment);\r\n\r\n            <span style=\"color:green\">//Block comment</span>\r\n            <span style=\"color:blue\">var</span> BlockComment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;BlockComment&quot;</span>, <span style=\"color:#a31515\">&quot;/*&quot;</span>, <span style=\"color:#a31515\">&quot;*/&quot;</span>);\r\n            NonGrammarTerminals.Add(BlockComment);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            UsesNewLine = <span style=\"color:blue\">true</span>;\r\n\r\n            <span style=\"color:green\">//Simple terminals definitions</span>\r\n            <span style=\"color:green\">//var Identifier = new RegexTerminal(&quot;Identifier&quot;, @&quot;[a-zA-Z_][a-zA-Z_0-9]*&quot;, typeof(Identifier), &quot;&quot;);</span>\r\n            <span style=\"color:green\">//Identifier.AstConfig.NodeType = typeof(Identifier);</span>\r\n            <span style=\"color:blue\">var</span> Identifier = <span style=\"color:blue\">new</span> RegexBasedTerminal(<span style=\"color:#a31515\">&quot;Identifier&quot;</span>, <span style=\"color:#a31515\">@&quot;[a-zA-Z_][a-zA-Z_0-9]*&quot;</span>);\r\n            <span style=\"color:blue\">var</span> SimpleValue = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;SimpleValue&quot;</span>);\r\n            <span style=\"color:blue\">var</span> StringValue = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;StringValue&quot;</span>);\r\n            <span style=\"color:blue\">var</span> NumberValue = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;NumberValue&quot;</span>);\r\n            <span style=\"color:blue\">var</span> BoolValue = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;BoolValue&quot;</span>);\r\n            <span style=\"color:blue\">var</span> Text = <span style=\"color:blue\">new</span> RegexBasedTerminal(<span style=\"color:#a31515\">&quot;Text&quot;</span>, <span style=\"color:#a31515\">@&quot;[^@$}\\r\\n\\v]*&quot;</span>);\r\n\r\n            <span style=\"color:green\">//Non terminals definitions</span>\r\n            <span style=\"color:blue\">var</span> Program = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;Program&quot;</span>);\r\n            <span style=\"color:blue\">var</span> LineExpressions = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;LineExpressions&quot;</span>);\r\n            <span style=\"color:blue\">var</span> LineExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;LineExpression&quot;</span>);\r\n            <span style=\"color:blue\">var</span> AtOrDollarLineExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AtOrDollarLineExpression&quot;</span>);\r\n            \r\n            <span style=\"color:blue\">var</span> DollarLineExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;DollarLineExpression&quot;</span>);\r\n            <span style=\"color:blue\">var</span> AtLineExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AtLineExpression&quot;</span>);\r\n            <span style=\"color:blue\">var</span> AtExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AtExpression&quot;</span>);\r\n            <span style=\"color:blue\">var</span> AtTextExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AtTextExpression&quot;</span>);\r\n            <span style=\"color:blue\">var</span> AtTextOrDollarExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AtTextOrDollarExpression&quot;</span>);\r\n            <span style=\"color:blue\">var</span> AtExpressions = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AtExpressions&quot;</span>);\r\n            <span style=\"color:blue\">var</span> TextExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;TextExpression&quot;</span>);\r\n            <span style=\"color:blue\">var</span> DollarExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;DollarExpression&quot;</span>);\r\n            <span style=\"color:blue\">var</span> IdentifierExpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;IdentifierExpression&quot;</span>);\r\n\r\n            <span style=\"color:green\">//Rules</span>\r\n\r\n            <span style=\"color:green\">//Simple</span>\r\n            StringValue.Rule = StringLiteral;\r\n\r\n            NumberValue.Rule = NumberLiteral;\r\n\r\n            BoolValue.Rule = TrueKeyword | FalseKeyword;\r\n\r\n            SimpleValue.Rule = StringValue | NumberValue | BoolValue;\r\n\r\n            <span style=\"color:green\">//Advanced</span>\r\n            Program.Rule = LineExpressions;\r\n\r\n            LineExpressions.Rule = MakeStarRule(LineExpressions, LineExpression);\r\n\r\n            LineExpression.Rule = AtOrDollarLineExpression + NewLine;\r\n\r\n            AtOrDollarLineExpression.Rule = AtLineExpression | DollarLineExpression;\r\n\r\n            AtLineExpression.Rule = <span style=\"color:#a31515\">&quot;@&quot;</span> + AtExpressions;\r\n\r\n            AtExpressions.Rule = MakeStarRule(AtExpressions, AtExpression);\r\n\r\n            AtExpression.Rule = TextExpression | (TextExpression + DollarExpression) | (TextExpression + DollarExpression + AtTextExpression);\r\n\r\n            AtTextExpression.Rule = <span style=\"color:#a31515\">&quot;@&quot;</span> + TextExpression;\r\n\r\n            TextExpression.Rule = Text;\r\n\r\n            DollarLineExpression.Rule = DollarExpression;\r\n\r\n            DollarExpression.Rule = <span style=\"color:#a31515\">&quot;$&quot;</span> + IdentifierExpression;\r\n\r\n            IdentifierExpression.Rule = Identifier;\r\n\r\n            MarkTransient(AtOrDollarLineExpression);\r\n            \r\n            Root = Program;\r\n            LanguageFlags = LanguageFlags.Default;\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Thanks,</p>\r\n",
    "PostedDate": "2013-01-12T07:47:00.47-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986271",
    "ThreadId": "429357",
    "Html": "\r\n<p>Great! - happy you solved it. Just a few notes. In general, to save yourself from conflicts, you should:</p>\r\n<p>1. Avoid 'replicating' rules like 'A.Rule = B' &nbsp;- either A or B is not needed and should be removed from the grammar</p>\r\n<p>2. Carefully choose rules for optional/(can be empty) non-terminals -&nbsp;proliferation&nbsp;of these causes ambiguities in grammar, and conflicts as a result. Star-lists (0 or more) combined with optional elements define the language that allows extra empty parse\r\n nodes in between real constructs, and these empty nodes are in fact sources of conflicts in parser automaton.</p>\r\n<p>One more thing. Your language seems to be 'line-based', so line break is an active syntax element (like Basic or Python). There are some special facilities/options for these languages in Irony, have a look at GwBasic and MiniPython grammars, see if you can\r\n use them - and I think you should.</p>\r\n<p>Good luck!</p>\r\n<p>Roman&nbsp;</p>\r\n",
    "PostedDate": "2013-01-13T22:48:21.763-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "987315",
    "ThreadId": "429357",
    "Html": "\r\n<p>Thanks for the comments - I will have a look at the grammars you suggested and play around with them :)</p>\r\n",
    "PostedDate": "2013-01-15T14:34:03.683-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]