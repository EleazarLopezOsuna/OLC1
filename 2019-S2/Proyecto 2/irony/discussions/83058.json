[
  {
    "Id": "285447",
    "ThreadId": "83058",
    "Html": "<p>This is in reference to the work item #6291: <a href=\"http://irony.codeplex.com/WorkItem/View.aspx?WorkItemId=6291\">http://irony.codeplex.com/WorkItem/View.aspx?WorkItemId=6291</a></p>\r\n<p>The latest code drop (change set #42496 on Jan 26, 2010) still does not fix this issue.</p>\r\n<p>I decided to investigate this more thoroughly, and here is what I found:</p>\r\n<p>In ScannerDataBuilder::BuildTerminalsLookupTable():</p>\r\n<p>The _grammarData.Terminals contains ALL of the terminals in ALPHABETIC order.&nbsp; (I haven't traced this to confirm that it is sorted this way, but it always appears this<br>way when I'm stepping through the function in the debugger.)</p>\r\n<p>Since _grammar.FallbackTerminals is populated by sequentially going through _grammarData.Terminals and extracting the ones that have no &quot;first&quot;<br>characters defined, _grammar.FallbackTerminals is in ALPHABETIC order as well.</p>\r\n<p>Since _data.TerminalsLookup.FallbackTerminals is populated by a call to AddRange(_grammar.FallbackTerminals), it too is in ALPHABETIC order.</p>\r\n<p>(Meanwhile, the rest of the Terminals that DO have &quot;first&quot; characters are sorted into lists based on the &quot;first&quot; character and stored<br>in the _data.TerminalsLookup table.)</p>\r\n<p>For each of the &quot;first&quot; characters that are in the lookup table (with the list of terminals that have this &quot;first&quot; character), the _grammar.FallbackTerminals<br>list is added and they are all sorted by reverse priority -- which is great!</p>\r\n<p>However, the problem arises later in Scanner::ComputeCurrentTerminals() at Line #141 in Scanner.cs:</p>\r\n<p>The Data.TerminalsLookup table is asked for the list of possible terminals based on the PreviewChar.&nbsp; However, the index operator says that if the<br>preview char is not a stored key into the lookup table, then return the list of FallbackTerminals (which is sorted ALPHABETICALLY).</p>\r\n<p>Basically, whenever there is NO terminal defined that specifically has the preview char as it's &quot;first&quot; character, then the preview char will not be in the<br>lookup table.&nbsp; This causes it to return the FallbackTerminals which are sorted ALPHABETICALLY.&nbsp; This causes a problem when the result returned<br>(In this case, the FallbackTerminals) is assumed to be sorted in reverse priority order.&nbsp; The result is that they are tried in alphabetical order.</p>\r\n<p>(Technically, since the _grammar.FallbackTerminals is a TerminalSet, and not a TerminalList, it can end up in any arbitrary order [sets have no order],<br>but every time I ran it, it retained the original alphabetical ordering.&nbsp; Either way, it's not guaranteed to be reverse priority order).</p>\r\n<p>My proposed solution is to simply sort the _data.TerminalsLookup.FallbackTerminals list right after it is populated on line #70:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> BuildTerminalsLookupTable() {\r\n  <span style=\"color:Blue\">foreach</span> (Terminal term <span style=\"color:Blue\">in</span> _grammarData.Terminals) {\r\n    IList&lt;<span style=\"color:Blue\">string</span>&gt; firsts = term.GetFirsts();\r\n    <span style=\"color:Blue\">if</span> (firsts == <span style=\"color:Blue\">null</span> || firsts.Count == 0) {\r\n      _grammar.FallbackTerminals.Add(term);\r\n      <span style=\"color:Blue\">continue</span>; <span style=\"color:Green\">//foreach term</span>\r\n    }\r\n    <span style=\"color:Green\">//Go through prefixes one-by-one</span>\r\n    <span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">string</span> prefix <span style=\"color:Blue\">in</span> firsts) {\r\n      <span style=\"color:Blue\">if</span> (<span style=\"color:Blue\">string</span>.IsNullOrEmpty(prefix)) <span style=\"color:Blue\">continue</span>;\r\n      <span style=\"color:Green\">//Calculate hash key for the prefix</span>\r\n      <span style=\"color:Blue\">char</span> hashKey = prefix[0];\r\n      <span style=\"color:Blue\">if</span>(_grammar.CaseSensitive)\r\n        AddTerminalToLookup(hashKey, term);\r\n      <span style=\"color:Blue\">else</span> {\r\n        AddTerminalToLookup(<span style=\"color:Blue\">char</span>.ToLower(hashKey), term);\r\n        AddTerminalToLookup(<span style=\"color:Blue\">char</span>.ToUpper(hashKey), term);\r\n      }<span style=\"color:Green\">//if</span>\r\n    }<span style=\"color:Green\">//foreach prefix in firsts</span>\r\n  }<span style=\"color:Green\">//foreach term</span>\r\n\r\n  <span style=\"color:Green\">//Add Fallback terminals to TerminalsLookup special field that contains list to return as default, when there is no key char in the table</span>\r\n  _data.TerminalsLookup.FallbackTerminals.AddRange(_grammar.FallbackTerminals);\r\n  <span style=\"color:Green\">// Sort the FallbackTerminals in reverse priority order</span>\r\n  _data.TerminalsLookup.FallbackTerminals.Sort(Terminal.ByPriorityReverse);\r\n  <span style=\"color:Green\">//Now add Fallback terminals to every list, then sort lists by reverse priority</span>\r\n  <span style=\"color:Green\">// so that terminal with higher priority comes first in the list</span>\r\n  <span style=\"color:Blue\">foreach</span>(TerminalList list <span style=\"color:Blue\">in</span> _data.TerminalsLookup.Values) {\r\n    list.AddRange(_grammar.FallbackTerminals);\r\n    <span style=\"color:Blue\">if</span>(list.Count &gt; 1)\r\n      list.Sort(Terminal.ByPriorityReverse);\r\n  }<span style=\"color:Green\">//foreach list</span>\r\n \r\n}<span style=\"color:Green\">//method</span>\r\n</pre>\r\n</div>\r\n<p>After minor testing, I believe this completely fixes the issue.&nbsp; One thing I haven't looked into is whether or not _grammar.FallbackTerminals is ever used later -- it's still not in reverse priority order.<br>I don't know if that could potentially cause issues or not.<br><br>As a side note, I happened to look at the Terminal.ByPriorityReverse function and wondered why you didn't just write it as:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">int</span> ByPriorityReverse(Terminal x, Terminal y)\r\n{\r\n  <span style=\"color:Blue\">return</span> y.Priority - x.Priority;\r\n}\r\n</pre>\r\n</div>",
    "PostedDate": "2010-02-03T11:58:01.273-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "285869",
    "ThreadId": "83058",
    "Html": "<p>thanks for catching it, will look into this. Shoot, it never occurred to me that Fallback terminals may not be always of &quot;lowest&quot; priorities. There's another bug there i believe, related to OutputTerminal field, I wll check it also and fix it (hopefully finally fix it)</p>\r\n<p>Roman</p>",
    "PostedDate": "2010-02-04T10:16:43.033-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]