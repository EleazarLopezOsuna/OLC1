[
  {
    "Id": "820324",
    "ThreadId": "351298",
    "Html": "\r\n<p>&nbsp;I have a sample grammar, <span>and</span>&nbsp;<span>when I add</span>&nbsp;<span>the method&nbsp;</span><span style=\"font-family:Consolas,'Courier New',Courier,monospace; white-space:pre\">SkipWhitespace(ISourceStream source)\r\n<span>I</span>&nbsp;<span>detect an exception &quot;Root AstNode is null, cannot evaluate script. Create Ast tree first&quot;</span></span></p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:#0000ff\"><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MohanedEvaluatorGrammar : InterpretedLanguageGrammar\r\n    {\r\n        <span style=\"color:blue\">public</span> MohanedEvaluatorGrammar()\r\n            : <span style=\"color:blue\">base</span>(caseSensitive: <span style=\"color:blue\">false</span>)\r\n        {\r\n            <span style=\"color:blue\">this</span>.GrammarComments =\r\n      <span style=\"color:#a31515\">@&quot;Irony expression evaluator. Case-insensitive. Supports big integers, float data types, variables, assignments,\r\narithmetic operations, augmented assignments (&#43;=, -=), inc/dec (&#43;&#43;,--), strings with embedded expressions; \r\nbool operations &amp;,&amp;&amp;, |, ||; ternary '?:' operator.&quot;</span>;\r\n            CommentTerminal SingleLineComment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;SingleLineComment&quot;</span>, <span style=\"color:#a31515\">&quot;//&quot;</span>, <span style=\"color:#a31515\">&quot;\\r&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>, <span style=\"color:#a31515\">&quot;\\u2085&quot;</span>, <span style=\"color:#a31515\">&quot;\\u2028&quot;</span>, <span style=\"color:#a31515\">&quot;\\u2029&quot;</span>);\r\n            CommentTerminal DelimitedComment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;DelimitedComment&quot;</span>, <span style=\"color:#a31515\">&quot;/*&quot;</span>, <span style=\"color:#a31515\">&quot;*/&quot;</span>);\r\n            NonGrammarTerminals.Add(SingleLineComment);\r\n            NonGrammarTerminals.Add(DelimitedComment);\r\n            <span style=\"color:green\">//Temporarily, treat preprocessor instructions like comments</span>\r\n            CommentTerminal ppInstruction = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;ppInstruction&quot;</span>, <span style=\"color:#a31515\">&quot;#&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>);\r\n            NonGrammarTerminals.Add(ppInstruction);\r\n\r\n\r\n            <span style=\"color:green\">// 1. Terminals</span>\r\n            <span style=\"color:blue\">var</span> number = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;number&quot;</span>);\r\n            <span style=\"color:green\">//Let's allow big integers (with unlimited number of digits):</span>\r\n            number.DefaultIntTypes = <span style=\"color:blue\">new</span> TypeCode[] { TypeCode.Int32, TypeCode.Int64, NumberLiteral.TypeCodeBigInt };\r\n            <span style=\"color:blue\">var</span> identifier = <span style=\"color:blue\">new</span> IdentifierTerminal(<span style=\"color:#a31515\">&quot;identifier&quot;</span>);\r\n            <span style=\"color:blue\">var</span> identifierArray = <span style=\"color:blue\">new</span> IdentifierTerminal(<span style=\"color:#a31515\">&quot;identifierArray&quot;</span>);\r\n            <span style=\"color:blue\">var</span> comment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;comment&quot;</span>, <span style=\"color:#a31515\">&quot;#&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>, <span style=\"color:#a31515\">&quot;\\r&quot;</span>);\r\n            <span style=\"color:green\">//comment must be added to NonGrammarTerminals list; it is not used directly in grammar rules,</span>\r\n            <span style=\"color:green\">// so we add it to this list to let Scanner know that it is also a valid terminal. </span>\r\n            <span style=\"color:green\">/*base.NonGrammarTerminals.Add(comment); */</span>\r\n            <span style=\"color:blue\">var</span> comma = ToTerm(<span style=\"color:#a31515\">&quot;,&quot;</span>);\r\n\r\n            <span style=\"color:green\">//symbol</span>\r\n            KeyTerm begin = ToTerm(<span style=\"color:#a31515\">&quot;begin&quot;</span>);\r\n            KeyTerm end = ToTerm(<span style=\"color:#a31515\">&quot;end&quot;</span>);\r\n            KeyTerm iif = ToTerm(<span style=\"color:#a31515\">&quot;if&quot;</span>);\r\n            KeyTerm eelse = ToTerm(<span style=\"color:#a31515\">&quot;else&quot;</span>);\r\n\r\n\r\n            <span style=\"color:green\">//String literal with embedded expressions  ------------------------------------------------------------------</span>\r\n            <span style=\"color:blue\">var</span> stringLit = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;string&quot;</span>, <span style=\"color:#a31515\">&quot;\\&quot;&quot;</span>, StringOptions.AllowsAllEscapes | StringOptions.IsTemplate);\r\n            stringLit.AddStartEnd(<span style=\"color:#a31515\">&quot;'&quot;</span>, StringOptions.AllowsAllEscapes | StringOptions.IsTemplate);\r\n            stringLit.AstConfig.NodeType = <span style=\"color:blue\">typeof</span>(StringTemplateNode);\r\n            <span style=\"color:blue\">var</span> Expr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;Expr&quot;</span>); <span style=\"color:green\">//declare it here to use in template definition </span>\r\n            <span style=\"color:blue\">var</span> templateSettings = <span style=\"color:blue\">new</span> StringTemplateSettings(); <span style=\"color:green\">//by default set to Ruby-style settings </span>\r\n            templateSettings.ExpressionRoot = Expr; <span style=\"color:green\">//this defines how to evaluate expressions inside template</span>\r\n            <span style=\"color:blue\">this</span>.SnippetRoots.Add(Expr);\r\n            stringLit.AstConfig.Data = templateSettings;\r\n            <span style=\"color:green\">//--------------------------------------------------------------------------------------------------------</span>\r\n\r\n            <span style=\"color:green\">// 2. Non-terminals</span>\r\n\r\n            <span style=\"color:blue\">var</span> TernaryIfExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;TernaryIf&quot;</span>, <span style=\"color:blue\">typeof</span>(IfNode));\r\n            <span style=\"color:blue\">var</span> Term = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;Term&quot;</span>);\r\n            <span style=\"color:blue\">var</span> BinExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;BinExpr&quot;</span>, <span style=\"color:blue\">typeof</span>(BinaryOperationNode));\r\n            <span style=\"color:blue\">var</span> ParExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ParExpr&quot;</span>);\r\n            <span style=\"color:blue\">var</span> UnExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;UnExpr&quot;</span>, <span style=\"color:blue\">typeof</span>(UnaryOperationNode));\r\n            <span style=\"color:blue\">var</span> ArgList = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ArgList&quot;</span>, <span style=\"color:blue\">typeof</span>(ExpressionListNode));\r\n            <span style=\"color:blue\">var</span> FunctionCall = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FunctionCall&quot;</span>, <span style=\"color:blue\">typeof</span>(FunctionCallNode));\r\n            <span style=\"color:blue\">var</span> MemberAccess = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;MemberAccess&quot;</span>, <span style=\"color:blue\">typeof</span>(MemberAccessNode));\r\n            <span style=\"color:blue\">var</span> IndexedAccess = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;IndexedAccess&quot;</span>, <span style=\"color:blue\">typeof</span>(IndexedAccessNode));\r\n            <span style=\"color:blue\">var</span> ObjectRef = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ObjectRef&quot;</span>); <span style=\"color:green\">// foo, foo.bar or f['bar']</span>\r\n            <span style=\"color:blue\">var</span> UnOp = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;UnOp&quot;</span>);\r\n            <span style=\"color:blue\">var</span> BinOp = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;BinOp&quot;</span>, <span style=\"color:#a31515\">&quot;operator&quot;</span>);\r\n            <span style=\"color:blue\">var</span> PrefixIncDec = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PrefixIncDec&quot;</span>, <span style=\"color:blue\">typeof</span>(IncDecNode));\r\n            <span style=\"color:blue\">var</span> PostfixIncDec = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PostfixIncDec&quot;</span>, <span style=\"color:blue\">typeof</span>(IncDecNode));\r\n            <span style=\"color:blue\">var</span> IncDecOp = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;IncDecOp&quot;</span>);\r\n            <span style=\"color:blue\">var</span> AssignmentStmt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AssignmentStmt&quot;</span>, <span style=\"color:blue\">typeof</span>(AssignmentNode));\r\n            <span style=\"color:blue\">var</span> AssignmentOp = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;AssignmentOp&quot;</span>, <span style=\"color:#a31515\">&quot;assignment operator&quot;</span>);\r\n            <span style=\"color:blue\">var</span> Statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;Statement&quot;</span>);\r\n            <span style=\"color:blue\">var</span> Program = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;Program&quot;</span>);\r\n            <span style=\"color:blue\">var</span> exprRandom = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;exprRandom&quot;</span>, <span style=\"color:blue\">typeof</span>(RandomNode));\r\n            <span style=\"color:blue\">var</span> blockIfElse = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;blockIfElse&quot;</span>, <span style=\"color:blue\">typeof</span>(BlockIfElseNode));\r\n            <span style=\"color:blue\">var</span> listStatement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;listStatement&quot;</span>, <span style=\"color:blue\">typeof</span>(StatementListNode));\r\n            <span style=\"color:blue\">var</span> createInstance = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;createInstance&quot;</span>, <span style=\"color:blue\">typeof</span>(CreateInstanceNode));\r\n            <span style=\"color:blue\">var</span> exprSet = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;exprSet&quot;</span>, <span style=\"color:blue\">typeof</span>(ExprSetNode));\r\n            <span style=\"color:blue\">var</span> <span style=\"color:blue\">set</span> = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;set&quot;</span>, <span style=\"color:blue\">typeof</span>(SetNode));\r\n            <span style=\"color:blue\">var</span> whileClass = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;whileClass&quot;</span>, <span style=\"color:blue\">typeof</span>(WhileClassNode));\r\n            <span style=\"color:blue\">var</span> Change = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;Change&quot;</span>, <span style=\"color:blue\">typeof</span>(ChangeNode));\r\n            <span style=\"color:blue\">var</span> exprClass = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;exprClass&quot;</span>);\r\n            <span style=\"color:blue\">var</span> term1 = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;term1&quot;</span>, <span style=\"color:blue\">typeof</span>(TermNode));\r\n            <span style=\"color:blue\">var</span> logicExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;logicExpr&quot;</span>, <span style=\"color:blue\">typeof</span>(logicExprNode));\r\n            <span style=\"color:blue\">var</span> generalExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;generalExpr&quot;</span>);\r\n            <span style=\"color:blue\">var</span> blockForany = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;blockForany&quot;</span>, <span style=\"color:blue\">typeof</span>(BlockForanyNode));\r\n\r\n\r\n\r\n            <span style=\"color:green\">// 3. BNF rules</span>\r\n            Expr.Rule = Term | UnExpr | BinExpr | PrefixIncDec | PostfixIncDec | TernaryIfExpr | exprRandom | exprSet | blockIfElse;\r\n            exprClass.Rule = createInstance | <span style=\"color:blue\">set</span> | Change | whileClass | term1 | logicExpr | blockForany;\r\n            blockForany.Rule = ToTerm(<span style=\"color:#a31515\">&quot;for&quot;</span>) &#43; <span style=\"color:#a31515\">&quot;any&quot;</span> &#43; identifier &#43; identifier  &#43; <span style=\"color:#a31515\">&quot;do&quot;</span>  &#43; listStatement  &#43; <span style=\"color:#a31515\">&quot;end&quot;</span>;\r\n            generalExpr.Rule = exprClass | Expr;\r\n            <span style=\"color:blue\">set</span>.Rule = ToTerm(<span style=\"color:#a31515\">&quot;set&quot;</span>) &#43; <span style=\"color:#a31515\">&quot;the&quot;</span> &#43; identifier &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; identifier &#43; identifier &#43; <span style=\"color:#a31515\">&quot;to&quot;</span> &#43; Expr;\r\n            exprSet.Rule = ToTerm(<span style=\"color:#a31515\">&quot;set&quot;</span>) &#43; identifier &#43; <span style=\"color:#a31515\">&quot;to&quot;</span> &#43; Expr;\r\n            term1.Rule = ToTerm(<span style=\"color:#a31515\">&quot;the&quot;</span>) &#43; identifier &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; identifier &#43; identifier &#43; BinOp &#43; Expr; <span style=\"color:green\">//&#43; Expr;</span>\r\n            logicExpr.Rule = generalExpr &#43; identifier &#43; generalExpr;\r\n            createInstance.Rule = ToTerm(<span style=\"color:#a31515\">&quot;create&quot;</span>) &#43; <span style=\"color:#a31515\">&quot;instance&quot;</span> &#43; identifier &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; identifier;\r\n            whileClass.Rule = ToTerm(<span style=\"color:#a31515\">&quot;while&quot;</span>) &#43; generalExpr  &#43; listStatement  &#43; <span style=\"color:#a31515\">&quot;endwhile&quot;</span>;\r\n            Change.Rule = ToTerm(<span style=\"color:#a31515\">&quot;change&quot;</span>) &#43; <span style=\"color:#a31515\">&quot;the&quot;</span> &#43; identifier &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; identifier &#43; identifier &#43; <span style=\"color:#a31515\">&quot;to&quot;</span> &#43; identifier &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; identifier &#43; identifier &#43; BinOp &#43; Expr;\r\n            <span style=\"color:green\">//if_statement.Rule = ToTerm(&quot;if&quot;) &#43; generalExpr &#43; begin &#43; listStatement &#43; end</span>\r\n              <span style=\"color:green\">//  | ToTerm(&quot;if&quot;) &#43; generalExpr &#43; begin &#43; listStatement &#43; end &#43; &quot;else&quot;  &#43; begin &#43; listStatement &#43; end;</span>\r\n            <span style=\"color:green\">//else_clause_opt.Rule = Empty | PreferShiftHere() &#43; &quot;else&quot; &#43; NewLine &#43; &quot;begin&quot; &#43; NewLine &#43; AssignmentStmt &#43; NewLine &#43; &quot;end&quot;;</span>\r\n\r\n            blockIfElse.Rule = ToTerm(<span style=\"color:#a31515\">&quot;if&quot;</span>) &#43; generalExpr &#43; begin &#43; listStatement &#43; end &#43; <span style=\"color:#a31515\">&quot;else&quot;</span> &#43; begin &#43; listStatement &#43; end;\r\n            <span style=\"color:green\">//blockIf.Rule = ToTerm(&quot;if&quot;) &#43; generalExpr &#43; begin &#43; listStatement &#43; end;</span>\r\n            exprRandom.Rule = ToTerm(<span style=\"color:#a31515\">&quot;random&quot;</span>) &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\r\n            Term.Rule = number | ParExpr | stringLit | FunctionCall | identifier | MemberAccess; <span style=\"color:green\">//| IndexedAccess;</span>\r\n            ParExpr.Rule = <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; Expr &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\r\n            UnExpr.Rule = UnOp &#43; Term &#43; ReduceHere();\r\n            UnOp.Rule = ToTerm(<span style=\"color:#a31515\">&quot;&#43;&quot;</span>) | <span style=\"color:#a31515\">&quot;-&quot;</span>;\r\n            BinExpr.Rule = Expr &#43; BinOp &#43; Expr;\r\n            BinOp.Rule = ToTerm(<span style=\"color:#a31515\">&quot;&#43;&quot;</span>) | <span style=\"color:#a31515\">&quot;-&quot;</span> | <span style=\"color:#a31515\">&quot;*&quot;</span> | <span style=\"color:#a31515\">&quot;/&quot;</span> | <span style=\"color:#a31515\">&quot;**&quot;</span> | <span style=\"color:#a31515\">&quot;==&quot;</span> | <span style=\"color:#a31515\">&quot;&lt;&quot;</span> | <span style=\"color:#a31515\">&quot;&lt;=&quot;</span> | <span style=\"color:#a31515\">&quot;&gt;&quot;</span> | <span style=\"color:#a31515\">&quot;&gt;=&quot;</span> | <span style=\"color:#a31515\">&quot;!=&quot;</span> | <span style=\"color:#a31515\">&quot;&amp;&amp;&quot;</span> | <span style=\"color:#a31515\">&quot;||&quot;</span> | <span style=\"color:#a31515\">&quot;&amp;&quot;</span> | <span style=\"color:#a31515\">&quot;|&quot;</span>;\r\n            PrefixIncDec.Rule = IncDecOp &#43; identifier;\r\n            PostfixIncDec.Rule = identifier &#43; PreferShiftHere() &#43; IncDecOp;\r\n            IncDecOp.Rule = ToTerm(<span style=\"color:#a31515\">&quot;&#43;&#43;&quot;</span>) | <span style=\"color:#a31515\">&quot;--&quot;</span>;\r\n            MemberAccess.Rule = Expr &#43; PreferShiftHere() &#43; <span style=\"color:#a31515\">&quot;.&quot;</span> &#43; identifier;\r\n            AssignmentStmt.Rule = ObjectRef &#43; AssignmentOp &#43; Expr;\r\n            AssignmentOp.Rule = ToTerm(<span style=\"color:#a31515\">&quot;=&quot;</span>) | <span style=\"color:#a31515\">&quot;&#43;=&quot;</span> | <span style=\"color:#a31515\">&quot;-=&quot;</span> | <span style=\"color:#a31515\">&quot;*=&quot;</span> | <span style=\"color:#a31515\">&quot;/=&quot;</span>;\r\n            Statement.Rule = AssignmentStmt | Expr | Empty | exprClass;\r\n            ArgList.Rule = MakeStarRule(ArgList, comma, Expr);\r\n            FunctionCall.Rule = Expr &#43; PreferShiftHere() &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; ArgList &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\r\n            FunctionCall.NodeCaptionTemplate = <span style=\"color:#a31515\">&quot;call #{0}(...)&quot;</span>;\r\n            ObjectRef.Rule = identifier | MemberAccess;<span style=\"color:green\">//| IndexedAccess;</span>\r\n            <span style=\"color:green\">// IndexedAccess.Rule = Expr &#43; PreferShiftHere() &#43; &quot;[&quot; &#43; Expr &#43; &quot;]&quot;;</span>\r\n            TernaryIfExpr.Rule = Expr &#43; <span style=\"color:#a31515\">&quot;?&quot;</span> &#43; Expr &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; Expr;\r\n            listStatement.Rule = MakePlusRule(listStatement,<span style=\"color:blue\">null</span>, Statement);\r\n            Program.Rule = listStatement;\r\n\r\n            <span style=\"color:blue\">this</span>.Root = Program;       <span style=\"color:green\">// Set grammar root</span>\r\n\r\n            <span style=\"color:green\">// 4. Operators precedence</span>\r\n            RegisterOperators(10, <span style=\"color:#a31515\">&quot;?&quot;</span>);\r\n            RegisterOperators(15, <span style=\"color:#a31515\">&quot;&amp;&quot;</span>, <span style=\"color:#a31515\">&quot;&amp;&amp;&quot;</span>, <span style=\"color:#a31515\">&quot;|&quot;</span>, <span style=\"color:#a31515\">&quot;||&quot;</span>);\r\n            RegisterOperators(20, <span style=\"color:#a31515\">&quot;==&quot;</span>, <span style=\"color:#a31515\">&quot;&lt;&quot;</span>, <span style=\"color:#a31515\">&quot;&lt;=&quot;</span>, <span style=\"color:#a31515\">&quot;&gt;&quot;</span>, <span style=\"color:#a31515\">&quot;&gt;=&quot;</span>, <span style=\"color:#a31515\">&quot;!=&quot;</span>);\r\n            RegisterOperators(30, <span style=\"color:#a31515\">&quot;&#43;&quot;</span>, <span style=\"color:#a31515\">&quot;-&quot;</span>);\r\n            RegisterOperators(40, <span style=\"color:#a31515\">&quot;*&quot;</span>, <span style=\"color:#a31515\">&quot;/&quot;</span>);\r\n            RegisterOperators(50, Associativity.Right, <span style=\"color:#a31515\">&quot;**&quot;</span>);\r\n            <span style=\"color:green\">// For precedence to work, we need to take care of one more thing: BinOp. </span>\r\n            <span style=\"color:green\">//For BinOp which is or-combination of binary operators, we need to either </span>\r\n            <span style=\"color:green\">// 1) mark it transient or 2) set flag TermFlags.InheritPrecedence</span>\r\n            <span style=\"color:green\">// We use first option, making it Transient.  </span>\r\n\r\n            <span style=\"color:green\">// 5. Punctuation and transient terms</span>\r\n            MarkPunctuation(<span style=\"color:#a31515\">&quot;(&quot;</span>, <span style=\"color:#a31515\">&quot;)&quot;</span>, <span style=\"color:#a31515\">&quot;?&quot;</span>, <span style=\"color:#a31515\">&quot;:&quot;</span>, <span style=\"color:#a31515\">&quot;[&quot;</span>, <span style=\"color:#a31515\">&quot;]&quot;</span>, <span style=\"color:#a31515\">&quot;begin&quot;</span>, <span style=\"color:#a31515\">&quot;end&quot;</span>);\r\n            RegisterBracePair(<span style=\"color:#a31515\">&quot;(&quot;</span>, <span style=\"color:#a31515\">&quot;)&quot;</span>);\r\n            RegisterBracePair(<span style=\"color:#a31515\">&quot;[&quot;</span>, <span style=\"color:#a31515\">&quot;]&quot;</span>);\r\n            MarkTransient(Term, Expr, generalExpr, exprClass, Statement, BinOp, UnOp, IncDecOp, AssignmentOp, ParExpr, ObjectRef, Program);\r\n\r\n            <span style=\"color:green\">// 7. Syntax error reporting</span>\r\n            MarkNotReported(<span style=\"color:#a31515\">&quot;&#43;&#43;&quot;</span>, <span style=\"color:#a31515\">&quot;--&quot;</span>);\r\n            AddToNoReportGroup(<span style=\"color:#a31515\">&quot;(&quot;</span>, <span style=\"color:#a31515\">&quot;&#43;&#43;&quot;</span>, <span style=\"color:#a31515\">&quot;--&quot;</span>, <span style=\"color:#a31515\">&quot;begin&quot;</span>, <span style=\"color:#a31515\">&quot;end&quot;</span>);\r\n            <span style=\"color:green\">//AddToNoReportGroup(NewLine);</span>\r\n            AddOperatorReportGroup(<span style=\"color:#a31515\">&quot;operator&quot;</span>);\r\n            AddTermsReportGroup(<span style=\"color:#a31515\">&quot;assignment operator&quot;</span>, <span style=\"color:#a31515\">&quot;=&quot;</span>, <span style=\"color:#a31515\">&quot;&#43;=&quot;</span>, <span style=\"color:#a31515\">&quot;-=&quot;</span>, <span style=\"color:#a31515\">&quot;*=&quot;</span>, <span style=\"color:#a31515\">&quot;/=&quot;</span>, <span style=\"color:#a31515\">&quot;if&quot;</span>, <span style=\"color:#a31515\">&quot;begin&quot;</span>, <span style=\"color:#a31515\">&quot;end&quot;</span>);\r\n\r\n            <span style=\"color:green\">//8. Console</span>\r\n            ConsoleTitle = <span style=\"color:#a31515\">&quot;Irony Expression Evaluator&quot;</span>;\r\n            ConsoleGreeting =\r\n      <span style=\"color:#a31515\">@&quot;Irony Expression Evaluator \r\n\r\n  Supports variable assignments, arithmetic operators (&#43;, -, *, /),\r\n    augmented assignments (&#43;=, -=, etc), prefix/postfix operators &#43;&#43;,--, string operations. \r\n  Supports big integer arithmetics, string operations.\r\n  Supports strings with embedded expressions : &quot;&quot;name: #{name}&quot;&quot;\r\n\r\nPress Ctrl-C to exit the program at any time.\r\n&quot;</span>;\r\n            ConsolePrompt = <span style=\"color:#a31515\">&quot;?&quot;</span>;\r\n            ConsolePromptMoreInput = <span style=\"color:#a31515\">&quot;?&quot;</span>;\r\n\r\n            <span style=\"color:green\">//9. Language flags. </span>\r\n            <span style=\"color:green\">// Automatically add NewLine before EOF so that our BNF rules work correctly when there's no final line break in source</span>\r\n            <span style=\"color:blue\">this</span>.LanguageFlags = LanguageFlags.NewLineBeforeEOF | LanguageFlags.CreateAst | LanguageFlags.SupportsBigInt;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> LanguageRuntime CreateRuntime(LanguageData language)\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> ExpressionEvaluatorRuntime(language);\r\n        }\r\n\r\n        <span style=\"color:blue\">#region</span> Running in Grammar Explorer\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> MohanedEvaluator _evaluator;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">string</span> RunSample(RunSampleArgs args)\r\n        {\r\n            <span style=\"color:blue\">if</span> (_evaluator == <span style=\"color:blue\">null</span>)\r\n            {\r\n                _evaluator = <span style=\"color:blue\">new</span> MohanedEvaluator(<span style=\"color:blue\">this</span>);\r\n                _evaluator.Globals.Add(<span style=\"color:#a31515\">&quot;null&quot;</span>, _evaluator.Runtime.NoneValue);\r\n                _evaluator.Globals.Add(<span style=\"color:#a31515\">&quot;true&quot;</span>, <span style=\"color:blue\">true</span>);\r\n                _evaluator.Globals.Add(<span style=\"color:#a31515\">&quot;false&quot;</span>, <span style=\"color:blue\">false</span>);\r\n\r\n            }\r\n            _evaluator.ClearOutput();\r\n            <span style=\"color:green\">//for (int i = 0; i &lt; 1000; i&#43;&#43;)  //for perf measurements, to execute 1000 times</span>\r\n            _evaluator.Evaluate(args.ParsedSample);\r\n            <span style=\"color:blue\">return</span> _evaluator.GetOutput();\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> SkipWhitespace(ISourceStream source)\r\n        {\r\n            <span style=\"color:blue\">while</span> (!source.EOF())\r\n            {\r\n                <span style=\"color:blue\">var</span> ch = source.PreviewChar;\r\n                <span style=\"color:blue\">switch</span> (ch)\r\n                {\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">' '</span>:\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">'\\t'</span>:\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">'\\n'</span>:\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">'\\v'</span>:\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">'\\u2085'</span>:\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">'\\u2028'</span>:\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">'\\u2029'</span>:\r\n                        source.PreviewPosition&#43;&#43;;\r\n                        <span style=\"color:blue\">break</span>;\r\n                    <span style=\"color:blue\">default</span>:\r\n                        <span style=\"color:green\">//Check unicode class Zs</span>\r\n                        UnicodeCategory chCat = <span style=\"color:blue\">char</span>.GetUnicodeCategory(ch);\r\n                        <span style=\"color:blue\">if</span> (chCat == UnicodeCategory.SpaceSeparator) <span style=\"color:green\">//it is whitespace, continue moving</span>\r\n                            <span style=\"color:blue\">continue</span>;<span style=\"color:green\">//while loop </span>\r\n                        <span style=\"color:green\">//Otherwize return</span>\r\n                        <span style=\"color:blue\">return</span>;\r\n                }<span style=\"color:green\">//switch</span>\r\n            }<span style=\"color:green\">//while</span>\r\n        }\r\n        \r\n\r\n    }<span style=\"color:green\">//class</span>\r\n</pre>\r\n</div>\r\n</span></pre>\r\n</div>\r\n",
    "PostedDate": "2012-04-05T04:37:27.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "820601",
    "ThreadId": "351298",
    "Html": "<p>What is MonahedEvaluator? I guess it's another your class. Hard to say what's the problem, just step through in debugger and see if AstBuilder gets invoked, and if any AST nodes are actually created.</p>",
    "PostedDate": "2012-04-05T14:51:08.453-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]