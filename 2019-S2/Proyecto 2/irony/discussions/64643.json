[
  {
    "Id": "220077",
    "ThreadId": "64643",
    "Html": "<p>I just used Irony for the 1st time yesterday! :-)</p>\r\n<p>(instead of just reading about it)<br>And now I wonder, where does the name come from?</p>\r\n<p>For the record I was trying to write an assembly qualified type name parser.<br>It turns out I won't be really using Irony for that (hence reducing my dependencies in my low level library). Nonetheless, even in my hurry, newbie and lack of sleep state I quickly manage to produce the simple grammar below. Neat! Irony is so easy, that's cool! :-)<br><br>(Note: I used the Irony revision 31155 from SVN, the latest one yesterday)&nbsp;</p>\r\n<p>assembly qualifed type name grammar:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>\t[Language(<span style=\"color:#A31515\">&quot;Type FullName&quot;</span>, <span style=\"color:#A31515\">&quot;1.0&quot;</span>, <span style=\"color:#A31515\">&quot;Generic type name&quot;</span>)]\r\n\t<span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> TypeNameGrammar : Grammar\r\n\t</span>{\r\n\t\t<span style=\"color:Blue\">public</span> TypeNameGrammar()\r\n\t\t\t: <span style=\"color:Blue\">base</span>(<span style=\"color:Blue\">true</span>)\r\n\t\t{\r\n\t\t\t<span style=\"color:Blue\">var</span> typeName = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;TypeName&quot;</span>);\r\n\t\t\t<span style=\"color:Blue\">this</span>.Root = typeName;\r\n\r\n\t\t\t<span style=\"color:Blue\">var</span> ident = <span style=\"color:Blue\">new</span> FreeTextToChars(<span style=\"color:#A31515\">&quot;identifier&quot;</span>, <span style=\"color:#A31515\">&quot;,[]` &quot;</span>);\r\n\t\t\t<span style=\"color:Blue\">var</span> aname = <span style=\"color:Blue\">new</span> FreeTextToChars(<span style=\"color:#A31515\">&quot;AssemblyName&quot;</span>, <span style=\"color:#A31515\">&quot;]&quot;</span>);\r\n\t\t\t<span style=\"color:Blue\">var</span> number = <span style=\"color:Blue\">new</span> NumberLiteral(<span style=\"color:#A31515\">&quot;number&quot;</span>, NumberFlags.IntOnly);\r\n\r\n\t\t\t<span style=\"color:Blue\">var</span> optionalGenericType = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;GenericPart&quot;</span>);\r\n\t\t\t<span style=\"color:Blue\">var</span> optionalAssembly = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Assembly&quot;</span>);\r\n\t\t\t<span style=\"color:Blue\">var</span> typeParameters = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;TypeParameters&quot;</span>);\r\n\r\n\t\t\ttypeName.Rule = ident + optionalGenericType + optionalAssembly;\r\n\t\t\toptionalGenericType.Rule =\r\n\t\t\t\tEmpty\r\n\t\t\t\t| Symbol(<span style=\"color:#A31515\">&quot;`&quot;</span>) + number + <span style=\"color:#A31515\">&quot;[&quot;</span> + typeParameters + <span style=\"color:#A31515\">&quot;]&quot;</span>;\r\n\t\t\toptionalAssembly.Rule =\r\n\t\t\t\tEmpty\r\n\t\t\t\t| Symbol(<span style=\"color:#A31515\">&quot;,&quot;</span>) + aname;\r\n\t\t\ttypeParameters.Rule =\r\n\t\t\t\ttypeParameters + <span style=\"color:#A31515\">&quot;,&quot;</span> + <span style=\"color:#A31515\">&quot;[&quot;</span> + typeName + <span style=\"color:#A31515\">&quot;]&quot;</span>\r\n\t\t\t\t| Symbol(<span style=\"color:#A31515\">&quot;[&quot;</span>) + typeName + <span style=\"color:#A31515\">&quot;]&quot;</span>;\r\n\r\n\t\t\t<span style=\"color:Blue\">this</span>.RegisterPunctuation(<span style=\"color:#A31515\">&quot;[&quot;</span>, <span style=\"color:#A31515\">&quot;]&quot;</span>, <span style=\"color:#A31515\">&quot;`&quot;</span>, <span style=\"color:#A31515\">&quot;,&quot;</span>);\r\n\t\t}\r\n\r\n\t\t<span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> FreeTextToChars : Terminal\r\n\t\t</span>{\r\n\t\t\t<span style=\"color:Blue\">private</span> <span style=\"color:Blue\">char</span>[] stopChars;\r\n\r\n\t\t\t<span style=\"color:Blue\">public</span> FreeTextToChars(<span style=\"color:Blue\">string</span> name, <span style=\"color:Blue\">string</span> chars)\r\n\t\t\t\t: <span style=\"color:Blue\">base</span>(name, TokenCategory.Literal)\r\n\t\t\t{\r\n\t\t\t\tstopChars = chars.ToCharArray();\r\n\t\t\t}\r\n\r\n\t\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Token TryMatch(CompilerContext context, ISourceStream source)\r\n\t\t\t{\r\n\t\t\t\t<span style=\"color:Blue\">var</span> next = source.Text.IndexOfAny(stopChars, source.PreviewPosition);\r\n\t\t\t\t<span style=\"color:Blue\">if</span> (next == -1)\r\n\t\t\t\t{\r\n\t\t\t\t\t<span style=\"color:Blue\">string</span> token = source.Text.Substring(source.PreviewPosition);\r\n\t\t\t\t\tsource.PreviewPosition = source.Text.Length;\r\n\t\t\t\t\t<span style=\"color:Blue\">return</span> source.CreateToken(<span style=\"color:Blue\">this</span>, token);\r\n\t\t\t\t}\r\n\t\t\t\t<span style=\"color:Blue\">else</span>\r\n\t\t\t\t{\r\n\t\t\t\t\t<span style=\"color:Blue\">string</span> token = source.Text.Substring(source.PreviewPosition, next - source.PreviewPosition);\r\n\t\t\t\t\tsource.PreviewPosition = next;\r\n\t\t\t\t\t<span style=\"color:Blue\">return</span> source.CreateToken(<span style=\"color:Blue\">this</span>, token);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</pre>\r\n</div>\r\n&nbsp;\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-05T17:12:37.707-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "220124",
    "ThreadId": "64643",
    "Html": "<p>&quot;Irony&quot; - partly mockery, partly real&nbsp;irony, partly aknowledgement of inital inspiration that came from IronPython and other iron products.</p>\r\n<p>Your code - congrats, glad you did it and happy with result!</p>\r\n<p>Don't understand why you needed a custom terminal, why not IdentifierTerminal? as an excercise? way to go!</p>\r\n<p>Roman</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-05T20:23:10.287-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "220198",
    "ThreadId": "64643",
    "Html": "<p>I plan to parse things such as:<br>--<br>System.Collections.Generic.Dictionary`2[[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]<br>--&nbsp;</p>\r\n<p>And assemblyName should match:<br>--<br>mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089<br>--&nbsp;</p>\r\n<p>Identifier won't do, and recombining the assembly name from smaller token is a bit difficult for the beginer that I am (and tired as I was in the morning)</p>\r\n<p>I tried to use the FreeTextLiteral but for some reason it didn't work out. Making my own terminal seemed like the best idea at at the time (2:00 AM) ;-)</p>",
    "PostedDate": "2009-08-06T00:33:59.687-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]