[
  {
    "Id": "525423",
    "ThreadId": "235619",
    "Html": "\r\n<p>I am writing a language service for Java. &nbsp;Since I want to do syntax highlighting, I need a parser for the Java language. &nbsp;After much searching and researching, I absolutely love Irony. &nbsp;My problem is writing a grammar that can handle Java\r\n source code.</p>\r\n<p>Here's what I've done so far:</p>\r\n<p>I originally started modifying the sample C# grammar since, I thought, C# and Java are so similar. &nbsp;I quickly found out that they aren't that similar at all. &nbsp;I then thought that I can't be the first person to need to parse Java so I went in search\r\n of what others have done. &nbsp;I have found a few different grammar specifications for Java in BNF form. &nbsp;The first ones I found were for ANTLR. &nbsp;At first I tried transcribing the rules by hand but that was WAY too&nbsp;monotonous&nbsp;and error\r\n prone so I wrote an Irony grammar for ANTLR grammar files. &nbsp;Easy enough. &nbsp;Then I used Irony to parse the Java grammar file and use the tree to create Irony grammar code for Java. &nbsp;I played with that for a long time (about 2 weeks) with little\r\n success when I noticed that ANTLR makes LL(k) parsers whereas Irony is an LALR(1) parser.</p>\r\n<p>Luckily I found that SableCC had a Java grammar and it generates LALR(1) parsers so I was hoping to have more luck with this grammar. &nbsp;It also seemed more accurate with regards to the rules of Java. &nbsp;So I did the same process as above (i.e. Make\r\n SableCC grammar, generate Irony code).</p>\r\n<p>Also, as a sanity check, I created a parser (in C#) using SableCC and the Java grammar. &nbsp;It worked fine and created a nice parse tree that I verified was accurate according the test file I'm using. &nbsp;So I believe the grammar is correct.</p>\r\n<p>My problem is that the Irony parser doesn't work. &nbsp;Specifically it often goes down the wrong path and ends up with a syntax error. &nbsp;I'm not overly surprised because I have numerous reduce-reduce conflicts and shift-reduce conflicts.</p>\r\n<p>Lets start with the first reduce-reduce conflict in S0 (there are 1580 states). &nbsp;Here is the state:</p>\r\n<pre>State S0 (Inadequate)\r\n&nbsp;&nbsp;Shift items:\r\n&nbsp;&nbsp; &nbsp;compilation_unit' -&gt; &middot;compilation_unit EOF\r\n&nbsp;&nbsp;&nbsp; &nbsp;compilation_unit -&gt; &middot;package_declaration_opt import_declarations_star type_declarations_star\r\n&nbsp;&nbsp;&nbsp; &nbsp;package_declaration_opt -&gt; &middot;package_declaration\r\n&nbsp;&nbsp;&nbsp; &nbsp;package_declaration -&gt; &middot;modifiers_star package identifier additional_identifiers_star semi\r\n&nbsp;&nbsp;&nbsp; &nbsp;modifiers_star -&gt; &middot;modifiers_star modifier\r\n&nbsp;&nbsp;&nbsp;Reduce items:\r\n&nbsp;&nbsp; &nbsp;package_declaration_opt -&gt; &middot; [import semi class_token abstract at final native private protected public static strictfp synchronized transient volatile enum interface EOF]\r\n&nbsp;&nbsp; &nbsp;modifiers_star -&gt; &middot; [package abstract at final native private protected public static strictfp synchronized transient volatile]\r\n&nbsp;&nbsp;Transitions: compilation_unit-&gt;S1, package_declaration_opt-&gt;S2, package_declaration-&gt;S3, modifiers_star-&gt;S4</pre>\r\n<p>The conflict is:</p>\r\n<pre>Reduce-reduce conflict. State S0, lookaheads: abstract at final native private protected public static strictfp synchronized transient volatile. Selected reduce on first production in conflict set.</pre>\r\n<p>As I understand it, this means that if the next token is any one of the lookaheads then the parser doesn't know if it should reduce to a package_declaration_opt of a modifiers_star.&nbsp; In this case the lookaheads are all possible tokens in the production\r\n &quot;modifier&quot;.&nbsp; Why does it not reduce to a modifier, which could then reduce to a modifiers_star, which would then shift in package_declaration? I know how to specify whether to shift or reduce, but how do I push the parser towards one reduction or another?\r\n &nbsp;Of course, I'm not sure that would help me because I'm not sure which one it should go to.</p>\r\n<p>I'm a complete noob with regard to parsing theory, but I have done my research so I'm not clueless.&nbsp; However in this case I am stumped.&nbsp; Below are links to any files that may be helpful in understanding my dilema.</p>\r\n<ul>\r\n<li><a href=\"http://jere.us/irony/1/Java.Original.Grammar.txt\">Java.Original.Grammar.txt</a> - The original SableCC grammar\r\n</li><li><a href=\"http://jere.us/irony/1/Java.Mine.Grammar.txt\">Java.Mine.Grammar.txt</a> - My modified version\r\n</li><li><a href=\"http://jere.us/irony/1/JavaGrammar.cs.txt\">JavaGrammar.cs</a> - My JavaGrammar class, the non-generated part\r\n</li><li><a href=\"http://jere.us/irony/1/JavaGrammarGenerated.cs.txt\">JavaGrammarGenerated.cs</a> - My JavaGrammar class, the generated part\r\n</li><li><a href=\"http://jere.us/irony/1/TestJavaSource.txt\">TestJavaSource.txt</a> - My test case\r\n</li></ul>\r\n<p>Any help is greatly appreciated.&nbsp; I can also share my ANTLR and SableCC grammars for Irony and my generation code if that is helpful.</p>\r\n<p>Jere</p>\r\n",
    "PostedDate": "2010-11-22T10:40:17.877-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526162",
    "ThreadId": "235619",
    "Html": "\r\n<p>Well, the main advise I can give - don't reuse grammars for other tools, that wouldn't work, unfortunately. Tried it myself, that does not work.</p>\r\n<p>Find java spec, with BNF forms, and reconstruct Irony grammar following it section by section. Keep in mind, the official specs are not perfect, c# has several mistakes there. SableCC - hard to guess why the grammar works for Sable and not with Irony. Conflicts\r\n Irony displays are LALR(1), algorithm-based conflicts, not faults of an implementation. It might be SableCC implements GLR (parallel GLR, following all conflicting alternatives until one path wins).&nbsp;</p>\r\n<p>Next - don't try to run/parse anything until you resolve the conflicts - either by restructuring the grammar, or by using hints with explicit resolution instruction. You must have clear grammar, free of reported conflicts before you start parsing.</p>\r\n<p>Looking at the grammar - it certainly might be improved and simplified. Keep in mind, SableCC does not support operator precedence, and some other advanced tricks (like list construction); so SableCC grammar is usually much more complex than equivalent in\r\n Irony. Look here for some comparison:</p>\r\n<p><a href=\"http://intellect.dk/post/Writing-a-calculator-in-C-using-Irony.aspx\">http://intellect.dk/post/Writing-a-calculator-in-C-using-Irony.aspx</a></p>\r\n<p>One thing I see is the way you construct lists with delimiters: Irony's MakePlus/StarRule methods support delimiters in lists, and even lists with optional ending delimiters.</p>\r\n<p>So go ahead and start rewriting it using native Irony facilities. My advice - don't &quot;overdeclare&quot; things, Irony supports using string literals directly in expressions. Simplify, simplify, simplify - you have enough complexity ahead.&nbsp;</p>\r\n<p>About some code in your grammar, setting up terminals - all these huge sequences of char intervals. Something wrong is here. My guess is that situation here is similar to c# identifier, where (as spec says) - valid characters must belong to certain UNICODE\r\n categories. Look at java spec, compare with c# identifier setup in TerminalFactory - I guess you can do something similar here.</p>\r\n<p>Good luck</p>\r\n<p>Roman</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-23T16:46:39.707-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526186",
    "ThreadId": "235619",
    "Html": "\r\n<p>Thanks for the advice Roman. &nbsp;I was going the other way. &nbsp;Trying to declare things that might be similar as separate rules.</p>\r\n<p>I have a couple comments:</p>\r\n<p>1) Replacing one of the more common constructs (that of identifier additional_identifiers*) with the following solved almost all of my reduce-reduce conflicts:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>qualified_name.Rule = MakePlusRule(qualified_name, DOT, identifier)\r\n</pre>\r\n</div>\r\n2)&nbsp;Regarding the list of characters, those are accurate. &nbsp;I even made a blog post about it:&nbsp;<a href=\"http://vsadt.squarespace.com/blog/2010/11/16/java-real-numbers-do-the-funky-chicken-in-hex.html\">http://vsadt.squarespace.com/blog/2010/11/16/java-real-numbers-do-the-funky-chicken-in-hex.html</a>\r\n<p></p>\r\n<p>And a couple specific questions:</p>\r\n<p>1) Is it possible to have a MakeStarRule in the middle of another rule or must it be its own rule? &nbsp;Something like this:&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>class_body.Rule = L_BRC &#43; MakeStarRule(**What would go here?**, class_body_declaration) &#43; R_BRC;\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>2) How would I solve the the conflict in my first post? &nbsp;The problem, as I see it, is that both a &quot;package_declaration&quot; and a &quot;type_declaration&quot; can start with a &quot;modifier&quot;. &nbsp;Since &quot;package_declaration&quot; and &quot;import declarations&quot; are optional, the\r\n parser doesn't know whether it should go down the &quot;package_declaration&quot; rabbit hole or the &quot;type_declaration&quot; rabbit hole. &nbsp;But if the parser would just parser the modifiers then the next symbol would tell it whether it was looking at a &quot;package_declaration&quot;\r\n or a &quot;type declaration&quot;. &nbsp;What am I missing?</p>\r\n<p>3) Should I even care about operator precedence right now? &nbsp;My first goal is to get a tree, any tree. &nbsp;Then I can worry about whether the tree splits in the right spots.</p>\r\n<p>4) If I'm going to write it from scratch, I'll have to have some partial successes. &nbsp;Toward that end, how do I specify a rule that says, essentially, suck up everything until you find a semicolon? &nbsp;I tried using a FreeTextLiteral, but it caused\r\n Irony to grab memory at an unbelievable rate.</p>\r\n<p>Thanks!</p>\r\n<p>Jere</p>\r\n",
    "PostedDate": "2010-11-23T18:02:19.997-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526209",
    "ThreadId": "235619",
    "Html": "\r\n<p>Hi&nbsp;</p>\r\n<p>answering your questions:</p>\r\n<p>1) &quot;Replacing one of the more common construc....&quot;&nbsp;&nbsp; &nbsp;That's what I would expect: Irony's implementation for list construction is conflict-free and well tested.</p>\r\n<p>2) List of characters - I understand that they are accurate, I just think there is some underlying principle - like certain Unicode categories are allowed. In this case these restrictions can be expressed more easily. Irony's identifier supports this concept\r\n for c#; given many similarities between c# and java I would expect very similar thing here. I looked at Jave spec (from your blog), and found quite surprising definition: java identifier character is a character for which the function&nbsp;Character.isJavaIdentifierStart(int)\r\n returns true... hmm... strange way to define language basic artifacts - through reference to its runtime... and she calls me stupid.. well, I hope there's some better structured idea behind this</p>\r\n<p>3) Make star rule - no, make star rule must be standalone. In fact, inside MakeStarRule, it already assigns list.Rule value; so writing it as &quot; list.Rule = MakeStarRule(list, elem); &quot; is just for clarity, to show that list.Rule is also assigned along with\r\n other non-terminals</p>\r\n<p>4) Initial conflict in S0 - will look at it, please post updated grammar&nbsp;</p>\r\n<p>5) Operator precedence is for automatic conflict resolution. Having it in Irony allows you to greatly simplify grammars for expressions, bundle them all into one binary expression; if you don't have prec support, you have to do very painful construction\r\n of various operators in their prec order - again, see the link about writing calculator, it all explained there</p>\r\n<p>6) Partial successes - certainly good thing; but then start with simplified grammar, top-level elements, make grammar conflict-free, parse samples; then add more detailed elements to grammar, again fix the conflicts, parse samples etc</p>\r\n<p>It is just grammar with conflicts has no practical use - you see, it fails even to parse your samples correctly</p>\r\n<p>About Irony sucking memory - that's alarming sign.. can you please give more details?</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-23T18:50:25.517-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526225",
    "ThreadId": "235619",
    "Html": "\r\n<p>Here are the updated files. &nbsp;The rest of the files are the same:</p>\r\n<ul>\r\n<li><a href=\"http://jere.us/irony/2/Java.Mine.Grammar.txt\">Java.Mine.Grammar.txt</a> - My modified version\r\n</li><li><a href=\"http://jere.us/irony/2/JavaGrammarGenerated.cs.txt\">JavaGrammarGenerated.cs</a> - My JavaGrammar class, the generated part\r\n</li></ul>\r\n<p>Thanks for your expert eye,</p>\r\n<p>Jere</p>\r\n<ul>\r\n</ul>\r\n",
    "PostedDate": "2010-11-23T20:56:37.307-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526243",
    "ThreadId": "235619",
    "Html": "\r\n<p>As per your suggestion, I started with a clean slate and am starting with just the top level elements. &nbsp;I just can't get the reduce-reduce conflict to go away on S0.</p>\r\n<p>This is the my Java grammar project as I have it now (<a href=\"http://jere.us/Irony/3/VSADT.Grammar.zip\">downloadable here</a>):</p>\r\n<p>My only rules (as a reminder, ALL CAPS are Terminals):</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>compilation_unit.Rule = package_declaration &#43; import_declarations &#43; type_declarations;\r\nqualified_name.Rule = MakePlusRule(qualified_name, DOT, identifier);\r\npackage_declaration.Rule = (Empty | (modifiers &#43; PACKAGE &#43; qualified_name &#43; SEMI));\r\nimport_declarations.Rule = MakeStarRule(import_declarations, import_declaration);\r\nimport_declaration.Rule = IMPORT &#43; qualified_name &#43; import_wildcard &#43; SEMI;\r\nimport_wildcard.Rule = Empty | (DOT &#43; STAR);\r\ntype_declarations.Rule = MakeStarRule(type_declarations, type_declaration);\r\ntype_declaration.Rule = modifiers &#43; CLASS_TOKEN &#43; identifier &#43; L_BRC &#43; R_BRC;\r\nmodifiers.Rule = MakeStarRule(modifiers, modifier);\r\nmodifier.Rule = ABSTRACT | FINAL | NATIVE | PRIVATE | PROTECTED | PUBLIC | STATIC | STRICTFP | SYNCHRONIZED | TRANSIENT | VOLATILE;\r\n\r\n</pre>\r\n</div>\r\n<p>S0 looks almost identical to the one in my original post.</p>\r\n<p>&nbsp;</p>\r\n<p>I know you said don't try to parse anything until I have a clean grammar, but I just can't help it. :-) &nbsp;The following sample *should* parse cleanly with only the above rules:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">package</span> com.test.jere;\r\n\r\n<span style=\"color:blue\">import</span> com.test.roman.Irony;\r\n<span style=\"color:blue\">import</span> com.test.cristina.*;\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> GrammarTest {\r\n\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>But there is, unsurprisingly, a syntax error at (0:7) because it chooses to reduce the entire package_declaration. &nbsp;</p>\r\n<p>I seem to be stuck on a very basic concept. What am I missing?</p>\r\n<p>Thanks,</p>\r\n<p>Jere</p>\r\n",
    "PostedDate": "2010-11-23T22:34:42.743-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526259",
    "ThreadId": "235619",
    "Html": "\r\n<p>well, why it happens - is clear; when parser sees a modifier like &quot;public&quot;, he cannot know what is that - a first token of class declaration (in which case it should create empty package declaration and imports), or it is the first &quot;public&quot; of package declaration.</p>\r\n<p>The trouble with star lists is that the list element is created as empty list, before the first element is consumed - but this is some technicalities.</p>\r\n<p>How to fix it - let me think a bit</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-23T23:37:37.027-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526320",
    "ThreadId": "235619",
    "Html": "\r\n<p>I have found one way to eliminate the conflict although it &quot;feels&quot; wrong. &nbsp;Here is the new grammar:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>compilation_unit.Rule = Empty;\r\ncompilation_unit.Rule |= modifiers &#43; package_declaration &#43; import_declarations &#43; modifiers &#43; type_declaration &#43; type_declarations;\r\ncompilation_unit.Rule |=             package_declaration &#43; import_declarations &#43; modifiers &#43; type_declaration &#43; type_declarations;\r\ncompilation_unit.Rule |=                                   import_declarations &#43; modifiers &#43; type_declaration &#43; type_declarations;\r\ncompilation_unit.Rule |=                                   import_declarations &#43;             type_declaration &#43; type_declarations;\r\ncompilation_unit.Rule |= modifiers &#43; package_declaration &#43;                       modifiers &#43; type_declaration &#43; type_declarations;\r\ncompilation_unit.Rule |=             package_declaration &#43;                                   type_declaration &#43; type_declarations;\r\ncompilation_unit.Rule |=                                                         modifiers &#43; type_declaration &#43; type_declarations;\r\ncompilation_unit.Rule |=                                                                     type_declaration &#43; type_declarations;\r\ncompilation_unit.Rule |= modifiers &#43; package_declaration &#43; import_declarations;\r\ncompilation_unit.Rule |=             package_declaration &#43; import_declarations;\r\ncompilation_unit.Rule |=                                   import_declarations;\r\ncompilation_unit.Rule |= modifiers &#43; package_declaration;\r\ncompilation_unit.Rule |=             package_declaration;\r\n\t\t\t\r\nqualified_name.Rule = MakePlusRule(qualified_name, DOT, identifier);\r\npackage_declaration.Rule = PACKAGE &#43; qualified_name &#43; SEMI;\r\nimport_declarations.Rule = MakePlusRule(import_declarations, import_declaration);\r\nimport_declaration.Rule = normal_import_declaration | static_import_declaration;\r\nnormal_import_declaration.Rule = IMPORT &#43; qualified_name &#43; import_wildcard &#43; SEMI;\r\nstatic_import_declaration.Rule = IMPORT &#43; STATIC &#43; qualified_name &#43; import_wildcard &#43; SEMI;\r\nimport_wildcard.Rule = Empty | (DOT &#43; STAR);\r\ntype_declarations.Rule = MakeStarRule(type_declarations, type_declaration_with_modifiers);\r\ntype_declaration_with_modifiers.Rule = modifiers.Q() &#43; type_declaration;\r\ntype_declaration.Rule = CLASS_TOKEN &#43; identifier &#43; L_BRC &#43; R_BRC;\r\nmodifiers.Rule = MakePlusRule(modifiers, modifier);\r\nmodifier.Rule = ABSTRACT | FINAL | NATIVE | PRIVATE | PROTECTED | PUBLIC | STATIC | STRICTFP | SYNCHRONIZED | TRANSIENT | VOLATILE;\r\n</pre>\r\n</div>\r\n<p>Does this look reasonable to you?</p>\r\n<p>Jere</p>\r\n",
    "PostedDate": "2010-11-24T02:14:27.993-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526413",
    "ThreadId": "235619",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>rivantsov wrote:</strong><br>\r\n<p>The trouble with star lists is that the list element is created as empty list, before the first element is consumed - but this is some technicalities.</p>\r\n</blockquote>\r\n<p>This actually could be the source of all of my conflicts. I have noticed that all of my conflicts have dealt with star lists. Is this something that you can fix?</p>\r\n",
    "PostedDate": "2010-11-24T06:25:50.21-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526485",
    "ThreadId": "235619",
    "Html": "\r\n<p>I suggest an alternative:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> declaration = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;declaration&quot;</span>);\r\n            <span style=\"color:blue\">var</span> declarations = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;declarations&quot;</span>); \r\n            declarations.Rule = MakeStarRule(declarations, declaration); \r\n            declaration.Rule = package_declaration | import_declaration | type_declaration; \r\n\t    compilation_unit.Rule = declarations;\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>this allows arbitrary order of package/import/type declarations in grammar and during parsing; you can simply verify the proper order in code after parsing, walking over the tree</p>\r\n",
    "PostedDate": "2010-11-24T08:11:47.817-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526958",
    "ThreadId": "235619",
    "Html": "\r\n<p>Thanks for the help. &nbsp;I am making progress now. &nbsp;Would you have any interest in including my finished Java grammar with Irony?</p>\r\n<p>Jere</p>\r\n",
    "PostedDate": "2010-11-25T06:43:40.463-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "527005",
    "ThreadId": "235619",
    "Html": "\r\n<p>Absolutely, i can include it in samples with proper credits</p>\r\n<p>Good luck</p>\r\n",
    "PostedDate": "2010-11-25T08:09:54.11-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]