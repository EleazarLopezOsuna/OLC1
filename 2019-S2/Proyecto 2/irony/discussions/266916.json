[
  {
    "Id": "648978",
    "ThreadId": "266916",
    "Html": "\r\n<p>Hi</p>\r\n<p>(Hopefully my last question for a while!)</p>\r\n<p>So I now have a very simple grammar</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'BNF Rules<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rootExpression.Rule = expressionList<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; expressionList.Rule = MakePlusRule(expressionList, comma, expression)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; expression.Rule = term Or binaryExpression Or equalityExpression<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bracketedExpression.Rule = &quot;(&quot; &#43; expression &#43; &quot;)&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; term.Rule = dataitemExpression Or literalExpression Or quotedExpression Or<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; functionExpression Or bracketedExpression<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; literalExpression.Rule = number Or identifier<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; binaryOperator.Rule = ToTerm(&quot;&#43;&quot;) Or &quot;-&quot; Or &quot;/&quot; Or &quot;*&quot; Or &quot;^&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; equalityOperator.Rule = ToTerm(&quot;=&quot;) Or &quot;!=&quot; Or &quot;&lt;&gt;&quot; Or &quot;&gt;=&quot; Or &quot;&lt;=&quot; Or &quot;&gt;&quot; Or &quot;&lt;&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; binaryExpression.Rule = expression &#43; binaryOperator &#43; expression<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; equalityExpression.Rule = expression &#43; equalityOperator &#43; expression<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; functionExpression.Rule = functionNameExpression &#43; &quot;(&quot; &#43; expressionList &#43; &quot;)&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dataitemExpression.Rule = &quot;[&quot; &#43; dataitem &#43; &quot;]&quot; Or dataitem<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; quotedExpression.Rule = quotedLiteral<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; functionNameExpression.Rule = identifier<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Terminal priority<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; identifier.Priority = 10<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dataitem.Priority = 20<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Operator precedence&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(10, &quot;*&quot;, &quot;/&quot;, &quot;%&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(9, &quot;&#43;&quot;, &quot;-&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(8, &quot;=&quot;, &quot;&gt;&quot;, &quot;&lt;&quot;, &quot;&gt;=&quot;, &quot;&lt;=&quot;, &quot;&lt;&gt;&quot;, &quot;!=&quot;, &quot;!&lt;&quot;, &quot;!&gt;&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(7, &quot;^&quot;, &quot;&amp;&quot;, &quot;|&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(6, &quot;NOT&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(5, &quot;AND&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(4, &quot;OR&quot;, &quot;LIKE&quot;, &quot;IN&quot;)<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MarkPunctuation(&quot;(&quot;, &quot;)&quot;, &quot;.&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MarkTransient(term, expression, rootExpression)<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me.Root = rootExpression<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me.LanguageFlags = LanguageFlags.CreateAst</p>\r\n<p>This correctly parses text such as &quot;1,1&quot;, &quot;(1)&quot;, &quot;((1))&quot;, &quot;1,(1&#43;1)&quot;,&quot;Func(1)&quot; etc etc. But I cannot work out how to introduce the ability parse text such as &quot;(1,1)&quot; without it generating ambiguity. So for example if I change the rootExpression to</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rootExpression.Rule = expressionList OR &quot;(&quot; &#43; expressionList &#43; &quot;)&quot;</p>\r\n<p>It generates a shift-reduce conflict</p>\r\n<p>State S37 (Inadequate)<br>\r\n&nbsp; Shift items:<br>\r\n&nbsp;&nbsp;&nbsp; bracketedExpression -&gt; ( expression &middot;) <br>\r\n&nbsp;&nbsp;&nbsp; binaryExpression -&gt; expression &middot;binaryOperator expression\r\n<br>\r\n&nbsp;&nbsp;&nbsp; binaryOperator -&gt; &middot;&#43; <br>\r\n&nbsp;&nbsp;&nbsp; binaryOperator -&gt; &middot;- <br>\r\n&nbsp;&nbsp;&nbsp; binaryOperator -&gt; &middot;/ <br>\r\n&nbsp;&nbsp;&nbsp; binaryOperator -&gt; &middot;* <br>\r\n&nbsp;&nbsp;&nbsp; binaryOperator -&gt; &middot;^ <br>\r\n&nbsp;&nbsp;&nbsp; equalityExpression -&gt; expression &middot;equalityOperator expression\r\n<br>\r\n&nbsp;&nbsp;&nbsp; equalityOperator -&gt; &middot;= <br>\r\n&nbsp;&nbsp;&nbsp; equalityOperator -&gt; &middot;!= <br>\r\n&nbsp;&nbsp;&nbsp; equalityOperator -&gt; &middot;&lt;&gt; <br>\r\n&nbsp;&nbsp;&nbsp; equalityOperator -&gt; &middot;&gt;= <br>\r\n&nbsp;&nbsp;&nbsp; equalityOperator -&gt; &middot;&lt;= <br>\r\n&nbsp;&nbsp;&nbsp; equalityOperator -&gt; &middot;&gt; <br>\r\n&nbsp;&nbsp;&nbsp; equalityOperator -&gt; &middot;&lt; <br>\r\n&nbsp; Reduce items:<br>\r\n&nbsp;&nbsp;&nbsp; expressionList -&gt; expression &middot; [) comma]<br>\r\n&nbsp; Transitions: )-&gt;S45, binaryOperator-&gt;S21, &#43;-&gt;S22, --&gt;S23, /-&gt;S24, *-&gt;S25, ^-&gt;S26, equalityOperator-&gt;S27, =-&gt;S28, !=-&gt;S29, &lt;&gt;-&gt;S30, &gt;=-&gt;S31, &lt;=-&gt;S32, &gt;-&gt;S33, &lt;-&gt;S34</p>\r\n<p>I am assuming some sort of ambiguity with the bracketedExpression as defined in the term rule.</p>\r\n<p>Sorry to ask for further help, but many thx again for any pointers.</p>\r\n<p>Simon</p>\r\n",
    "PostedDate": "2011-07-28T06:59:54.583-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "648984",
    "ThreadId": "266916",
    "Html": "<p>OK. As is the way, as soon as I posted, I worked out what I needed to do, just by enhancing the bracketedExpression.Rule</p>\r\n<p>bracketedExpression.Rule = \"(\" + expressionList + \")\"</p>\r\n<p>Thx again</p>\r\n<p>S</p>",
    "PostedDate": "2011-07-28T07:08:43.99-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]