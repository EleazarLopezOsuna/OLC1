[
  {
    "Id": "685628",
    "ThreadId": "276254",
    "Html": "<p>Hi</p>\n<p>My grammar successfully parses the expressions</p>\n<p>1/1/1970 and '1/1/1970'</p>\n<p>as &lt;dateExpression&gt;</p>\n<p>a) When I am trying to parse</p>\n<p>mydata &lt;= 01/01/1971</p>\n<p>I woulds like it to recognise it as a binary expression of &lt;string, binaryoperator, datetime&gt;. My grammar is parsing it as &lt;string, binaryoperator, binaryexpression&gt; obviously recognising the \"/\" as a binary operator before recognising the text as a date. Here is my grammar</p>\n<div style=\"color: black; background-color: white;\">\n<pre><div style=\"color: black; background-color: white;\"><pre><span style=\"color: green;\">'Terminals</span>\n        <span style=\"color: blue;\">Dim</span> number = <span style=\"color: blue;\">New</span> NumberLiteral(<span style=\"color: #a31515;\">\"number\"</span>)\n        <span style=\"color: blue;\">Dim</span> identifier = <span style=\"color: blue;\">New</span> IdentifierTerminal(<span style=\"color: #a31515;\">\"identifier\"</span>)\n        <span style=\"color: blue;\">Dim</span> quotedLiteral = <span style=\"color: blue;\">New</span> StringLiteral(<span style=\"color: #a31515;\">\"quoted\"</span>, <span style=\"color: #a31515;\">\"'\"</span>, StringOptions.AllowsDoubledQuote)\n        <span style=\"color: blue;\">Dim</span> dateLiteral = <span style=\"color: blue;\">New</span> DateTimeLiteral(<span style=\"color: #a31515;\">\"datetime\"</span>)\n\n        <span style=\"color: blue;\">Dim</span> comma = ToTerm(<span style=\"color: #a31515;\">\",\"</span>, <span style=\"color: #a31515;\">\"comma\"</span>)\n        <span style=\"color: blue;\">Dim</span> dataitem = <span style=\"color: blue;\">New</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"dataitem\"</span>, <span style=\"color: #a31515;\">\"M[1-9][0-9]{0,2}E[1-9][0-9]{0,2}I[1-9][0-9]{0,2}\\b\"</span>)\n        <span style=\"color: blue;\">Dim</span> [<span style=\"color: blue;\">NOT</span>] = ToTerm(<span style=\"color: #a31515;\">\"NOT\"</span>)\n        <span style=\"color: blue;\">Dim</span> [NULL] = ToTerm(<span style=\"color: #a31515;\">\"NULL\"</span>)\n\n        <span style=\"color: green;\">'Non-terminals</span>\n        <span style=\"color: blue;\">Dim</span> rootExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"root\"</span>)\n        <span style=\"color: blue;\">Dim</span> expression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"expression\"</span>)\n        <span style=\"color: blue;\">Dim</span> expressionList = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"expressionList\"</span>, <span style=\"color: blue;\">GetType</span>(ListExpressionNode))\n        <span style=\"color: blue;\">Dim</span> term = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"term\"</span>)\n        <span style=\"color: blue;\">Dim</span> literalExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"literalExpression\"</span>, <span style=\"color: blue;\">GetType</span>(LiteralExpressionNode))\n        <span style=\"color: blue;\">Dim</span> dateExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"dateExpression\"</span>, <span style=\"color: blue;\">GetType</span>(DateExpressionNode))\n        <span style=\"color: blue;\">Dim</span> unaryExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"unaryExpression\"</span>, <span style=\"color: blue;\">GetType</span>(UnaryExpressionNode))\n        <span style=\"color: blue;\">Dim</span> binaryExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"binaryExpression\"</span>, <span style=\"color: blue;\">GetType</span>(BinaryExpressionNode))\n        <span style=\"color: blue;\">Dim</span> booleanExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"booleanExpression\"</span>, <span style=\"color: blue;\">GetType</span>(BooleanExpressionNode))\n        <span style=\"color: blue;\">Dim</span> bracketedExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"bracketedExpression\"</span>, <span style=\"color: blue;\">GetType</span>(BracketedExpressionNode))\n        <span style=\"color: blue;\">Dim</span> functionExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"functionExpression\"</span>, <span style=\"color: blue;\">GetType</span>(FunctionExpressionNode))\n        <span style=\"color: blue;\">Dim</span> unaryOperator = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"unaryOperator\"</span>, <span style=\"color: blue;\">GetType</span>(UnaryOperatorNode))\n        <span style=\"color: blue;\">Dim</span> binaryOperator = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"binaryOperator\"</span>, <span style=\"color: blue;\">GetType</span>(BinaryOperatorNode))\n        <span style=\"color: blue;\">Dim</span> booleanOperator = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"booleanOperator\"</span>, <span style=\"color: blue;\">GetType</span>(BooleanOperatorNode))\n        <span style=\"color: blue;\">Dim</span> dataitemExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"dataitemExpression\"</span>, <span style=\"color: blue;\">GetType</span>(DataItemExpressionNode))\n        <span style=\"color: blue;\">Dim</span> quotedExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"quotedExpression\"</span>, <span style=\"color: blue;\">GetType</span>(QuotedExpressionNode))\n        <span style=\"color: blue;\">Dim</span> functionNameExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"functionNameExpression\"</span>, <span style=\"color: blue;\">GetType</span>(FunctionNameExpressionNode))\n        <span style=\"color: blue;\">Dim</span> equalityExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"equalityExpression\"</span>, <span style=\"color: blue;\">GetType</span>(EqualityExpressionNode))\n        <span style=\"color: blue;\">Dim</span> equalityOperator = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"equalityOperator\"</span>, <span style=\"color: blue;\">GetType</span>(EqualityOperatorNode))\n        <span style=\"color: blue;\">Dim</span> nullOperator = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"nullOperator\"</span>, <span style=\"color: blue;\">GetType</span>(NullOperatorNode))\n        <span style=\"color: blue;\">Dim</span> isOperator = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"isOperator\"</span>, <span style=\"color: blue;\">GetType</span>(IsOperatorNode))\n        <span style=\"color: blue;\">Dim</span> isExpression = <span style=\"color: blue;\">New</span> NonTerminal(<span style=\"color: #a31515;\">\"isExpression\"</span>, <span style=\"color: blue;\">GetType</span>(IsExpressionNode))\n\n        <span style=\"color: green;\">'BNF Rules</span>\n        rootExpression.Rule = expressionList\n        expressionList.Rule = MakePlusRule(expressionList, comma, expression)\n        expression.Rule = term <span style=\"color: blue;\">Or</span>\n                            binaryExpression <span style=\"color: blue;\">Or</span>\n                            booleanExpression <span style=\"color: blue;\">Or</span>\n                            equalityExpression <span style=\"color: blue;\">Or</span>\n                            unaryExpression <span style=\"color: blue;\">Or</span>\n                            isExpression\n        bracketedExpression.Rule = <span style=\"color: #a31515;\">\"(\"</span> + expressionList + <span style=\"color: #a31515;\">\")\"</span>\n        term.Rule = dataitemExpression <span style=\"color: blue;\">Or</span>\n                    literalExpression <span style=\"color: blue;\">Or</span>\n                    dateExpression <span style=\"color: blue;\">Or</span>\n                    quotedExpression <span style=\"color: blue;\">Or</span>\n                    functionExpression <span style=\"color: blue;\">Or</span>\n                    bracketedExpression\n\n        literalExpression.Rule = number <span style=\"color: blue;\">Or</span> identifier\n        binaryOperator.Rule = ToTerm(<span style=\"color: #a31515;\">\"+\"</span>) <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"-\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"*\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"/\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"\\\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"^\"</span>\n        booleanOperator.Rule = ToTerm(<span style=\"color: #a31515;\">\"AND\"</span>) <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"OR\"</span>\n        equalityOperator.Rule = ToTerm(<span style=\"color: #a31515;\">\"=\"</span>) <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"!=\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"&lt;&gt;\"</span> <span style=\"color: blue;\">Or</span>\n                                    <span style=\"color: #a31515;\">\"&gt;=\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"&lt;=\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"&gt;\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"!&gt;\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"&lt;\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"!&lt;\"</span> <span style=\"color: blue;\">Or</span>\n                                    <span style=\"color: #a31515;\">\"LIKE\"</span> <span style=\"color: blue;\">Or</span> [<span style=\"color: blue;\">NOT</span>] + <span style=\"color: #a31515;\">\"LIKE\"</span> <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"IN\"</span> <span style=\"color: blue;\">Or</span> [<span style=\"color: blue;\">NOT</span>] + <span style=\"color: #a31515;\">\"IN\"</span>\n        binaryExpression.Rule = expression + binaryOperator + expression\n        booleanExpression.Rule = expression + booleanOperator + expression\n        equalityExpression.Rule = expression + equalityOperator + expression\n        functionExpression.Rule = functionNameExpression + <span style=\"color: #a31515;\">\"(\"</span> + expressionList + <span style=\"color: #a31515;\">\")\"</span>\n        dataitemExpression.Rule = <span style=\"color: #a31515;\">\"[\"</span> + dataitem + <span style=\"color: #a31515;\">\"]\"</span> <span style=\"color: blue;\">Or</span> dataitem\n        dateExpression.Rule = dateLiteral\n        quotedExpression.Rule = quotedLiteral\n        functionNameExpression.Rule = GetFunctionNames()   <span style=\"color: green;\">'identifier</span>\n        unaryOperator.Rule = ToTerm(<span style=\"color: #a31515;\">\"+\"</span>) <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"-\"</span> <span style=\"color: blue;\">Or</span> [<span style=\"color: blue;\">NOT</span>]\n        unaryExpression.Rule = unaryOperator + expression\n        nullOperator.Rule = [NULL]\n        isOperator.Rule = ToTerm(<span style=\"color: #a31515;\">\"IS\"</span>) <span style=\"color: blue;\">Or</span> <span style=\"color: #a31515;\">\"IS\"</span> + [<span style=\"color: blue;\">NOT</span>]\n        isExpression.Rule = expression + isOperator + nullOperator\n\n        <span style=\"color: green;\">'Terminal priority</span>\n        identifier.Priority = 10\n        dataitem.Priority = 20\n        quotedLiteral.Priority = 30\n        dateLiteral.Priority = 40\n\n        <span style=\"color: green;\">'Operator precedence            </span>\n        RegisterOperators(10, <span style=\"color: #a31515;\">\"*\"</span>, <span style=\"color: #a31515;\">\"/\"</span>, <span style=\"color: #a31515;\">\"\\\"</span>, <span style=\"color: #a31515;\">\"%\"</span>)\n        RegisterOperators(9, <span style=\"color: #a31515;\">\"+\"</span>, <span style=\"color: #a31515;\">\"-\"</span>)\n        RegisterOperators(8, <span style=\"color: #a31515;\">\"=\"</span>, <span style=\"color: #a31515;\">\"&gt;\"</span>, <span style=\"color: #a31515;\">\"&lt;\"</span>, <span style=\"color: #a31515;\">\"&gt;=\"</span>, <span style=\"color: #a31515;\">\"&lt;=\"</span>, <span style=\"color: #a31515;\">\"&lt;&gt;\"</span>, <span style=\"color: #a31515;\">\"!=\"</span>, <span style=\"color: #a31515;\">\"!&lt;\"</span>, <span style=\"color: #a31515;\">\"!&gt;\"</span>)\n        RegisterOperators(7, <span style=\"color: #a31515;\">\"^\"</span>, <span style=\"color: #a31515;\">\"&amp;\"</span>, <span style=\"color: #a31515;\">\"|\"</span>)\n        RegisterOperators(6, <span style=\"color: #a31515;\">\"NOT\"</span>, <span style=\"color: #a31515;\">\"IS\"</span>)\n        RegisterOperators(5, <span style=\"color: #a31515;\">\"AND\"</span>)\n        RegisterOperators(4, <span style=\"color: #a31515;\">\"OR\"</span>, <span style=\"color: #a31515;\">\"LIKE\"</span>, <span style=\"color: #a31515;\">\"IN\"</span>)\n\n        MarkPunctuation(<span style=\"color: #a31515;\">\"(\"</span>, <span style=\"color: #a31515;\">\")\"</span>, <span style=\"color: #a31515;\">\".\"</span>)\n        MarkTransient(term, expression, rootExpression)\n\n        <span style=\"color: blue;\">Me</span>.Root = rootExpression\n        <span style=\"color: blue;\">Me</span>.LanguageFlags = LanguageFlags.CreateAst\n</pre>\n</div>\n<br /></pre>\n</div>\n<p>and here is the DateTimeLiteral</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Class</span> DateTimeLiteral\n        <span style=\"color: blue;\">Inherits</span> Terminal\n\n        <span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Sub</span> <span style=\"color: blue;\">New</span>(name <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>)\n            <span style=\"color: blue;\">MyBase</span>.<span style=\"color: blue;\">New</span>(name)\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Sub</span>\n\n        <span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Overrides</span> <span style=\"color: blue;\">Function</span> TryMatch(context <span style=\"color: blue;\">As</span> Irony.Parsing.ParsingContext, source <span style=\"color: blue;\">As</span> Irony.Parsing.ISourceStream) <span style=\"color: blue;\">As</span> Irony.Parsing.Token\n\n            <span style=\"color: blue;\">If</span> <span style=\"color: blue;\">Not</span> IsValidDate(StripQuotes(source.Text)) <span style=\"color: blue;\">Then</span> <span style=\"color: blue;\">Return</span> <span style=\"color: blue;\">Nothing</span>\n\n            source.PreviewPosition += source.Text.Length\n\n            <span style=\"color: blue;\">Return</span> source.CreateToken(<span style=\"color: blue;\">Me</span>.OutputTerminal)\n\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Function</span>\n\n        <span style=\"color: blue;\">Protected</span> <span style=\"color: blue;\">Overrides</span> <span style=\"color: blue;\">Sub</span> InvokeValidateToken(context <span style=\"color: blue;\">As</span> Irony.Parsing.ParsingContext)        \n\n            <span style=\"color: blue;\">Dim</span> dateValue = StripQuotes(Convert.ToString(context.CurrentToken.Value))\n            <span style=\"color: blue;\">Dim</span> result <span style=\"color: blue;\">As</span> DateTime\n\n            <span style=\"color: blue;\">If</span> IsValidDate(dateValue, result) <span style=\"color: blue;\">Then</span>\n                context.CurrentToken.Value = Convert.ToString(result).Substring(0, dateValue.Length)\n            <span style=\"color: blue;\">Else</span>\n                context.CurrentToken = context.Source.CreateErrorToken(<span style=\"color: #a31515;\">\"{0} is not a valid date-time value\"</span>, dateValue)\n            <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\n\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Sub</span>\n\n        <span style=\"color: blue;\">Private</span> <span style=\"color: blue;\">Overloads</span> <span style=\"color: blue;\">Function</span> IsValidDate(<span style=\"color: blue;\">ByVal</span> value <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>) <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Boolean</span>\n            <span style=\"color: blue;\">Return</span> IsValidDate(value, <span style=\"color: blue;\">Nothing</span>)\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Function</span>\n\n        <span style=\"color: blue;\">Private</span> <span style=\"color: blue;\">Overloads</span> <span style=\"color: blue;\">Function</span> IsValidDate(<span style=\"color: blue;\">ByVal</span> value <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>, <span style=\"color: blue;\">ByRef</span> result <span style=\"color: blue;\">As</span> DateTime) <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Boolean</span>\n            <span style=\"color: blue;\">Return</span> DateTime.TryParse(value, result)\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Function</span>\n\n        <span style=\"color: blue;\">Private</span> <span style=\"color: blue;\">Function</span> StripQuotes(<span style=\"color: blue;\">ByVal</span> value <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>) <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span>\n            <span style=\"color: blue;\">Return</span> value.Replace(<span style=\"color: #a31515;\">\"'\"</span>, <span style=\"color: blue;\">String</span>.Empty)\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Function</span>\n\n    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Class</span>\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>2) If I try and parse</p>\n<p>myfield = '1/1/1971'</p>\n<p>it identifies it as a binary expression of &lt;string, binaryoperator, quotedExpression&gt;.</p>\n<p>I am struggling to understand why since when the date element is parsed on its own it successfully recognises it as a &lt;dateExpression&gt;</p>\n<p>Any pointers would be gratefully received.</p>\n<p>Many thx again</p>\n<p>Simon</p>",
    "PostedDate": "2011-10-18T02:21:38.083-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "685859",
    "ThreadId": "276254",
    "Html": "<p>YOu don't need custom terminal, use QuotedValueLiteral instead, with TypeCode = DAteTime; also you may need to set DAteTimeFormat properly.</p>\r\n<p>On another subject - literalExpression is not valid, get rid of it, merge Number and Identifier into Term.&nbsp;</p>",
    "PostedDate": "2011-10-18T09:37:21.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "686184",
    "ThreadId": "276254",
    "Html": "<p>OK. Thanks very much.</p>\r\n<p>The only problem with using QuotedValueLiteral is that it converts 1/1/1971 to 1/1/1971 00:00:00 and I was hoping to retain the format the user had entered whilst at the same time being able to id the text as a date. Having said that, I now wonder whether it'd be better to I decided to sanitize the input to enforce dates to be enclosed in single quotes or whether just to not bother trying to identify dates and just identify quoted values which can then be handled as dates ot something else when processing the AST.</p>\r\n<p>Wrt literalExpression, I am probably doing it wrong, but I have a custom AST node (admittedly not doing very much) which maps onto that which I am using elsewhere when processing the AST. Should I not be doing that or perhaps it is unnecessary - ie should I be dealing with a different object in the AST?</p>",
    "PostedDate": "2011-10-18T23:27:35.317-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "686449",
    "ThreadId": "276254",
    "Html": "<p>About retaining original text - it is still there, inside Token.Text.&nbsp;</p>\r\n<p>About when to actually parse Dates - it's up to you, both cases would work well - either doing it immediately at parsing/scanning (with QuotedValueLiteral), or later at AST analysis stage. There was a discussion thread before about parsing dates, the problem was to allow users to enter dates in localized formats - find it, it might be interesting for you.&nbsp;</p>\r\n<p>About literalExpression - hard to say, but it looks like you are not doing it correctly. LiteralValueNode is supposed to be attached to Literals (terminals like Number or String), not to NonTerminals.</p>\r\n<p>Roman</p>",
    "PostedDate": "2011-10-19T09:32:30.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "686469",
    "ThreadId": "276254",
    "Html": "<p>Ok. Thx very much again, Roman</p>\n<p>Despite me thinking I would sanitize the data before parsing, you obviously suggest that it can parsed without sanitation. So&nbsp; can I just confirm again, to parse</p>\n<p>a = 1/1/1971</p>\n<p>so that 1/1/1971 is recognised as a date, surely I shouldn't be using the QuotedValueLiteral given that there is no quote? I presumably need to structure the grammar in a particularly way. I'm struggling to see how you would do that such that precedence is given to parsing 1/1/1971 as a date before recognising it as a binary expression.</p>\n<p>Sorry if I'm a bit slow on the uptake!</p>\n<p>Thx again</p>\n<p>Simon</p>",
    "PostedDate": "2011-10-19T10:12:04.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "686504",
    "ThreadId": "276254",
    "Html": "<p>You can try FixedLengthLiteral; or create custom terminal. In both cases you should set higher Priority value on the terminal, so it gets to scan the input first, before the Number literal.&nbsp;</p>",
    "PostedDate": "2011-10-19T11:46:02.87-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "686737",
    "ThreadId": "276254",
    "Html": "<p>Thx once again</p>",
    "PostedDate": "2011-10-20T00:47:02.117-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "829191",
    "ThreadId": "276254",
    "Html": "<p>I have almost identical requirement, I need to have 2012-01-23T09:00:00-08:00 (without quotes) recogized as a datetime literal.</p>\n<p>I have tried&nbsp;FixedLengthLiteral and also looked at creating custom terminal, but failed to make it work due to my poor parse knowledge.</p>\n<p>Is there a sample around that can accomplish this?</p>\n<p>Thanks very much.</p>\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; top: 0px; left: -10000px;\">﻿</div>",
    "PostedDate": "2012-04-26T20:24:00.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]