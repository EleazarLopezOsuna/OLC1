[
  {
    "Id": "895726",
    "ThreadId": "390341",
    "Html": "\r\n<p>I am very new to Irony.&nbsp; Just downloaded it last night and spent about 6 hours figuring out the basics of how it works.&nbsp; It is very cool, as I have struggled the past few years to\r\n<a id=\"_GPLITA_1\" title=\"Powered by Text-Enhance\" style=\"text-decoration:underline\">\r\nwork</a> with BNF in C# and have had to come up with lame XML grammar definitions that I really do not like.&nbsp; It looks like Irony might solve a number of issues that I am having, and have had for many years.&nbsp; I ran into Irony while trying to build\r\n the requirements to add my scanner and parser to a .Net language packaged, and I see that Irony already supports this.&nbsp; Very nice.&nbsp;</p>\r\n<p>Can Irony handle fixed position grammars?&nbsp; Maybe something like...</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    somevar          CS  <span style=\"color:#a31515\">&quot;this is a string constant&quot;</span>\n</pre>\r\n</div>\r\n<p>How can I specifically code for the &quot;C&quot; in a given position, say character position 25 that defines the variable as a constant?&nbsp; My sample is not spaced correctly, but I think you can get the idea.&nbsp; The &quot;C&quot; is optional and might not be there at\r\n all.&nbsp; The &quot;S&quot; would be position 26 and might tell the compiler this is a string.&nbsp; This is a common syntax style for fixed-format languages from the 1970's and 80's.</p>\r\n<p>Here's a VERY simple grammar that I came up with as a test to see if I can setup the BNF for fixed character positions.&nbsp; I had to put a space between the &quot;C&quot; and &quot;S&quot; to get the sample grammar below to work.&nbsp; But that will not work in the long run.&nbsp;\r\n I am not sure exactly why, but I do get a syntax error using the sample line above.&nbsp; I think I am misunderstanding some of the Irony terminal and non-terminal constructs and have something setup wrong here.&nbsp;</p>\r\n<p>But I have no idea how to specific fixed character positions for the &quot;C&quot; and the &quot;S&quot;.&nbsp; Is this possible with Irony?&nbsp; If not, that just means that I have to do the first pass using my existing parser and a second pass can use Irony.&nbsp; That is\r\n not too bad, but I think it would be nice to have a single pass using Irony if it is possible.&nbsp;&nbsp; Maybe dump my scanner and parse and replace it with Irony.&nbsp; That would be VERY nice!</p>\r\n<p>What I cannot figure out is a way to describe the CONSTANT is position 25.&nbsp; Other than that, both of the two version of this (one has been commented) work.&nbsp; If I can just add the position requirement I think Irony can work as a single pass parser\r\n for my compiler.&nbsp; Too bad I did run into this in 2004 when I wrote the compiler! &nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> variable = <span style=\"color:blue\">new</span> IdentifierTerminal(<span style=\"color:#a31515\">&quot;Identifier&quot;</span>);            \n            <span style=\"color:blue\">var</span> stringLiteral = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;STRING&quot;</span>, <span style=\"color:#a31515\">&quot;\\&quot;&quot;</span>, StringOptions.None);\n\n            <span style=\"color:blue\">var</span> PROGRAM = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROGRAM&quot;</span>);\n            <span style=\"color:blue\">var</span> LINE = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;LINE&quot;</span>);\n            <span style=\"color:green\">//var DATATYPE = new NonTerminal(&quot;DATATYPE&quot;);</span>\n            <span style=\"color:green\">//var CONSTANT = new NonTerminal(&quot;LINE&quot;);</span>\n            <span style=\"color:blue\">var</span> DATATYPE = <span style=\"color:blue\">new</span> FixedLengthLiteral(<span style=\"color:#a31515\">&quot;DATATYPE&quot;</span>, 1, TypeCode.String);\n            <span style=\"color:blue\">var</span> CONSTANT = <span style=\"color:blue\">new</span> FixedLengthLiteral(<span style=\"color:#a31515\">&quot;CONSTANT&quot;</span>, 1, TypeCode.String);\n            //var CONSTANT = new RegexLiteral(@&quot;\\C\\c[25]&quot;); <br>\n            <span style=\"color:blue\">this</span>.Root = PROGRAM;\n            PROGRAM.Rule = MakePlusRule(PROGRAM, LINE);\n            <span style=\"color:green\">//DATATYPE.Rule = &quot;s&quot;;</span>\n            <span style=\"color:green\">//CONSTANT.Rule = &quot;c&quot;;</span>\n            LINE.Rule = NewLine | variable &#43; CONSTANT &#43; DATATYPE &#43; stringLiteral;\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Any thoughts or ideas would be much appreciated.</p>\r\n<p>Best regards,</p>\r\n<p>Jon</p>\r\n",
    "PostedDate": "2012-08-05T07:48:02.74-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "895863",
    "ThreadId": "390341",
    "Html": "<p>ok, as far as I understood, a typical line starts with a label (somevar), then at fixed position there is 'line type' indicator like CS, then some expression.&nbsp;</p>\r\n<p>Here's how you do it.&nbsp;</p>\r\n<p>Write your grammar as if there no restrictions on positions. But do one thing: define Label terminal (as IdentifierTerminal) - use it as a special terminal that will match the beginning \"somevar\" labels. Do not use it anywhere else in the grammar, define a different terminal \"Variable\" for identifiers inside expressions.&nbsp;</p>\r\n<p>Define LineType and Line nonterminal :</p>\r\n<p>LineType.Rule = ToTerm(\"S\") | \"C\" | \"D\" .... ;</p>\r\n<p>Line.Rule = label + lineType + someExpr;</p>\r\n<p>Now, the trick to use is to intercept when label terminal is \"scanned\" and do some hand coding.</p>\r\n<p>Hook to 'label.ValidateToken' event. Do the following in the handler:</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre style=\"color: black;\">        <span style=\"color: blue;\">void</span> label_ValidateToken(<span style=\"color: blue;\">object</span> sender, ValidateTokenEventArgs e) {\r\n          <span style=\"color: green;\">//Assuming lineType is at position 25</span>\r\n          <span style=\"color: blue;\">var</span> label = e.Context.CurrentToken;\r\n          <span style=\"color: blue;\">if</span> (label.Location.Column &gt; 0) {\r\n            e.SetError(<span style=\"color: #a31515;\">\"invalid position of label, must start at first column.\"</span>);\r\n            <span style=\"color: blue;\">return</span>; \r\n          }\r\n          <span style=\"color: green;\">// (also check label length, check that there are only spaces until pos 25, etc)</span></pre>\r\n<pre>\r\n          <span style=\"color: green;\">// advance source to linetype position </span>\r\n          <span style=\"color: blue;\">var</span> lineStart = label.Location.Position;\r\n          <span style=\"color: blue;\">var</span> src = e.Context.Source;\r\n          src.Position = lineStart + 25;\r\n          <span style=\"color: green;\">// Read current char</span>\r\n          <span style=\"color: blue;\">var</span> lineTypeStr = src.PreviewChar.ToString();\r\n          <span style=\"color: green;\">//Manually produce lineType token</span>\r\n          <span style=\"color: green;\">// _lineType is class-level field containing line type terminal used in grammar</span>\r\n          Token lineTypeToken = <span style=\"color: blue;\">new</span> Token(_lineType, src.Location, lineTypeStr, lineTypeStr);\r\n          <span style=\"color: green;\">//Pack labelToken and lineTypeToken into Multitoken</span>\r\n          <span style=\"color: blue;\">var</span> multi = <span style=\"color: blue;\">new</span> MultiToken(label, lineTypeToken);\r\n          <span style=\"color: green;\">//Replace current token (label) with multitoken</span>\r\n          e.ReplaceToken(multi);\r\n        }\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Also add the following constructor to MultiToken in Irony core (it's just easier clearer way to create it, I will push this change next time):</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: blue;\">public</span> MultiToken(<span style=\"color: blue;\">params</span> Token[] tokens) : <span style=\"color: blue;\">this</span>(tokens[0].Terminal, tokens[0].Location, <span style=\"color: blue;\">new</span> TokenList()) {\r\n        ChildTokens.AddRange(tokens);\r\n    }\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<p>That should do it. Note I did not test the code, you may need to debug and tweak it. I hope the idea is clear enough</p>\r\n<p>Roman</p>",
    "PostedDate": "2012-08-05T21:28:23.977-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]