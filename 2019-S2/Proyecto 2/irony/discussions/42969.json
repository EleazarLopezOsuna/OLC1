[
  {
    "Id": "142806",
    "ThreadId": "42969",
    "Html": "I'm trying to write a parse for the PILOT programming language.  It's doesn't use delimited string.  For example, for what other languages might write as:<br>\r\n<br>\r\nprint &quot;Hello, &quot; + Name + &quot;!&quot;<br>\r\n<br>\r\nIn PILOT would be :<br>\r\n<br>\r\nT: Hello, $Name !<br>\r\n<br>\r\nEssentially, a string is everything that not something else.   How do I represent that in Irony?<br>\r\n<br>\r\n(I've also planned on a creating parsers for Markdown and Velocity, so this is the third time this issue has come up)<br>\r\n",
    "PostedDate": "2008-12-24T04:19:43.373-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143060",
    "ThreadId": "42969",
    "Html": "You've got quite a language there man. I have no immediate answer. The reason is that scanning in Pilot cannot be clearly separated from parsing. Like some other languages dating back to 1960 and before,  (FORTRAN is another example), it was created without regard to scanner/parser separation, which evolved as compiler architecture later and became standard for later languages. Irony's architecture (like Lex/Yacc and other tools) is based on this separation, so making it work for Pilot would not be straightforward. <br>\r\nIf this is just a test project to try Irony, I would recommend looking at some other language as a target. If this is more serious, let's see if we can do something about it. One thing that would help in this case is to introduce back link from parser to scanner: when scanner selects a list of candidate Terminals to scan the token, it may ask parser to filter it based on current expecting tokens in parser state. I find that this scanner/parser link may be benefitial in other situations, making it easier to write non-conflicting grammars for traditional languages. It is on my to-do list, although not very high in it - there's lot of items before it. Let me know how urgent is this for you. \r\n",
    "PostedDate": "2008-12-26T12:03:58.22-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143325",
    "ThreadId": "42969",
    "Html": "Well, I was using it as a test project, although I was planning on continue the exercise through to IL generation, so I was hoping to start with a simple language.&nbsp; <br>\r\n<br>\r\nLooking at the &quot;Google-like full text search&quot; article, they use an identifier terminal for text.&nbsp; That sort-of worked for me.&nbsp; I'm not sure if it's a complete solution, as I was stopped by another problem (separate thread).<br>\r\n<br>\r\nThe problem with moving onto a different project is that the other two things I'd hoped to use Irony for were parsers for Markdown (http://en.wikipedia.org/wiki/Markdown) and Velocity (http://en.wikipedia.org/wiki/Apache_Velocity), both of which have the same trait.&nbsp; If you are unfamiliar with them, consider how you would write a parser for XML or HTML.<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-12-29T06:38:01.9-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143406",
    "ThreadId": "42969",
    "Html": "About &quot;Google-like search&quot; grammar - I think this is different from your case. In search grammar, every word in search phrase is treated as a separate token that distinguished as a separate argument in final expression. What you need is at certain position to join everything into a single literal string. This &quot;certain position&quot; is identified by parser, why creating literal string is supposed to be done by Scanner, which is normally done before parser. So as a minimum you'll need a custom FreeFormStringTerminal class that would flexibly produce token or return null depending on feedback information from parser state. In general, you can use CompilerContext to set some flag in parser that would be used by this custom terminal as a signal to go and produce token. CompilerContext.Values dictionary is a containter for storing such custom flags. <br>\r\nAbout Markdown and Velocity. Velocity - cannot say much, I think basically implementing language parsing is possible with Irony. More interesting aspect is to support multi-language grammar combinations (HTML + JavaScript, HTML + Velocity), when 2 or more grammars are involved in parsing a single input stream. I was thinking about adding this support in Irony, although have little idea for now how to implement it the best way. Definitely on my list, quite common case. <br>\r\nMarkdown (wiki language) - also very interesting case, but definitely requires some extra work - custom terminal(s) and some extra support in scanner. In fact, i think most of the work would end up in custom terminals. <br>\r\nTo sum it up, all these languages are not typical programming languages for which Irony was architected. But it would be interesting to see how far can we go by tweaking Irony to support these kind of things. This is a good test for tool's flexibility and power. <br>\r\n \r\n",
    "PostedDate": "2008-12-29T15:18:51.567-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]