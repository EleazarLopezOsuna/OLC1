[
  {
    "Id": "952418",
    "ThreadId": "405860",
    "Html": "\r\n<p>I have a grammar that I have simplified down to:</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> [Language(<span style=\"color:#a31515\">&quot;Example&quot;</span>, <span style=\"color:#a31515\">&quot;&quot;</span>, <span style=\"color:#a31515\">&quot;showcase problem with not=&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Example : Irony.Parsing.Grammar\r\n    {\r\n        <span style=\"color:blue\">public</span> Example()\r\n        {\r\n            <span style=\"color:green\">//1. Terminals</span>\r\n            Terminal num = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;number&quot;</span>);\r\n            MarkReservedWords(<span style=\"color:#a31515\">&quot;not&quot;</span>);\r\n\r\n            <span style=\"color:green\">//2. Non-Terminals</span>\r\n            <span style=\"color:blue\">var</span> Expr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;expr&quot;</span>);\r\n            <span style=\"color:blue\">var</span> BinOp = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;binOp&quot;</span>, <span style=\"color:#a31515\">&quot;operator&quot;</span>);\r\n            <span style=\"color:blue\">var</span> unOp = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;unOp&quot;</span>,<span style=\"color:#a31515\">&quot;operator&quot;</span>);\r\n            <span style=\"color:blue\">var</span> BinExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;binExpr&quot;</span>);\r\n            <span style=\"color:blue\">var</span> unExpr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;unExpr&quot;</span>);\r\n            <span style=\"color:blue\">var</span> exitLoop = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;exitLoop&quot;</span>);\r\n            <span style=\"color:blue\">var</span> program = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;program&quot;</span>);\r\n\r\n            <span style=\"color:green\">//3. BNF rules</span>\r\n            \r\n            Expr.Rule = num  | BinExpr | unExpr | <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; Expr &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\r\n            BinOp.Rule = ToTerm(<span style=\"color:#a31515\">&quot;=&quot;</span>) | <span style=\"color:#a31515\">&quot;!=&quot;</span> | <span style=\"color:#a31515\">&quot;not=&quot;</span>;\r\n            BinOp.Precedence = 20;\r\n            unOp.Rule = ToTerm(<span style=\"color:#a31515\">&quot;not&quot;</span>) | <span style=\"color:#a31515\">&quot;!&quot;</span>;\r\n            unOp.Precedence = 10;\r\n            exitLoop.Rule = ToTerm(<span style=\"color:#a31515\">&quot;exit&quot;</span>) &#43; <span style=\"color:#a31515\">&quot;when&quot;</span> &#43; Expr;\r\n            BinExpr.Rule = Expr &#43; BinOp &#43; Expr;\r\n            unExpr.Rule = unOp &#43; Expr;\r\n\r\n            program.Rule = Expr &#43; program | exitLoop &#43; program | Empty;\r\n            <span style=\"color:blue\">this</span>.Root = program;\r\n\r\n            <span style=\"color:green\">//4. Set operator precendence and associativity</span>\r\n            RegisterOperators(20, Associativity.Left, <span style=\"color:#a31515\">&quot;=&quot;</span>, <span style=\"color:#a31515\">&quot;not=&quot;</span>, <span style=\"color:#a31515\">&quot;!=&quot;</span>);\r\n            RegisterOperators(10, Associativity.Left, <span style=\"color:#a31515\">&quot;not&quot;</span>,<span style=\"color:#a31515\">&quot;!&quot;</span>);\r\n\r\n\r\n            <span style=\"color:green\">//5. Register Parenthesis as punctuation symbols so they will not appear in the syntax tree</span>\r\n            MarkReservedWords(<span style=\"color:#a31515\">&quot;not&quot;</span>);\r\n            MarkPunctuation(<span style=\"color:#a31515\">&quot;(&quot;</span>, <span style=\"color:#a31515\">&quot;)&quot;</span>, <span style=\"color:#a31515\">&quot;,&quot;</span>);\r\n            RegisterBracePair(<span style=\"color:#a31515\">&quot;(&quot;</span>, <span style=\"color:#a31515\">&quot;)&quot;</span>);\r\n            MarkTransient(Expr, BinOp, unOp);\r\n\r\n            <span style=\"color:blue\">this</span>.LanguageFlags = LanguageFlags.NewLineBeforeEOF;\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>And I'm having problems with the following 4 lines of code (which should parse to identical AST's)</p>\r\n<p></p>\r\n<pre>exit when (3 not= 4)\r\nexit when (3 != 4)\r\nexit when 3 != 4\r\nexit when 3 not= 4</pre>\r\n<p></p>\r\n<p>The first 3 work correctly (with the expression being the entire 3 != 4 part), but the last one fails. The parser seems to get to the 3, then see the &quot;not&quot; next, and assume that that is a new line (if expressions can't stand alone on a line, then\r\n this doesn't happen, and it parses correctly). &nbsp;I'm wondering why the parser is treating &quot;not&quot; and &quot;!&quot; differently, as they have the exact same rules (the MarkReservedWords for not doesn't make a difference if I don't include it, it's\r\n really there just in case).</p>\r\n",
    "PostedDate": "2012-12-06T10:41:50.783-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "952469",
    "ThreadId": "405860",
    "Html": "\r\n<p>Try MarkReservedWords(&quot;not=&quot;)</p>\r\n<p>Another thing - seems there must be Grammar errors (shift reduce conflicts) - are there any?</p>\r\n",
    "PostedDate": "2012-12-06T11:44:21.973-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "952501",
    "ThreadId": "405860",
    "Html": "\r\n<p>The MarkReservedWords works beautifully, thank you very much. There were no grammar errors, but I'm going to be honest and tell you that I don't really know where to begin to fix shift-reduce conflicts. Is there any material you could point me to to help?</p>\r\n",
    "PostedDate": "2012-12-06T12:49:46.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "952505",
    "ThreadId": "405860",
    "Html": "\r\n<p>well, Google... Or read in any compiler book, with chapter about LR/LALR parsing. I would recommend either Dragon book (Aho, Ullman), or\r\n<a href=\"http://dickgrune.com/Books/PTAPG_2nd_Edition/\">Parsing Techniques</a>.</p>\r\n<p>To fix conflicts: it is either slight refactoring of the grammar rules (getting rid of optional elements and explicitly listing alternatives), or adding hints (PreferShiftHere()) to force certain actions (like typical 'dangling else' conflict). See sample\r\n grammars.&nbsp;</p>\r\n",
    "PostedDate": "2012-12-06T12:59:48.713-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]