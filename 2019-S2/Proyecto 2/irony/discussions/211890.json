[
  {
    "Id": "440258",
    "ThreadId": "211890",
    "Html": "<p>Hi,</p>\r\n<p>I try to create a simple language format like this :</p>\r\n<p>V 1 2 3 4</p>\r\n<p>V 4 5 6</p>\r\n<p>V 7 8 9 10</p>\r\n<p>The problem that I have is that I have 3 or 4 numeric values, I have try something like this but it doesn't work :</p>\r\n<p>var scene = new NonTerminal(&quot;scene&quot;, typeof(StatementListNode));<br>var statement = new NonTerminal(&quot;statement&quot;, typeof(StatementListNode));<br>var vertices = new NonTerminal(&quot;Vertices&quot;);<br>var vertex = new NonTerminal(&quot;vertex&quot;, typeof(Nodes.VertexNode));</p>\r\n<p>vertex.Rule = &quot;v&quot; + number + number + number | number;<br>vertices.Rule = MakeStarRule(vertices, vertex);<br>statement.Rule = vertices + statement + NewLine;<br>scene.Rule = vertices + NewLineStar;</p>\r\n<p>It creates 2 vertex (&quot;v&quot;) when I have 4 numerics</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-05-07T01:49:44.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440294",
    "ThreadId": "211890",
    "Html": "<p>Also,</p>\r\n<p><span style=\"text-decoration:underline\"><strong>Here is a test file :</strong></span></p>\r\n<p># test scene<br><br>o testscene<br><br>v 1 2 3<br>v 1 2 3 4<br>v 1 2 3 4<br>v 1 2 3 4</p>\r\n<p>I don't know how to add a 'textual' value like 'testscene'. I have try this , but the grammar explorer does not display any error !!!</p>\r\n<p>&nbsp;</p>\r\n<p>#region Terminals<br><br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var textual = new StringLiteral(&quot;textual&quot;, &quot;&quot;);<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var comment = new CommentTerminal(&quot;comment&quot;, &quot;#&quot;, &quot;\\n&quot;, &quot;\\r&quot;);<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var number = new NumberLiteral(&quot;number&quot;, NumberOptions.AllowSign | NumberOptions.AllowStartEndDot);<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var scene = new NonTerminal(&quot;scene&quot;, typeof(StatementListNode));<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var sceneLine = new NonTerminal(&quot;scene line&quot;);<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var statement = new NonTerminal(&quot;statement&quot;, typeof(StatementListNode));<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var objectName = new NonTerminal(&quot;object name&quot;);<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var vertices = new NonTerminal(&quot;vertices&quot;);<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var vertex = new NonTerminal(&quot;vertex&quot;, typeof(Nodes.VertexNode));<br><br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#endregion<br><br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#region Rules<br><br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;vertex.Rule = &quot;v&quot; + number + number + number | number;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;vertices.Rule = MakeStarRule(vertices, vertex);<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;objectName.Rule = &quot;o&quot; + textual;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;statement.Rule = objectName | vertices;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sceneLine.Rule = statement + NewLine;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scene.Rule = MakeStarRule(scene, sceneLine);<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;NonGrammarTerminals.Add(comment);<br><br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#endregion<br><br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#region Config<br><br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Root = scene;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LanguageFlags = LanguageFlags.CreateAst | LanguageFlags.NewLineBeforeEOF;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MarkTransient(statement, sceneLine, objectName);<br><br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#endregion</p>",
    "PostedDate": "2010-05-07T04:07:07.417-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440313",
    "ThreadId": "211890",
    "Html": "<p>Hey Viewon,</p>\r\n<p>&nbsp;</p>\r\n<p>One issue I see is in the line</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>vertex.Rule = <span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number | number;\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>I really think you meant something more like this</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>vertex.Rule = <span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number + (number | empty);\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>-MindCore</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-05-07T05:39:59.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440315",
    "ThreadId": "211890",
    "Html": "<p>Thanks,</p>\r\n<p>It is interesting :-)</p>\r\n<p>But I still have the same problem... when I use the grammar explorer and test a file... nothing happend, no result, no tree etc ... :-(</p>",
    "PostedDate": "2010-05-07T05:44:49.467-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440317",
    "ThreadId": "211890",
    "Html": "<p>Sorry</p>\r\n<p>I got 2 errors :-P</p>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Warning: AstNodeType or AstNodeCreator is not set on non-terminals: vertices Unnamed0.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Transient non-terminal must have zero or one non-punctuation child nodes; non-terminals: object name.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-05-07T05:45:58.913-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440323",
    "ThreadId": "211890",
    "Html": "<p>The first Warning is saying that you don't have an AstNode set for the vertices non-terminal, so when Irony goes to build the Ast Tree, it doesn't know what to do.&nbsp; The line it is referring to is this line:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> vertices = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertices&quot;</span>);\r\n</pre>\r\n</div>\r\n</p>\r\n<p>It needs to have an AstNode paramter defined like such:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> vertices = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertices&quot;</span>, <span style=\"color:blue\">typeof</span>(Nodes.VerticesNode));\r\n</pre>\r\n</div>\r\n</p>\r\n<p>It appears you have a custome AstNode type for your Vertex, so you may need one for your Vertices branch node.&nbsp; Check out the IfNode for an example.</p>\r\n<p>&nbsp;</p>\r\n<p>And the second error is in reference to your MarkTransient step:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>MarkTransient(statement, sceneLine, objectName);\r\n</pre>\r\n</div>\r\n</p>\r\n<p>My guess is that the Non-terminal it's complaining about is the sceneLine. You actually may be able to eliminate this node as follows:</p>\r\n<p>1. Change the scene Rule (i.e. BnfExpression) to the following:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>scene.Rule = MakeStarRule(scene, statement, NewLine);</pre>\r\n</div>\r\n</p>\r\n<p>2. Remove the sceneLine Non-terminal and also remove it from the MarkTransient method call.</p>\r\n<p>Since you are ultimately appending statements using a NewLine, I don't think the additional sceneLine Non-Terminal is needed.</p>\r\n<p>&nbsp;</p>\r\n<p>-MindCore</p>",
    "PostedDate": "2010-05-07T06:23:01.69-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440335",
    "ThreadId": "211890",
    "Html": "<p>Thanks,</p>\r\n<p>&nbsp;</p>\r\n<p>But now in the grammar explorer I got the following error message :</p>\r\n<p>System.IndexOutOfRangeException: Index was outside the bounds of the array.&nbsp;&nbsp; at Irony.Parsing.StringLiteral.Init(GrammarData grammarData) in D:\\Temp\\irony_51617\\irony-51617\\Irony\\Parsing\\Terminals\\StringLiteral.cs:line 133&nbsp;&nbsp; at Irony.Parsing.Construction.GrammarDataBuilder.InitTermLists() in D:\\Temp\\irony_51617\\irony-51617\\Irony\\Parsing\\Data\\Construction\\GrammarDataBuilder.cs:line 155&nbsp;&nbsp; at Irony.Parsing.Construction.GrammarDataBuilder.Build() in D:\\Temp\\irony_51617\\irony-51617\\Irony\\Parsing\\Data\\Construction\\GrammarDataBuilder.cs:line 37&nbsp;&nbsp; at Irony.Parsing.Construction.LanguageDataBuilder.Build() in D:\\Temp\\irony_51617\\irony-51617\\Irony\\Parsing\\Data\\Construction\\LanguageDataBuilder.cs:line 37&nbsp;&nbsp; at Irony.Parsing.LanguageData.ConstructAll() in D:\\Temp\\irony_51617\\irony-51617\\Irony\\Parsing\\Data\\LanguageData.cs:line 38&nbsp;&nbsp; at Irony.Parsing.LanguageData..ctor(Grammar grammar) in D:\\Temp\\irony_51617\\irony-51617\\Irony\\Parsing\\Data\\LanguageData.cs:line 34&nbsp;&nbsp; at Irony.GrammarExplorer.fmGrammarExplorer.CreateParser() in D:\\Temp\\irony_51617\\irony-51617\\Irony.GrammarExplorer\\fmGrammarExplorer.cs:line 308&nbsp;&nbsp; at Irony.GrammarExplorer.fmGrammarExplorer.cboGrammars_SelectedIndexChanged(Object sender, EventArgs e) in D:\\Temp\\irony_51617\\irony-51617\\Irony.GrammarExplorer\\fmGrammarExplorer.cs:line 497&nbsp;&nbsp; at System.Windows.Forms.ComboBox.OnSelectedIndexChanged(EventArgs e)&nbsp;&nbsp; at System.Windows.Forms.ComboBox.WmReflectCommand(Message&amp; m)&nbsp;&nbsp; at System.Windows.Forms.ComboBox.WndProc(Message&amp; m)&nbsp;&nbsp; at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m)&nbsp;&nbsp; at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m)&nbsp;&nbsp; at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)</p>\r\n<p>Here is my new code/bnf :</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">#region</span> Terminals\r\n\r\n            <span style=\"color:blue\">var</span> textual = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;textual&quot;</span>, <span style=\"color:#a31515\">&quot;&quot;</span>);\r\n            <span style=\"color:blue\">var</span> comment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;comment&quot;</span>, <span style=\"color:#a31515\">&quot;#&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>, <span style=\"color:#a31515\">&quot;\\r&quot;</span>);\r\n\r\n            <span style=\"color:blue\">var</span> number = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;number&quot;</span>, NumberOptions.AllowSign | NumberOptions.AllowStartEndDot);\r\n            <span style=\"color:green\">//number.AddPrefix(&quot;0x&quot;, NumberFlags.Hex);</span>\r\n            <span style=\"color:green\">//number.AddSuffixCodes(&quot;f&quot;, TypeCode.Single);</span>\r\n\r\n            <span style=\"color:blue\">var</span> scene = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;scene&quot;</span>, <span style=\"color:blue\">typeof</span>(StatementListNode));\r\n            <span style=\"color:blue\">var</span> sceneLine = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;scene line&quot;</span>);\r\n\r\n            <span style=\"color:blue\">var</span> statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;statement&quot;</span>, <span style=\"color:blue\">typeof</span>(StatementListNode));\r\n\r\n            <span style=\"color:blue\">var</span> objectName = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;object name&quot;</span>);\r\n\r\n            <span style=\"color:blue\">var</span> vertices = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertices&quot;</span>);\r\n            <span style=\"color:blue\">var</span> vertex = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertex&quot;</span>);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Rules\r\n\r\n            vertex.Rule = <span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number + (number | Empty);\r\n            vertices.Rule = MakeStarRule(vertices, vertex);\r\n\r\n            objectName.Rule = <span style=\"color:#a31515\">&quot;o&quot;</span> + textual;\r\n\r\n            statement.Rule = objectName | vertices;\r\n\r\n            sceneLine.Rule = statement + NewLine;\r\n            scene.Rule = MakeStarRule(scene, sceneLine, NewLine);\r\n\r\n            NonGrammarTerminals.Add(comment);\r\n            NonGrammarTerminals.Add(NewLine);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Config\r\n\r\n            Root = scene;\r\n            LanguageFlags = LanguageFlags.CreateAst | LanguageFlags.NewLineBeforeEOF;\r\n            MarkTransient(statement, objectName);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-05-07T06:51:42.737-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440442",
    "ThreadId": "211890",
    "Html": "<p>This error message is caused by the line</p>\r\n<pre><span></span><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\">var</span> textual = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;textual&quot;</span>, <span style=\"color:#a31515\">&quot;&quot;</span>);\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre><br></pre>\r\n<pre>The string literal is for text that has at least a start symbol. &nbsp;</pre>\r\n<pre>Using an empty string will cause the parser to capture everything as one long string and blow up.</pre>\r\n<pre><br></pre>\r\n<pre>Try changing this line to</pre>\r\n<pre><pre><span><br></span></pre>\r\n<pre><span></span><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\">var</span> textual = <span style=\"color:blue\">new</span> IdentifierTerminal(<span style=\"color:#a31515\">&quot;textual&quot;</span>);\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre><br></pre>\r\n<pre><br></pre>\r\n<pre>-MindCore</pre>\r\n<br></pre>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-05-07T11:27:23.077-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440995",
    "ThreadId": "211890",
    "Html": "<p>Thanks,</p>\r\n<p>Unfortunately I have some errors now :</p>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Warning: AstNodeType or AstNodeCreator is not set on non-terminals: scene line vertices vertex Unnamed0.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Transient non-terminal must have zero or one non-punctuation child nodes; non-terminals: object name.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>Regards</p>",
    "PostedDate": "2010-05-10T01:59:14.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "441052",
    "ThreadId": "211890",
    "Html": "<p>It appears you missed the second part to my second post.&nbsp; The Non-Terminal sceneLine is no longer needed as the NewLine suffix is now handled by the MakeStarRule in the scene Non-terminal.</p>\r\n<p>Change the following:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>sceneLine.Rule = statement + NewLine;\r\nscene.Rule = MakeStarRule(scene, sceneLine, NewLine);\r\n<br></pre>\r\n</div>\r\n<p>to:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>scene.Rule = MakeStarRule(scene, statement, NewLine);</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>-MindCore</p>",
    "PostedDate": "2010-05-10T06:12:12.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "441071",
    "ThreadId": "211890",
    "Html": "<p>Thanks,</p>\r\n<p>But I still have the same error :-&lt;</p>",
    "PostedDate": "2010-05-10T06:56:48.717-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "441534",
    "ThreadId": "211890",
    "Html": "<p>Hey,</p>\r\n<p>I've seen that error before (about AstNodeType or AstNodeCreator not set on &quot;Unnamed0&quot;), and I believe the culprit is:</p>\r\n<p>vertex.Rule = <span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number + (number | Empty);</p>\r\n<p>(Disclaimer: I have not run the grammar code, in part or in whole, but I had a similar issue, and it looks like the same problem)</p>\r\n<p>The problem is that this line of the grammar is not in BNF.&nbsp; To be in BNF, it must be an &quot;OR'd&quot; list of &quot;PLUS&quot; rules.&nbsp; Here, we have a &quot;PLUS&quot; list of &quot;OR&quot; rules.&nbsp; Internally, when the PLUS ('+') operator encounters an &quot;OR&quot; expression (in this case: &quot;(number | Empty)&quot;), it wraps the expression in an unnamed non-terminal (&quot;Unnamed0&quot; -- If you had more than one, it would start generating &quot;Unnamed1&quot;, &quot;Unnamed2&quot;, etc.).&nbsp; This unnamed non-terminal has no AstNodeType or AstNodeCreator set to it, hence the warning message!</p>\r\n<p>To fix it, you must make sure that ALL of your rules are in BNF when creating an AST (BNF doesn't matter if you're NOT creating an AST)!&nbsp; So, try re-writing the rule as:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>vertex.Rule = (<span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number) | (<span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number + number)\r\n</pre>\r\n</div>\r\n<p>OR:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> optionalVertexParam = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;OptionalVertexParam&quot;</span>);\r\nvertex.Rule = <span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number + optionalVertexParam;\r\noptionalVertexParam.Rule = Empty | number;\r\nMarkTransient(optionalVertexParam);\r\n</pre>\r\n</div>\r\n<p>The key to the second form is that you are explicitly creating the &quot;unnamed&quot; non-terminal, but are marking it transient!&nbsp; (So it won't show up in the parse tree -- and therefore does not need an AstNodeType or AstNodeCreator!)</p>\r\n<p>For some more information, check out: <a href=\"http://irony.codeplex.com/Thread/View.aspx?ThreadId=80451\">http://irony.codeplex.com/Thread/View.aspx?ThreadId=80451</a>.&nbsp; Roman explains why&nbsp;validation allows&nbsp;non-BNF rules in his 2nd point in the last post.</p>\r\n<p>Hope that helps!</p>\r\n<p>Brian</p>",
    "PostedDate": "2010-05-11T08:11:47.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "441931",
    "ThreadId": "211890",
    "Html": "<p>Thanks,</p>\r\n<p>I have try your proposal, but still have the same error message :-(</p>\r\n<p>&nbsp;</p>\r\n<p>Here is my grammar code :</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> Irony;\r\n<span style=\"color:blue\">using</span> Irony.Ast;\r\n<span style=\"color:blue\">using</span> Irony.Parsing;\r\n\r\n<span style=\"color:blue\">namespace</span> ASEngine.FilesFormats.Wavefront\r\n{\r\n\r\n    [Language(<span style=\"color:#a31515\">&quot;Wavefront Obj file parser&quot;</span>, <span style=\"color:#a31515\">&quot;1.0&quot;</span>, <span style=\"color:#a31515\">&quot;OBJ scene file&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">sealed</span> <span style=\"color:blue\">class</span> ObjGrammar : Grammar\r\n    {\r\n        <span style=\"color:blue\">public</span> ObjGrammar()\r\n            : <span style=\"color:blue\">base</span>(<span style=\"color:blue\">true</span>)\r\n        {\r\n\r\n            <span style=\"color:blue\">#region</span> Terminals\r\n\r\n            <span style=\"color:blue\">var</span> textual = <span style=\"color:blue\">new</span> IdentifierTerminal(<span style=\"color:#a31515\">&quot;textual&quot;</span>);\r\n            <span style=\"color:blue\">var</span> comment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;comment&quot;</span>, <span style=\"color:#a31515\">&quot;#&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>, <span style=\"color:#a31515\">&quot;\\r&quot;</span>);\r\n\r\n            <span style=\"color:blue\">var</span> number = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;number&quot;</span>, NumberOptions.AllowSign | NumberOptions.AllowStartEndDot);\r\n            <span style=\"color:green\">//number.AddPrefix(&quot;0x&quot;, NumberFlags.Hex);</span>\r\n            <span style=\"color:green\">//number.AddSuffixCodes(&quot;f&quot;, TypeCode.Single);</span>\r\n\r\n            <span style=\"color:blue\">var</span> scene = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;scene&quot;</span>, <span style=\"color:blue\">typeof</span>(StatementListNode));\r\n\r\n            <span style=\"color:blue\">var</span> statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;statement&quot;</span>, <span style=\"color:blue\">typeof</span>(StatementListNode));\r\n\r\n            <span style=\"color:blue\">var</span> objectName = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;object name&quot;</span>);\r\n\r\n            <span style=\"color:blue\">var</span> vertices = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertices&quot;</span>);\r\n            <span style=\"color:blue\">var</span> vertex = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertex&quot;</span>);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Rules\r\n\r\n            <span style=\"color:green\">//vertex.Rule = &quot;v&quot; + number + number + number + (number | Empty);</span>\r\n            vertex.Rule = (<span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number) | (<span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number + number);\r\n            vertices.Rule = MakeStarRule(vertices, vertex);\r\n\r\n            objectName.Rule = <span style=\"color:#a31515\">&quot;o&quot;</span> + textual;\r\n\r\n            statement.Rule = objectName | vertices;\r\n\r\n            scene.Rule = MakeStarRule(scene, statement, NewLine);\r\n\r\n            NonGrammarTerminals.Add(comment);\r\n            NonGrammarTerminals.Add(NewLine);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Config\r\n\r\n            Root = scene;\r\n            LanguageFlags = LanguageFlags.CreateAst | LanguageFlags.NewLineBeforeEOF;\r\n            MarkTransient(statement, objectName);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-05-12T02:41:19.787-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442132",
    "ThreadId": "211890",
    "Html": "<p>Ok, I just ran it in the GrammarExplorer and I'm seeing the following warnings / errors:</p>\r\n<p>1) Warning: AstNodeType or AstNodeCreator is not set on non-terminals: vertices vertex.</p>\r\n<p>2) Error: Transient non-terminal must have zero or one non-punctuation child nodes; non-terminals: object name.</p>\r\n<p>When creating an AST, all Non-Terminals that are not marked as punctuation or transient <span style=\"text-decoration:underline\">must</span> have an AstNodeType or AstNodeCreator set.&nbsp; The easiest way to do this is as Mindcore had suggested, and pass it into the constructor of the non-terminal.&nbsp; If you do as Mindcore has suggested earlier in the thread:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> vertices = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertices&quot;</span>, <span style=\"color:blue\">typeof</span>(Nodes.VerticesNode));\r\n<span style=\"color:blue\">var</span> vertex = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertex&quot;</span>, <span style=\"color:blue\">typeof</span>(Nodes.VertexNode));\r\n</pre>\r\n</div>\r\n<p>then that should get rid of warning #1.&nbsp; Of course, you will need to create a new class &quot;Nodes.VerticesNode&quot; that derives from &quot;AstNode&quot; that will process the list of vertices.&nbsp; For example, the &quot;VertexNode&quot; class could read in a definition of a vertex and create some sort of Vertex object instance out of it and place it on the evaluation stack.&nbsp; The &quot;VerticesNode&quot; class would go through all of it's child nodes (the &quot;VertexNode&quot;s), and evaluate each one and pop all of the Vertex objects off of the evaluation stack, and save them somewhere.&nbsp; You could &quot;save&quot; them by placing them into a List&lt;Vertex&gt;, and place that back on the evaluation stack (or save it to some larger &quot;Scene&quot; object, etc.).&nbsp; Later, when parsing the face definitions, you will have this list handy and can index into it.</p>\r\n<p>As for the error #2, it's refering to this rule:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>objectName.Rule = <span style=\"color:#a31515\">&quot;o&quot;</span> + textual;\r\n</pre>\r\n</div>\r\n<p>What this error is saying is that you have marked &quot;objectName&quot; as &quot;transient&quot; (meaning it won't show up in the parse tree), but it contains more than one non-punctuation nodes (in this case, &quot;o&quot; and &quot;textual&quot;).&nbsp; Since this rule specifies that the following vertices / etc. belong to the named object (specified by the identifier &quot;textual&quot;), you probably don't want to ignore this piece of data.&nbsp; That is, &quot;objectName&quot; should <span style=\"text-decoration:underline\">not</span> be marked as &quot;transient&quot;.&nbsp; Like mentioned above, once you remove it from the call to &quot;MakeTransient&quot;:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>MakeTransient(statement);\r\n</pre>\r\n</div>\r\n<p>then you will also need to pass in some AstNode type to the objectName's constructor:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:green\">// Note: it is much easier to debug grammars if the names of non-terminals contain no spaces</span>\r\n<span style=\"color:blue\">var</span> objectName = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;objectName&quot;</span>, <span style=\"color:blue\">typeof</span>(Nodes.ObjectNameNode));\r\n</pre>\r\n</div>\r\n<p>As for the implementation of ObjectNameNode, it might do something like create a new &quot;SceneObject&quot; instance that you will be saving the list of vertices / vertex-normals / faces / curves / etc. to as they get parsed.</p>\r\n<p>Brian</p>",
    "PostedDate": "2010-05-12T09:27:21.993-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442744",
    "ThreadId": "211890",
    "Html": "<p>Thanks for your help,</p>\r\n<p>&nbsp;</p>\r\n<p>Now it compiles, but when I test it I got the following error :﻿&nbsp;Syntax error, expected: [line break]</p>\r\n<p><strong><span style=\"text-decoration:underline\">Here is my test file :</span></strong></p>\r\n<p>\r\n<pre># test scene\r\n\r\no testscene\r\n\r\nv 1 2 3\r\nv 1 2 3 4\r\nv 1 2 3 4\r\nv 1 2 3 4</pre>\r\n</p>\r\n<p><strong><span style=\"text-decoration:underline\">Here is my code :</span></strong></p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">#region</span> Terminals\r\n\r\n            <span style=\"color:blue\">var</span> textual = <span style=\"color:blue\">new</span> IdentifierTerminal(<span style=\"color:#a31515\">&quot;textual&quot;</span>);\r\n            <span style=\"color:blue\">var</span> comment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;comment&quot;</span>, <span style=\"color:#a31515\">&quot;#&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>, <span style=\"color:#a31515\">&quot;\\r&quot;</span>);\r\n\r\n            <span style=\"color:blue\">var</span> number = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;number&quot;</span>, NumberOptions.AllowSign | NumberOptions.AllowStartEndDot);\r\n            <span style=\"color:green\">//number.AddPrefix(&quot;0x&quot;, NumberFlags.Hex);</span>\r\n            <span style=\"color:green\">//number.AddSuffixCodes(&quot;f&quot;, TypeCode.Single);</span>\r\n\r\n            <span style=\"color:blue\">var</span> scene = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;scene&quot;</span>, <span style=\"color:blue\">typeof</span>(StatementListNode));\r\n\r\n            <span style=\"color:blue\">var</span> statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;statement&quot;</span>, <span style=\"color:blue\">typeof</span>(StatementListNode));\r\n\r\n            <span style=\"color:blue\">var</span> objectName = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;object name&quot;</span>, <span style=\"color:blue\">typeof</span>(Nodes.ObjectNameNode));\r\n\r\n            <span style=\"color:blue\">var</span> vertices = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertices&quot;</span>, <span style=\"color:blue\">typeof</span>(Nodes.VerticesNode));\r\n            <span style=\"color:blue\">var</span> vertex = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertex&quot;</span>, <span style=\"color:blue\">typeof</span>(Nodes.VertexNode));\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Rules\r\n\r\n            <span style=\"color:green\">//vertex.Rule = &quot;v&quot; + number + number + number + (number | Empty);</span>\r\n            vertex.Rule = (<span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number); <span style=\"color:green\">// | (&quot;v&quot; + number + number + number + number);</span>\r\n            vertices.Rule = MakeStarRule(vertices, vertex);\r\n\r\n            objectName.Rule = <span style=\"color:#a31515\">&quot;o&quot;</span> + textual;\r\n\r\n            statement.Rule = objectName | vertices;\r\n\r\n            scene.Rule = MakeStarRule(scene, statement, NewLine);\r\n\r\n            NonGrammarTerminals.Add(comment);\r\n            NonGrammarTerminals.Add(NewLine);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Config\r\n\r\n            Root = scene;\r\n\r\n            <span style=\"color:green\">// automatically add NewLine before EOF so that our BNF rules work correctly </span>\r\n            <span style=\"color:green\">// when there's no final line break in source</span>\r\n            LanguageFlags = LanguageFlags.CreateAst | LanguageFlags.NewLineBeforeEOF;\r\n            MarkTransient(statement);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-05-13T23:53:47.73-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442929",
    "ThreadId": "211890",
    "Html": "<p>Just looking at it,&nbsp;I think there are two problems with the grammar.&nbsp; I'm guessing&nbsp;one problem is that you are marking the NewLine terminal as a non-grammar terminal:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>NonGrammarTerminals.Add(NewLine);\r\n</pre>\r\n</div>\r\n<p>If you go to the definition of &quot;NonGrammarTerminals&quot; (in Grammar.cs), it has the following comment:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:green\">//Terminals not present in grammar expressions and not reachable from the Root</span>\r\n<span style=\"color:green\">// (Comment terminal is usually one of them)</span>\r\n<span style=\"color:green\">// Tokens produced by these terminals will be ignored by parser input.</span>\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">readonly</span> TerminalSet NonGrammarTerminals = <span style=\"color:blue\">new</span> TerminalSet();\r\n</pre>\r\n</div>\r\n<p>What this means is that if you mark something as a &quot;non-grammar terminal&quot; then the parser will ignore the fact that this terminal ever existed.&nbsp; For example, comment terminals are listed as non-grammar terminals since they are purely human-readable documentation and there is no code to produce from them.&nbsp; Source code will work with or without the presence of comments since the comments are ignored by the parser.</p>\r\n<p>When you mark the NewLine terminal as a non-grammar terminal, your input of:</p>\r\n<p># test scene</p>\r\n<p>o testscene</p>\r\n<p>v 1 2 3<br>v 1 2 3 4<br>v 1 2 3 4<br>v 1 2 3 4</p>\r\n<p>will look like:</p>\r\n<p># test scene o testscene v 1 2 3 v 1 2 3 4 v 1 2 3 4 v 1 2 3 4</p>\r\n<p>to the parser (because the NewLine is ignored).&nbsp; The syntax error that you get says that it was expecting to find a line break, but didn't find one.&nbsp; It never will find a line break as the line breaks are being ignored.&nbsp; To fix this, just remove the line:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>NonGrammarTerminals.Add(NewLine)\r\n</pre>\r\n</div>\r\n<p><strong>As for the other problem</strong>, I believe it is the following line:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>scene.Rule = MakeStarRule(scene, statement, NewLine);\r\n</pre>\r\n</div>\r\n<p>The function header for MakeStarRule is:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> BnfExpression MakeStarRule(NonTerminal listNonTerminal, BnfTerm delimiter, BnfTerm listMember)\r\n</pre>\r\n</div>\r\n<p>I believe you have the delimiter and listMember arguments backwards when you call this.&nbsp; It makes more sense to have the &quot;NewLine&quot;s separate &quot;statement&quot;s rather than &quot;statement&quot;s separating &quot;NewLine&quot;s.&nbsp; Simple fix:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>scene.Rule = MakeStarRule(scene, NewLine, statement);\r\n</pre>\r\n</div>\r\n<p>&nbsp;Brian</p>",
    "PostedDate": "2010-05-14T07:57:48.737-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442941",
    "ThreadId": "211890",
    "Html": "<p>Very interesting,</p>\r\n<p>&nbsp;</p>\r\n<p>But I still have some errors :&nbsp;</p>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>\r\n<p>Failed to create AST node for non-terminal [vertex], error: Index was out of range. Must be non-negative and less than the size of the collection.<br>Parameter name: index</p>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>\r\n<p>Failed to create AST node for non-terminal [vertex], error: Index was out of range. Must be non-negative and less than the size of the collection.<br>Parameter name: index</p>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Syntax error, expected: v [line break]</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>&nbsp;</p>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-05-14T08:13:15.133-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442946",
    "ThreadId": "211890",
    "Html": "<p>Ah, there's another problem.&nbsp; The first line of your input is a comment, and your terminal for comments (&quot;comment&quot;) is not included in any of the production rules reachable from the root.&nbsp; Try adding it to the statement rule:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>statement.Rule = objectName | vertices | comment;\r\n</pre>\r\n</div>\r\n<p>As for the errors about creating AST nodes for non-terminal [vertex], it means that your constructor / Init code for your &quot;Nodes.VertexNode&quot; class threw an exception.&nbsp; Perhaps you tried to access the 4th (optional) number without checking to see if it exists first?</p>\r\n<p>Brian</p>",
    "PostedDate": "2010-05-14T08:25:18.09-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442957",
    "ThreadId": "211890",
    "Html": "<p>Thanks,</p>\r\n<p>&nbsp;</p>\r\n<p><strong>I still have the following &quot;Grammar errors&quot; :</strong></p>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>\r\n<p>Reduce-reduce conflict. State S0, lookaheads: EOF. Selected reduce on first production in conflict set.</p>\r\n<p><strong>And also the following error at test :</strong></p>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Syntax error, expected: v [line break]</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>&nbsp;</p>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>﻿Thanks</p>",
    "PostedDate": "2010-05-14T08:54:35.01-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "444436",
    "ThreadId": "211890",
    "Html": "Please repost your grammar after all updates",
    "PostedDate": "2010-05-18T10:15:20.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "444714",
    "ThreadId": "211890",
    "Html": "<p>Thanks,</p>\r\n<p>&nbsp;</p>\r\n<p>Here is my updated version :</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>    [Language(<span style=\"color:#a31515\">&quot;Wavefront Obj file parser&quot;</span>, <span style=\"color:#a31515\">&quot;1.0&quot;</span>, <span style=\"color:#a31515\">&quot;OBJ scene file&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">sealed</span> <span style=\"color:blue\">class</span> ObjGrammar : Grammar\r\n    {\r\n        <span style=\"color:blue\">public</span> ObjGrammar()\r\n            : <span style=\"color:blue\">base</span>(<span style=\"color:blue\">true</span>)\r\n        {\r\n\r\n            <span style=\"color:blue\">#region</span> Terminals\r\n\r\n            <span style=\"color:blue\">var</span> textual = <span style=\"color:blue\">new</span> IdentifierTerminal(<span style=\"color:#a31515\">&quot;textual&quot;</span>);\r\n            <span style=\"color:blue\">var</span> comment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;comment&quot;</span>, <span style=\"color:#a31515\">&quot;#&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>, <span style=\"color:#a31515\">&quot;\\r&quot;</span>);\r\n\r\n            <span style=\"color:blue\">var</span> number = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;number&quot;</span>, NumberOptions.AllowSign | NumberOptions.AllowStartEndDot);\r\n            <span style=\"color:green\">//number.AddPrefix(&quot;0x&quot;, NumberFlags.Hex);</span>\r\n            <span style=\"color:green\">//number.AddSuffixCodes(&quot;f&quot;, TypeCode.Single);</span>\r\n\r\n            <span style=\"color:blue\">var</span> scene = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;scene&quot;</span>, <span style=\"color:blue\">typeof</span>(StatementListNode));\r\n\r\n            <span style=\"color:blue\">var</span> statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;statement&quot;</span>, <span style=\"color:blue\">typeof</span>(StatementListNode));\r\n\r\n            <span style=\"color:blue\">var</span> objectName = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;object name&quot;</span>, <span style=\"color:blue\">typeof</span>(Nodes.ObjectNameNode));\r\n\r\n            <span style=\"color:blue\">var</span> vertices = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertices&quot;</span>, <span style=\"color:blue\">typeof</span>(Nodes.VerticesNode));\r\n            <span style=\"color:blue\">var</span> vertex = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;vertex&quot;</span>, <span style=\"color:blue\">typeof</span>(Nodes.VertexNode));\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Rules\r\n\r\n            <span style=\"color:green\">//vertex.Rule = &quot;v&quot; + number + number + number + (number | Empty);</span>\r\n            vertex.Rule = (<span style=\"color:#a31515\">&quot;v&quot;</span> + number + number + number); <span style=\"color:green\">// | (&quot;v&quot; + number + number + number + number);</span>\r\n            vertices.Rule = MakeStarRule(vertices, vertex);\r\n\r\n            objectName.Rule = <span style=\"color:#a31515\">&quot;o&quot;</span> + textual;\r\n\r\n            statement.Rule = objectName | vertices | comment;\r\n\r\n            scene.Rule = MakeStarRule(scene, NewLine, statement);\r\n\r\n            NonGrammarTerminals.Add(comment);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n            <span style=\"color:blue\">#region</span> Config\r\n\r\n            Root = scene;\r\n\r\n            <span style=\"color:green\">// automatically add NewLine before EOF so that our BNF rules work correctly </span>\r\n            <span style=\"color:green\">// when there's no final line break in source</span>\r\n            LanguageFlags = LanguageFlags.CreateAst | LanguageFlags.NewLineBeforeEOF;\r\n            MarkTransient(statement);\r\n\r\n            <span style=\"color:blue\">#endregion</span>\r\n\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-05-18T23:36:12.993-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "446763",
    "ThreadId": "211890",
    "Html": "(Sorry, codeplex seems to be going nuts - it removes linebreaks when I save the post)\r\n\r\n\r\n\r\nSorry for a long time to reply. Here it is:\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing Irony.Parsing;\r\nusing Irony.Ast; \r\n\r\nnamespace Irony.Samples{\r\n\r\n    [Language(&quot;Wavefront Obj file parser&quot;, &quot;1.0&quot;, &quot;OBJ scene file&quot;)]\r\n    public sealed class ObjGrammar : Grammar\r\n    {\r\n        public ObjGrammar()      : base(true)\r\n        {\r\n\r\n            #region Terminals\r\n\r\n            var textual = new IdentifierTerminal(&quot;textual&quot;);\r\n            var comment = new CommentTerminal(&quot;comment&quot;, &quot;#&quot;, &quot;\\n&quot;, &quot;\\r&quot;);\r\n\r\n            var number = new NumberLiteral(&quot;number&quot;, NumberOptions.AllowSign | NumberOptions.AllowStartEndDot);\r\n            //number.AddPrefix(&quot;0x&quot;, NumberFlags.Hex);\r\n            //number.AddSuffixCodes(&quot;f&quot;, TypeCode.Single);\r\n\r\n            var opt_number = new NonTerminal(&quot;opt_number&quot;, typeof(AstNode));\r\n            var scene = new NonTerminal(&quot;scene&quot;, typeof(StatementListNode));\r\n\r\n            var statement = new NonTerminal(&quot;statement&quot;, typeof(StatementListNode));\r\n\r\n            var objectName = new NonTerminal(&quot;object name&quot;, typeof(AstNode));\r\n\r\n            var vertices = new NonTerminal(&quot;vertices&quot;, typeof(AstNode));\r\n            var vertex = new NonTerminal(&quot;vertex&quot;, typeof(AstNode));\r\n\r\n            #endregion\r\n\r\n            #region Rules\r\n\r\n            //vertex.Rule = &quot;v&quot; + number + number + number + (number | Empty);\r\n            vertex.Rule = &quot;v&quot; + number + number + number + opt_number; // | (&quot;v&quot; + number + number + number + number);\r\n            opt_number.Rule = number | Empty;\r\n            vertices.Rule = MakePlusRule(vertices, vertex);\r\n\r\n            objectName.Rule = &quot;o&quot; + textual;\r\n\r\n            statement.Rule = objectName | vertices | comment | Empty;\r\n\r\n            scene.Rule = MakePlusRule(scene, NewLine, statement);\r\n\r\n            NonGrammarTerminals.Add(comment);\r\n\r\n            #endregion\r\n\r\n            #region Config\r\n\r\n            Root = scene;\r\n\r\n            // automatically add NewLine before EOF so that our BNF rules work correctly \r\n            // when there's no final line break in source\r\n            LanguageFlags = LanguageFlags.CreateAst | LanguageFlags.NewLineBeforeEOF;\r\n            MarkTransient(statement, opt_number);\r\n\r\n            #endregion\r\n\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nNote I replaced some node type references with AstNode - I don't have your custom nodes. I changed some star-lists to plus lists, added optional number non-term, and made some elements optional (with &quot;| Empty&quot;). No conflicts, compiles your sample OK\r\nRoman ",
    "PostedDate": "2010-05-24T11:26:00.893-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "446984",
    "ThreadId": "211890",
    "Html": "<p>Thanks a lot,</p>\r\n<p>It works fine now :-)</p>\r\n<p>It will be great if some 'documentation' will be available... Irony is a great library but difficult to use for someone without deep knowledge.</p>\r\n<p>At least, it will be fine to have class documentation... before each class like 'NonTerminal, IdentifierTerminal,...' explaining how and when to use it.<br>Of course, more tutorials, samples etc... will be great too :-)</p>\r\n<p>Congratulation for this library</p>",
    "PostedDate": "2010-05-25T02:02:44.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "447038",
    "ThreadId": "211890",
    "Html": "<p>Hi,</p>\r\n<p>I have another problem :</p>\r\n<p>By example, I must parse the following line :</p>\r\n<p>f 0/1/1 0/2/2</p>\r\n<p>where the &quot;/?&quot; are optional... so I have try with this code... but it doesn't account the &quot;/&quot; character ?</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> faces = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;faces&quot;</span>, <span style=\"color:blue\">typeof</span>(AstNode));\r\n            <span style=\"color:blue\">var</span> faceVertices = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;faceVertices&quot;</span>, <span style=\"color:blue\">typeof</span>(AstNode));\r\n            <span style=\"color:blue\">var</span> faceVertice = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;faceVertice&quot;</span>, <span style=\"color:blue\">typeof</span>(AstNode));\r\n\r\n            <span style=\"color:blue\">var</span> opt_vt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;opt_vt&quot;</span>, <span style=\"color:blue\">typeof</span>(AstNode));\r\n            <span style=\"color:green\">//opt_vt.Rule = (&quot;/&quot; + (number | Empty)) | Empty;</span>\r\n            opt_vt.Rule = (<span style=\"color:#a31515\">&quot;/&quot;</span> + number) | Empty;\r\n\r\n            faceVertice.Rule = number + opt_vt;\r\n            faceVertices.Rule = MakePlusRule(faceVertices, faceVertice);\r\n            faces.Rule = <span style=\"color:#a31515\">&quot;f&quot;</span> + faceVertices;\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-05-25T04:57:41.057-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "447039",
    "ThreadId": "211890",
    "Html": "<p>Hum,</p>\r\n<p>&nbsp;</p>\r\n<p>I'm not clear,</p>\r\n<p>by example for the following line :</p>\r\n<p>&quot;f 1/9 2 3 4&quot;</p>\r\n<p>&quot;/9&quot; is an opt_vt : ok</p>\r\n<p>but for the second &quot;faceVertice&quot;, I have &quot;9&quot; and not &quot;2&quot;... because 9 is part of &quot;/9&quot; !!</p>",
    "PostedDate": "2010-05-25T05:05:20.15-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "447041",
    "ThreadId": "211890",
    "Html": "<p>In fact I should be able to parse the following :</p>\r\n<p>f 1 2 3 4<br>f 1/9/2 2/4/5 3/6/8<br>f 1//2 2//5</p>\r\n<p>I have try with this code without success :</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> faces = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;faces&quot;</span>, <span style=\"color:blue\">typeof</span>(AstNode));\r\n            <span style=\"color:blue\">var</span> faceVertices = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;faceVertices&quot;</span>, <span style=\"color:blue\">typeof</span>(AstNode));\r\n            <span style=\"color:blue\">var</span> faceVertice = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;faceVertice&quot;</span>, <span style=\"color:blue\">typeof</span>(AstNode));\r\n\r\n            <span style=\"color:blue\">var</span> opt_vt = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;opt_vt&quot;</span>, <span style=\"color:blue\">typeof</span>(AstNode));\r\n            opt_vt.Rule = (<span style=\"color:#a31515\">&quot;/&quot;</span> + (number | Empty)) | Empty;\r\n            <span style=\"color:green\">//opt_vt.Rule = (&quot;/&quot; + number) | Empty;</span>\r\n\r\n            <span style=\"color:blue\">var</span> opt_vn = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;opt_vn&quot;</span>, <span style=\"color:blue\">typeof</span>(AstNode));\r\n            opt_vn.Rule = (<span style=\"color:#a31515\">&quot;/&quot;</span> + (number | Empty)) | Empty;\r\n\r\n            faceVertice.Rule = number + opt_vt + opt_vn;\r\n            faceVertices.Rule = MakePlusRule(faceVertices, faceVertice);\r\n            faces.Rule = <span style=\"color:#a31515\">&quot;f&quot;</span> + faceVertices;\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;Do you have any idea to solve this ?</p>",
    "PostedDate": "2010-05-25T05:11:58.837-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "448259",
    "ThreadId": "211890",
    "Html": "<p>opt_vt and opt_vn seem to be identical - what's the point?</p>\r\n<p>I think you should define the &quot;1/2/3...&quot; sequence as simply a list of numbers with &quot;/&quot; as a separator, using MakePlusRule&nbsp;</p>",
    "PostedDate": "2010-05-27T09:28:26.243-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "448263",
    "ThreadId": "211890",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>rivantsov wrote:</strong><br>\r\n<p>opt_vt and opt_vn seem to be identical - what's the point?</p>\r\n<p>I think you should define the &quot;1/2/3...&quot; sequence as simply a list of numbers with &quot;/&quot; as a separator, using MakePlusRule&nbsp;</p>\r\n</blockquote>\r\n<p>&nbsp;The problem with making it a &quot;plus&quot; rule is that &quot;1/2/3/4/5/6/7/8/9/10&quot; is not valid.&nbsp; In WaveFront OBJ files, the faces are defined as a list of v/vt/vn triplets (where v is the index of the geometric vertex, vt is the texture vertex, and vn is the vertex normal -- all of these values are defined higher up in the file format in the vertices section).</p>\r\n<p>Here's the entire spec: <a href=\"http://www.martinreddy.net/gfx/3d/OBJ.spec\">http://www.martinreddy.net/gfx/3d/OBJ.spec</a></p>\r\n<p>It's been a few years since I had my last graphics class.&nbsp; :)</p>\r\n<p>Brian</p>",
    "PostedDate": "2010-05-27T09:35:03.967-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "448747",
    "ThreadId": "211890",
    "Html": "<p>It seems that the most complicated part about the face definitions is that they must all be consistent within a line, and that there should not be any space between the numbers and the slashes within a triplet.&nbsp; Also, there must be at least three vertices (or vertex triplets) listed to compose a face (but can be as many as the OBJ file writer desires).</p>\r\n<p>By &quot;consistent within a line&quot;, I mean the following are valid:<br>f&nbsp;1 2 3 4 5 6 7 8 9 10 11 12 13<br>f 1/1/1 2/2/2 3/3/3 4/4/4 5/5/5<br>f 1//1 2//2 3//3 4//4<br>f 1// 2// 3//<br>f 1/1/ 2/2/ 3/3/ 4/4/</p>\r\n<p>And the following are <strong>not</strong> valid:<br>f 1 2/2/2 3/3/3<br>f 1/1/1 2//2 3//3<br>f 1//1 2/2/ 3//</p>\r\n<p>You can accomplish the line-consistency by either:<br>1) Allow any vertex or vertex triplet in the list, but enforce consistency through post-parsing validation<br>Pros: Much cleaner set of grammar rules<br>Cons: Hides the need for line-consistency somewhere other than the grammar (probably AstNode initialization code)<br>or<br>2) Define a set of complex grammar rules to enforce the consistency<br>Pros: Consistency demand is obvious<br>Cons: Requires <em>many</em> more grammar rules than #1.</p>\r\n<p>I would probably go with #1...</p>\r\n<p>Brian</p>",
    "PostedDate": "2010-05-28T09:13:03.747-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]