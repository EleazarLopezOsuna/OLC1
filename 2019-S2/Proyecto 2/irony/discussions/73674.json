[
  {
    "Id": "251885",
    "ThreadId": "73674",
    "Html": "<p>Wow, I just wanted to say how awesome Irony is!! I spent&nbsp;less than an&nbsp;hour and I already have a working prototype of an expression compiler that creates a LINQ expression tree out of the Irony parse tree.</p>\r\n<p>Here's the rough code:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq.Expressions;\r\n<span style=\"color:Blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:Blue\">using</span> Irony.Parsing;\r\n<span style=\"color:Blue\">using</span> Irony.Samples;\r\n\r\n<span style=\"color:Blue\">namespace</span> Irony.Silverlight.Test\r\n{\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">partial</span> <span style=\"color:Blue\">class</span> MainPage : UserControl\r\n    {\r\n        <span style=\"color:Blue\">public</span> MainPage()\r\n        {\r\n            InitializeComponent();\r\n            Init();\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> Init()\r\n        {\r\n            Grammar g = <span style=\"color:Blue\">new</span> ExpressionEvaluatorGrammar();\r\n            Parser p = <span style=\"color:Blue\">new</span> Parser(g);\r\n            ParseTree ast = p.Parse(<span style=\"color:#A31515\">&quot;2 * x + 1&quot;</span>);\r\n\r\n            ExpressionTreeBuilder builder = <span style=\"color:Blue\">new</span> ExpressionTreeBuilder();\r\n            Expression&lt;Func&lt;<span style=\"color:Blue\">double</span>, <span style=\"color:Blue\">double</span>&gt;&gt; expression = builder.CreateFunction(ast.Root);\r\n            Func&lt;<span style=\"color:Blue\">double</span>, <span style=\"color:Blue\">double</span>&gt; function = expression.Compile();\r\n            <span style=\"color:Blue\">var</span> result = function(4);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> ExpressionTreeBuilder\r\n    {\r\n        <span style=\"color:Blue\">public</span> ExpressionTreeBuilder()\r\n        {\r\n            Binder = <span style=\"color:Blue\">new</span> Binder();\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> Binder Binder { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\r\n        <span style=\"color:Blue\">public</span> Expression&lt;Func&lt;<span style=\"color:Blue\">double</span>, <span style=\"color:Blue\">double</span>&gt;&gt; CreateFunction(ParseTreeNode root)\r\n        {\r\n            ParameterExpression parameter = Expression.Parameter(<span style=\"color:Blue\">typeof</span>(<span style=\"color:Blue\">double</span>), <span style=\"color:#A31515\">&quot;x&quot;</span>);\r\n            Binder.RegisterParameter(parameter);\r\n            Expression body = CreateExpression(root);\r\n            <span style=\"color:Blue\">var</span> result = Expression.Lambda&lt;Func&lt;<span style=\"color:Blue\">double</span>, <span style=\"color:Blue\">double</span>&gt;&gt;(body, parameter);\r\n            <span style=\"color:Blue\">return</span> result;\r\n        }\r\n\r\n        Expression CreateExpression(ParseTreeNode root)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (root.Term.Name == <span style=\"color:#A31515\">&quot;BinExpr&quot;</span>)\r\n            {\r\n                <span style=\"color:Blue\">return</span> CreateBinaryExpression(root);\r\n            }\r\n\r\n            <span style=\"color:Blue\">if</span> (root.Term.Name == <span style=\"color:#A31515\">&quot;identifier&quot;</span>)\r\n            {\r\n                <span style=\"color:Blue\">return</span> Binder.Resolve(root.Token.Text);\r\n            }\r\n\r\n            <span style=\"color:Blue\">if</span> (root.Term.Name == <span style=\"color:#A31515\">&quot;number&quot;</span>)\r\n            {\r\n                <span style=\"color:Blue\">return</span> CreateLiteralExpression(Convert.ToDouble(root.Token.Value));\r\n            }\r\n\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n        }\r\n\r\n        Expression CreateLiteralExpression(<span style=\"color:Blue\">double</span> arg)\r\n        {\r\n            <span style=\"color:Blue\">return</span> Expression.Constant(arg);\r\n        }\r\n\r\n        Expression CreateBinaryExpression(ParseTreeNode node)\r\n        {\r\n            Expression left = CreateExpression(node.ChildNodes[0]);\r\n            Expression right = CreateExpression(node.ChildNodes[2]);\r\n\r\n            <span style=\"color:Blue\">switch</span> (node.ChildNodes[1].Term.Name)\r\n            {\r\n                <span style=\"color:Blue\">case</span> <span style=\"color:#A31515\">&quot;+&quot;</span>:\r\n                    <span style=\"color:Blue\">return</span> Expression.Add(left, right);\r\n                <span style=\"color:Blue\">case</span> <span style=\"color:#A31515\">&quot;-&quot;</span>:\r\n                    <span style=\"color:Blue\">return</span> Expression.Subtract(left, right);\r\n                <span style=\"color:Blue\">case</span> <span style=\"color:#A31515\">&quot;*&quot;</span>:\r\n                    <span style=\"color:Blue\">return</span> Expression.Multiply(left, right);\r\n                <span style=\"color:Blue\">case</span> <span style=\"color:#A31515\">&quot;/&quot;</span>:\r\n                    <span style=\"color:Blue\">return</span> Expression.Divide(left, right);\r\n                <span style=\"color:Blue\">case</span> <span style=\"color:#A31515\">&quot;^&quot;</span>:\r\n                    <span style=\"color:Blue\">return</span> Expression.Power(left, right);\r\n            }\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> Binder\r\n    {\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> RegisterParameter(ParameterExpression parameter)\r\n        {\r\n            parameters.Add(parameter.Name, parameter);\r\n        }\r\n\r\n        ParameterExpression ResolveParameter(<span style=\"color:Blue\">string</span> parameterName)\r\n        {\r\n            ParameterExpression parameter;\r\n            <span style=\"color:Blue\">if</span> (parameters.TryGetValue(parameterName, <span style=\"color:Blue\">out</span> parameter))\r\n            {\r\n                <span style=\"color:Blue\">return</span> parameter;\r\n            }\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n        }\r\n\r\n        Dictionary&lt;<span style=\"color:Blue\">string</span>, ParameterExpression&gt; parameters = <span style=\"color:Blue\">new</span> Dictionary&lt;<span style=\"color:Blue\">string</span>, ParameterExpression&gt;();\r\n\r\n        <span style=\"color:Blue\">public</span> Expression Resolve(<span style=\"color:Blue\">string</span> identifier)\r\n        {\r\n            <span style=\"color:Blue\">var</span> parameter = ResolveParameter(identifier);\r\n            <span style=\"color:Blue\">if</span> (parameter != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                <span style=\"color:Blue\">return</span> parameter;\r\n            }\r\n\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>",
    "PostedDate": "2009-10-31T01:00:39.39-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]