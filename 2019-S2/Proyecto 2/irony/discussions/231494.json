[
  {
    "Id": "509402",
    "ThreadId": "231494",
    "Html": "<p>Hi folks,<br><br>I'm using the SearchGrammar.cs from the examples for a FTS application.</p>\r\n<p>I want to change the syntax to only identify the &quot;<strong>-&quot; binary operator</strong> if its <strong>NOT </strong>followed by a whitespace.</p>\r\n<p>Example:<br>1. word1 - word2&nbsp;</p>\r\n<p>Should generate ((WORD1) AND (WORD2)) , <strong>&quot;-&quot; was removed because there is a white space after the operator</strong>.</p>\r\n<p>2. word1 -word2&nbsp;</p>\r\n<p>Should generate ((WORD1) AND NOT (WORD2)) , <strong>&quot;-&quot; was removed and replaced by AND NOT.</strong><br><br>Thanks!</p>",
    "PostedDate": "2010-10-19T07:33:28.87-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510057",
    "ThreadId": "231494",
    "Html": "<p>You need to set a flag on &quot;-&quot; term that would allow alpha-numeric to follow without space:</p>\r\n<p><span style=\"color:#1f497d\">var minus = ToTerm(&ldquo;-&rdquo;);</span></p>\r\n<p><span style=\"color:#1f497d\">minus.AllowAlphaAfterKeyword = true;</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#1f497d\">That would allow it to parse. Later, in conversion phase, you can analyze the positions of minus and following word, and detect if there was a space between or not.&nbsp;</span></p>\r\n<p><span style=\"color:#1f497d\"><br></span></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-20T10:33:49.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510073",
    "ThreadId": "231494",
    "Html": "<p>Hi rivanstov,</p>\r\n<p>Thanks for the answer.</p>\r\n<p>I think i found a different solution</p>\r\n<p>I added another binary operator&nbsp;&quot;- &quot; , that includes a whitespace in it.</p>\r\n<p>So now i have two operators working , one triggers when there is a space and the other when there is no space.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> SearchGrammer {\r\n.....\r\nBinaryOp.Rule = ImpliedAnd | <span style=\"color:#a31515\">&quot;and&quot;</span> | <span style=\"color:#a31515\">&quot;&amp;&quot;</span> | <span style=\"color:#a31515\">&quot;-&quot;</span> | <span style=\"color:#a31515\">&quot;or&quot;</span> | <span style=\"color:#a31515\">&quot;|&quot;</span> | <span style=\"color:#a31515\">&quot;- &quot;</span>; \r\n.....\r\n}\r\n\r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">string</span> ConvertQuery(ParseTreeNode node, TermType type)\r\n{\r\n....\r\n<span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;BinaryExpression&quot;</span>:\r\n                    <span style=\"color:blue\">string</span> opSym = <span style=\"color:blue\">string</span>.Empty;\r\n                    <span style=\"color:blue\">string</span> op = node.ChildNodes[1].FindTokenAndGetText().ToLower();\r\n                    <span style=\"color:blue\">string</span> sqlOp = <span style=\"color:#a31515\">&quot;&quot;</span>;\r\n                    <span style=\"color:blue\">switch</span> (op)\r\n                    {\r\n                        <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;&quot;</span>:\r\n                        <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;&amp;&quot;</span>:\r\n                        <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;and&quot;</span>:\r\n                            sqlOp = <span style=\"color:#a31515\">&quot; AND &quot;</span>;\r\n                            type = TermType.Inflectional;\r\n                            <span style=\"color:blue\">break</span>;\r\n                        <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;-&quot;</span>:\r\n                            sqlOp = <span style=\"color:#a31515\">&quot; AND NOT &quot;</span>;\r\n                            <span style=\"color:blue\">break</span>;\r\n                        <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;|&quot;</span>:\r\n                        <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;or&quot;</span>:\r\n                            sqlOp = <span style=\"color:#a31515\">&quot; OR &quot;</span>;\r\n                            <span style=\"color:blue\">break</span>;\r\n                        <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;- &quot;</span>: \r\n                            sqlOp = <span style=\"color:#a31515\">&quot; AND &quot;</span>;\r\n                            <span style=\"color:blue\">break</span>;\r\n                    }<span style=\"color:green\">//switch</span>\r\n....</pre>\r\n<pre>}</pre>\r\n<pre><br></pre>\r\n<pre><strong>I'm not sure if i did it in the correct way , but i didn't really understand how to do it in the way you suggested.</strong></pre>\r\n<pre><strong>It would be great if you could post a bit more detailed explanation or code sample.</strong></pre>\r\n<pre><strong>thanks!</strong></pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-20T11:03:09.723-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510740",
    "ThreadId": "231494",
    "Html": "<p>your solution seem ok, even simpler than mine. So don't worry, you're on the right path</p>\r\n<p>Roman</p>",
    "PostedDate": "2010-10-21T13:38:26.61-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]