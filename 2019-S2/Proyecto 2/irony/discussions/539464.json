[
  {
    "Id": "1224391",
    "ThreadId": "539464",
    "Html": "Hello. I have been messing with Irony for a little while and I managed to define my language's grammar.<br />\n<br />\nIt seems to work nicely. Generating ParseTree takes literally 20ms at lowest point. I have kept the grammar pretty simple(no semantic considerations). I integrated it with VisualStudio and it works.<br />\n<br />\n<br />\nNow I have that part down, however I am now ready to move in to semantic analysis. I want to do this analysis in VisualStudio.<br />\n<br />\n1) I want to see if the declared identifiers are valid(scope analysis)<br />\n2) I want to see if declarations and their types match(type analysis)<br />\n3) Are flow-control statements being used in correct places? (You can use &quot;continue&quot; only in for() statement.<br />\n4) And more fun stuff.<br />\n<br />\nThis is what I thought:<br />\n<br />\nIn languageService ParseRequest.Check I construct ParseTree on keystroke(which is fast - 20ms at worst). If there are NO errors, I build AST tree and start analysing that.<br />\n<br />\nThere is only one problem: AST tree generation takes literally 8 seconds on my powerful machine(170 lines of DSL code).<br />\n<br />\nI have attached my non-terminals:<br />\n<pre><code>            #region NonTerminals.\n\n            var binaryOperators = new NonTerminal(&quot;binary-operators&quot;); // transient\n            var unaryOperators = new NonTerminal(&quot;unary-operators&quot;); // transient\n\n            var statements = new NonTerminal(&quot;statements&quot;, typeof(StatementsNode));\n            var statement = new NonTerminal(&quot;statement&quot;); // transient\n\n            var functionCall = new NonTerminal(&quot;function-call&quot;, typeof(FunctionCallNode));\n\n            var declaration = new NonTerminal(&quot;declaration&quot;); // transient\n\n            var simpleDeclaration = new NonTerminal(&quot;simple-declaration&quot;, typeof(DeclarationNode));\n            var simpleAssignment = new NonTerminal(&quot;simple-assignment&quot;, typeof(AssignmentNode));\n\n            var arguments = new NonTerminal(&quot;arguments&quot;, typeof(ArgumentsNode));\n\n            var variableType = new NonTerminal(&quot;variable-type&quot;, typeof(TypeIndicatorNode));\n\n            var expression = new NonTerminal(&quot;expression&quot;); // transient\n            var binaryExpression = new NonTerminal(&quot;binary-expression&quot;, typeof(BinaryExpressionNode));\n            var unaryExpression = new NonTerminal(&quot;unary-expression&quot;, typeof(UnaryExpressionNode));\n\n            var braceBlock = new NonTerminal(&quot;brace-block&quot;); // transient\n            var parenExprBlock = new NonTerminal(&quot;parenheised-expression-block&quot;); // transient\n\n            var ifStatement = new NonTerminal(&quot;if-statement&quot;, typeof(IfNode));\n            var forStatement = new NonTerminal(&quot;for-statement&quot;, typeof(ForNode));\n            var whileStatement = new NonTerminal(&quot;while-statement&quot;, typeof(WhileNode));\n            var doStatement = new NonTerminal(&quot;do-statement&quot;, typeof(DoNode));\n            var switchStatement = new NonTerminal(&quot;switch-statement&quot;, typeof(SwitchNode));\n            var flowControlStatement = new NonTerminal(&quot;flow-control-statement&quot;, typeof(FlowControlNode));\n\n            var caseBlocks = new NonTerminal(&quot;case-blocks&quot;, typeof(CaseBlocksNode));\n            var caseBlock = new NonTerminal(&quot;case-block&quot;, typeof(CaseBlock));\n\n            var optionalBraceBlock = new NonTerminal(&quot;optional-brace-block&quot;); // transient\n            var optionalIfBraceBlock = new NonTerminal(&quot;optional-if-brace-block&quot;); // transient\n\n            var variableIdentifier = new NonTerminal(&quot;variable-identifier&quot;, typeof(VariableNode));\n\n            #endregion\n</code></pre>\n\nI don't do anything in my *Nodes. They are just empty shells, Such as VariableNode : AstNode,<br />\nand my Grammar inherits from InterpretedLanguageGrammar.<br />\n<br />\nWhy is AST generation so slow?<br />\n",
    "PostedDate": "2014-03-19T05:32:32.597-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1224423",
    "ThreadId": "539464",
    "Html": "Silly me. I had set &quot;Release&quot; mode, but I pressed F5 instead of Ctrl+F5. Now the parsing takes 0ms(AST generation included)!\r<br />\nNice work Roman &amp; anyone who contributed. <br />\n",
    "PostedDate": "2014-03-19T07:06:22.697-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]