[
  {
    "Id": "614648",
    "ThreadId": "258090",
    "Html": "\r\n<p>Hi&nbsp;</p>\r\n<p>I am building, actually have already built a search tool that uses FTS in MS SQL server 2008. So far so good, but im using an old version of the irony library.</p>\r\n<p>I Downloaded this kit and fired up the samples. I'm using the google style text search to FTS query condition implementation.</p>\r\n<p>In my existing project using the old irony lobrary I declare like so&nbsp;</p>\r\n<pre><span>Dim&nbsp;_compiler&nbsp;As&nbsp;LanguageCompiler</span>\r\n</pre>\r\n<p>This is however not valid for the latest version.</p>\r\n<p>In my existing project, to perform a full text conversion its done in steps</p>\r\n<p>1. instantiate the compiler<br>\r\n2. verify the text is valid&nbsp;<br>\r\n3. perform the conversion</p>\r\n<p>so in order this is how i used to use the irony library</p>\r\n<pre>&nbsp;<span>Dim</span>&nbsp;root&nbsp;<span>As</span>&nbsp;<span>AstNode</span>&nbsp;=&nbsp;_compiler.Parse(FriendlySrchString.ToLower())\r\n&nbsp;I<span>f</span>&nbsp;<span>Not</span>&nbsp;CheckParseErrors()&nbsp;<span>Then</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>Return</span>&nbsp;<span>Nothing</span>\r\n&nbsp;<span>End</span>&nbsp;<span>If</span>\r\n<span>'build&nbsp;the&nbsp;full&nbsp;text&nbsp;search&nbsp;condition&nbsp;</span>\r\n&nbsp;ftString&nbsp;=&nbsp;<span>SearchGrammar</span>.ConvertQuery(root,&nbsp;<span>SearchGrammar</span>.<span>TermType</span>.Inflectional)</pre>\r\n<p>Where CheckParserErrors looked like this</p>\r\n<pre>&nbsp;<span>Private</span>&nbsp;<span>Function</span>&nbsp;CheckParseErrors()&nbsp;<span>As</span>&nbsp;<span>Boolean</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>If</span>&nbsp;_compiler.Context.Errors.Count&nbsp;=&nbsp;0&nbsp;<span>Then</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>Return</span>&nbsp;<span>True</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>End</span>&nbsp;<span>If</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>Dim</span>&nbsp;errs&nbsp;<span>As</span>&nbsp;<span>String</span>&nbsp;=&nbsp;<span>&quot;Errors:&nbsp;&quot;</span>&nbsp;&amp;&nbsp;vbCr&nbsp;&amp;&nbsp;vbLf\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>For</span>&nbsp;<span>Each</span>&nbsp;err&nbsp;<span>As</span>&nbsp;SyntaxError&nbsp;<span>In</span>&nbsp;_compiler.Context.Errors\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errs&nbsp;&#43;=&nbsp;err.ToString()&nbsp;&amp;&nbsp;vbCr&nbsp;&amp;&nbsp;vbLf\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>Next</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;priErrors.AppendLine(errs)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>Return</span>&nbsp;<span>False</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span>End</span>&nbsp;<span>Function</span></pre>\r\n<pre><span><br></span></pre>\r\n<pre><span>I cannot seem to work out how to do this using the new irony library, nor can I find any documentation on the subject to help.</span></pre>\r\n<pre><span><br></span></pre>\r\n<pre><span>Look forward to someone pointing me in the right direction</span></pre>\r\n<pre><span><br></span></pre>\r\n<pre><span>regards</span></pre>\r\n<pre><span>A</span></pre>\r\n",
    "PostedDate": "2011-05-18T07:53:10.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "614723",
    "ThreadId": "258090",
    "Html": "<p>SearchGrammar is in Samples project that comes with Irony - it is an updated and improved version.</p>\r\n<p>Look at RunSample method in it, or Grammar.RunSample</p>",
    "PostedDate": "2011-05-18T09:46:49.597-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "614737",
    "ThreadId": "258090",
    "Html": "<p>I think I have 99% completed the move from the old version to the new. I am missing one thing that maybe someone else can provide.</p>\r\n<p>Here is how I am using the \"FullTextSearchQueryConverter\" found in the samples of the latest kit.</p>\r\n<p>When i am using this in my application i have a few class wide variables</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: blue;\">Private</span> _grammar <span style=\"color: blue;\">As</span> SearchGrammar\r\n    <span style=\"color: blue;\">Private</span> _parser <span style=\"color: blue;\">As</span> Irony.Parsing.Parser\r\n    <span style=\"color: blue;\">Private</span> _compilerContext <span style=\"color: blue;\">As</span> ParsingContext\r\n    <span style=\"color: blue;\">Private</span> _parseTree <span style=\"color: blue;\">As</span> ParseTree\r\n    <span style=\"color: blue;\">Private</span> priErrors <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">New</span> StringBuilder\r\n</pre>\r\n</div>\r\n</p>\r\n<p>When I instatiate my class I load the SearchGrammer implementation into ivory (the 1% I havn't completed is at this point)</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Sub</span> <span style=\"color: blue;\">New</span>()\r\n        _grammar = <span style=\"color: blue;\">New</span> SearchGrammar\r\n        _parser = <span style=\"color: blue;\">New</span> Parser(_grammar)\r\n        _compilerContext = <span style=\"color: blue;\">New</span> ParsingContext(_parser)\r\n        _parseTree = <span style=\"color: blue;\">Nothing</span>\r\n        _parser.Context.SetOption(ParseOptions.TraceParser, <span style=\"color: blue;\">True</span>)\r\n\r\n        <span style=\"color: green;\">'Dim errors As StringSet = _compiler.Parser.GetErrors</span>\r\n        <span style=\"color: green;\">'If (errors.Count &gt; 0) Then</span>\r\n        <span style=\"color: green;\">'    Throw New Exception(\"SearchGrammar contains errors. Investigate using GrammarExplorer.\\r\\n\" + errors.ToString())</span>\r\n        <span style=\"color: green;\">'End If</span>\r\n    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Sub</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>So the class is instantiated, the Grammer implementation loaded into ivory but the check to see if there were any errors in the Grammer is no longer in since I cant figure out how to check !</p>\r\n<p>ok so finally we want to use it in any method in our class we can do this</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">If</span> <span style=\"color: blue;\">Not</span> <span style=\"color: blue;\">String</span>.IsNullOrEmpty(FriendlySrchString) <span style=\"color: blue;\">Then</span>\r\n            _parser.Parse(FriendlySrchString)\r\n            _parseTree = _parser.Context.CurrentParseTree\r\n\r\n            <span style=\"color: blue;\">If</span> <span style=\"color: blue;\">Not</span> CheckParseErrors() <span style=\"color: blue;\">Then</span>\r\n                <span style=\"color: blue;\">Return</span> <span style=\"color: blue;\">Nothing</span>\r\n            <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n            <span style=\"color: green;\">'build the full text search condition </span>\r\n            ftString = SearchGrammar.ConvertQuery(_parseTree.Root)\r\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>This is the error check function</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: blue;\">Private</span> <span style=\"color: blue;\">Function</span> CheckParseErrors() <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Boolean</span>\r\n        <span style=\"color: blue;\">If</span> _parseTree <span style=\"color: blue;\">Is</span> <span style=\"color: blue;\">Nothing</span> <span style=\"color: blue;\">OrElse</span> _parseTree.ParserMessages.<span style=\"color: blue;\">Count</span> = 0 <span style=\"color: blue;\">Then</span>\r\n            <span style=\"color: blue;\">Return</span> <span style=\"color: blue;\">True</span>\r\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n        <span style=\"color: blue;\">Dim</span> errs <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">String</span> = <span style=\"color: #a31515;\">\"Errors: \"</span> &amp; vbCr &amp; vbLf\r\n        <span style=\"color: blue;\">For</span> <span style=\"color: blue;\">Each</span> err <span style=\"color: blue;\">As</span> Irony.Parsing.ParserMessage <span style=\"color: blue;\">In</span> _parseTree.ParserMessages\r\n            errs = err.Location.ToString() &amp; <span style=\"color: #a31515;\">\"Error: \"</span> &amp; err.ToString() &amp; <span style=\"color: #a31515;\">\"Parser State: \"</span> &amp; err.ParserState.ToString()\r\n        <span style=\"color: blue;\">Next</span>\r\n\r\n        priErrors.AppendLine(errs)\r\n        <span style=\"color: blue;\">Return</span> <span style=\"color: blue;\">False</span>\r\n    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Function</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Hope this helps anyone trying to do the same thing</p>\r\n<p>cheers</p>\r\n<p>A</p>",
    "PostedDate": "2011-05-18T10:12:18.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]