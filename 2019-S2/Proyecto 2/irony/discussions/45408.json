[
  {
    "Id": "151481",
    "ThreadId": "45408",
    "Html": "Hi, I did exactly in few examples (Atleast I think so). While creating NonTerminal I used type as second parameter, but it didn't work and Parse(string) method returns standard AstNode. Can you help me? In other words following code fails even though I use NodeType to specify custom AstNode class for each node<div><div><br></div><div>// Parsing</div><div><div> var grammar = new LanguageGramar();<br></div><div> var compiler = new LanguageCompiler(grammar);</div><div>AstNode tree = compiler.Parse (@&quot;a = 150 + 28&quot;);</div></div><div><div><br></div><div>// Grammar</div><div><div>namespace ConsoleApplication1</div><div>{</div><div>    public class LanguageGramar : Grammar</div><div>    {</div><div>        public LanguageGramar ()</div><div>        {</div>            // ...</div><div><br><div>            var Program = new NonTerminal (&quot;Program&quot;, typeof(ProgramNode));</div><div><br></div><div>            // ...</div><div>        }</div><div>    }</div><div>}</div><div><br></div><div>// ProgramNode</div><div><div>namespace ConsoleApplication1.Nodes<br></div><div>{</div><div>    public class ProgramNode : AstNode</div><div>    {</div><div>        public ProgramNode(NodeArgs args) : base(args)</div><div>        {</div><div>        }</div><div>    }</div><div>}</div></div><div><br></div></div></div></div>",
    "PostedDate": "2009-01-27T12:04:39.52-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "151503",
    "ThreadId": "45408",
    "Html": "Please try to stop in ProgramNode constructor in debugger, to see if it's actually called. Anyway, hard to say, can you  please list the entire grammar class (cs file)?\r\n",
    "PostedDate": "2009-01-27T13:11:12.583-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "151629",
    "ThreadId": "45408",
    "Html": "Yes, it visits constructor two times<div><br></div><div>Grammar</div><div>=========================</div><div><div>using Irony.Compiler;</div><div>using Irony.Compiler.AST;</div><div>using ConsoleApplication1.Nodes;</div><div>using AssigmentNode=ConsoleApplication1.Nodes.AssigmentNode;</div><div><br></div><div>namespace ConsoleApplication1</div><div>{</div><div>    // This grammar describes programs that consist of simple expressions and assignments,</div><div>    // for ex:</div><div>    // x = 3 + 4</div><div>    // y = x * 2 + 1</div><div>    //  the result of calculation is the result of last expression or assignment (value of &quot;y&quot; in this case).</div><div>    //  Irony's default  runtime provides expression evaluation. </div><div><br></div><div>    [Language (&quot;ExpressionEvaluator&quot;, &quot;1.0&quot;, &quot;Multi-line expression evaluator&quot;)]</div><div>    public class LanguageGramar : Grammar</div><div>    {</div><div>        public LanguageGramar ()</div><div>        {</div><div>            // 1. Terminals</div><div>            var number = new NumberLiteral (&quot;number&quot;);</div><div>            var identifier = new IdentifierTerminal (&quot;identifier&quot;);</div><div>            var comment = new CommentTerminal (&quot;comment&quot;, &quot;#&quot;, &quot;\\n&quot;, &quot;\\r&quot;);</div><div>            NonGrammarTerminals.Add (comment);</div><div><br></div><div>            // 2. Non-terminals</div><div>            var Variable = new NonTerminal (&quot;Variable&quot;, typeof (VariableNode));</div><div>            var Expr = new NonTerminal (&quot;Expr&quot;, typeof(ExpressionNode));</div><div>            var Term = new NonTerminal (&quot;Term&quot;, typeof(TermNode));</div><div>            var BinExpr = new NonTerminal (&quot;BinExpr&quot;, typeof (BinaryExpressionNode));</div><div>            var ParExpr = new NonTerminal (&quot;ParExpr&quot;, typeof(ParenthesedExpressionNode));</div><div>            var UnExpr = new NonTerminal (&quot;UnExpr&quot;, typeof (UnparenthesedExpressionNode));</div><div>            var UnOp = new NonTerminal (&quot;UnOp&quot;, typeof(UnaryOperatorNode));</div><div>            var BinOp = new NonTerminal (&quot;BinOp&quot;, typeof(BinaryOperatorNode));</div><div>            var AssignmentStmt = new NonTerminal (&quot;AssignmentStmt&quot;, typeof (AssigmentNode));</div><div>            var Statement = new NonTerminal (&quot;Statement&quot;, typeof(StatementNode));</div><div>            var ProgramLine = new NonTerminal (&quot;ProgramLine&quot;, typeof (LineNode));</div><div>            var Program = new NonTerminal (&quot;Program&quot;, typeof(ProgramNode));</div><div><br></div><div>            Statement.NodeType = typeof (ProgramNode);</div><div><br></div><div>            // 3. BNF rules</div><div>            Variable.Rule = identifier;</div><div>            Expr.Rule = Term | UnExpr | BinExpr;</div><div>            Term.Rule = number | ParExpr | Variable;</div><div>            ParExpr.Rule = &quot;(&quot; + Expr + &quot;)&quot;;</div><div>            UnExpr.Rule = UnOp + Term;</div><div>            UnOp.Rule = Symbol (&quot;+&quot;) | &quot;-&quot;;</div><div>            BinExpr.Rule = Expr + BinOp + Expr;</div><div>            BinOp.Rule = Symbol (&quot;+&quot;) | &quot;-&quot; | &quot;*&quot; | &quot;/&quot; | &quot;**&quot;;</div><div>            AssignmentStmt.Rule = Variable + &quot;=&quot; + Expr;</div><div>            Statement.Rule = AssignmentStmt | Expr | Empty;</div><div>            ProgramLine.Rule = Statement + NewLine;</div><div>            Program.Rule = MakeStarRule (Program, ProgramLine);</div><div>            Root = Program;       // Set grammar root</div><div><br></div><div>            // 4. Operators precedence</div><div>            RegisterOperators (1, &quot;+&quot;, &quot;-&quot;);</div><div>            RegisterOperators (2, &quot;*&quot;, &quot;/&quot;);</div><div>            RegisterOperators (3, Associativity.Right, &quot;**&quot;);</div><div><br></div><div>            RegisterPunctuation (&quot;(&quot;, &quot;)&quot;);</div><div><br></div><div>            // automatically add NewLine before EOF so that our BNF rules work correctly </div><div>            // when there's no final line break in source</div><div>            LanguageFlags = LanguageFlags.NewLineBeforeEOF | LanguageFlags.SupportsInterpreter;</div><div><br></div><div>        }</div><div>    }</div><div>}//namespace</div><div><br></div><div><br></div><div>ProgramNode</div><div>===================================</div><div><div>using System.Collections.Generic;</div><div>using System.Linq;</div><div>using Irony.Compiler;</div><div><br></div><div>namespace ConsoleApplication1.Nodes</div><div>{</div><div>    public class ProgramNode : AstNode</div><div>    {</div><div>        public ProgramNode(NodeArgs args) : base(args)</div><div>        {</div><div>        }</div><div><br></div><div>        public IEnumerable&lt;LineNode&gt; Lines</div><div>        {</div><div>            get</div><div>            {</div><div>                return ChildNodes.Cast&lt;LineNode&gt;();</div><div>            }</div><div>        }</div><div>    }</div><div>}</div><div><br></div><div>Parsing</div><div>==========================</div></div><div><div>using Irony.Compiler;</div><div><br></div><div>namespace ConsoleApplication1</div><div>{</div><div>    class Program</div><div>    {</div><div>        static void Main (string[] args)</div><div>        {</div><div>            var grammar = new LanguageGramar();</div><div>            var compiler = new LanguageCompiler(grammar);</div><div>            AstNode tree = compiler.Parse (@&quot;a = 150 + 28&quot;);</div><div>        }</div><div>    }</div><div>}</div><div><br></div></div></div>",
    "PostedDate": "2009-01-27T23:33:12.88-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "151856",
    "ThreadId": "45408",
    "Html": "What you see as a root node is actually &quot;augmented root&quot; node named Program' (with apostroph). Your expected root is the first child of this node. You should add the &quot;BubbleNodes&quot; flag to Grammar flags like this:<br>\r\n<br>\r\n<span style=\"font-size:13px\">\r\n<p>LanguageFlags = </p>\r\n</span>\r\n<p><span style=\"font-size:13px;color:#2b91af\">LanguageFlags</span><span style=\"font-size:13px\">.NewLineBeforeEOF | </span><span style=\"font-size:13px;color:#2b91af\">LanguageFlags</span><span style=\"font-size:13px\">.SupportsInterpreter | </span><span style=\"font-size:13px;color:#2b91af\">LanguageFlags</span><span style=\"font-size:13px\">.BubbleNodes;<br>\r\n<br>\r\nThen you'll see your node on top. This is confusing a bit, I know, and is more like a workaround. I'm trying to streamline all this &quot;bubble nodes&quot; business and make it more explicit and clear. Expect fixes soon.<br>\r\n<br>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n",
    "PostedDate": "2009-01-28T09:47:32.91-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]