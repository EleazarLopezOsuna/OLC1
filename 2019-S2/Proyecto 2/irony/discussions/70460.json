[
  {
    "Id": "240001",
    "ThreadId": "70460",
    "Html": "<p>I decided to take some time and port some code I found on the web over to the Irony framework. I am delighted with the out come so far.</p>\r\n<p>Below, please find an implementation of ISO 7185:1990 Standard Pascal. I have also included some useful links if someone wants to improve upon or correct what I've done so far. This was meant to be a learning experience for me, so any feedback would be greatly appreciated.<br> <br>Thanks,<br> MindCore</p>\r\n<p><strong>StandardPascalGrammar.cs&nbsp;</strong> (<em>add file in the 020.Irony.Samples project folder</em>)</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">#region</span> Useful Links\r\n<span style=\"color:Green\">/* **********************************************************************************\r\n * \r\n * http://standardpascal.org/iso7185rules.html  (Summary)\r\n * http://www.pascal-central.com/docs/iso7185.pdf  (Full Doc)\r\n * \r\n * http://www.moorecad.com/standardpascal/pascal.y  (YACC)\r\n * http://www.moorecad.com/standardpascal/pascal.l  (LEXER)\r\n * \r\n * **********************************************************************************/</span>\r\n<span style=\"color:Blue\">#endregion</span>\r\n\r\n<span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> Irony.Parsing;\r\n<span style=\"color:Blue\">using</span> Irony.Ast;\r\n\r\n<span style=\"color:Blue\">namespace</span> Irony.Samples\r\n{\r\n\r\n  [Language(<span style=\"color:#A31515\">&quot;Standard Pascal&quot;</span>, <span style=\"color:#A31515\">&quot;1990&quot;</span>, <span style=\"color:#A31515\">&quot;ISO-7185:1990 Standard Pascal&quot;</span>)]\r\n  <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">partial</span> <span style=\"color:Blue\">class</span> StandardPascalGrammar : Grammar\r\n  {\r\n\r\n    <span style=\"color:Blue\">public</span> StandardPascalGrammar(): <span style=\"color:Blue\">base</span>(<span style=\"color:Blue\">false</span>)\r\n    {\r\n      <span style=\"color:Blue\">this</span>.GrammarComments = <span style=\"color:#A31515\">@&quot;Sample implementation of ISO-7185 Standard Pascal&quot;</span>;\r\n\r\n      <span style=\"color:Blue\">this</span>.MarkReservedWords(<span style=\"color:#A31515\">&quot;and&quot;</span>, <span style=\"color:#A31515\">&quot;array&quot;</span>, <span style=\"color:#A31515\">&quot;begin&quot;</span>, <span style=\"color:#A31515\">&quot;case&quot;</span>, <span style=\"color:#A31515\">&quot;const&quot;</span>, <span style=\"color:#A31515\">&quot;div&quot;</span>, <span style=\"color:#A31515\">&quot;do&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.MarkReservedWords(<span style=\"color:#A31515\">&quot;downto&quot;</span>, <span style=\"color:#A31515\">&quot;else&quot;</span>, <span style=\"color:#A31515\">&quot;end&quot;</span>, <span style=\"color:#A31515\">&quot;file&quot;</span>, <span style=\"color:#A31515\">&quot;for&quot;</span>, <span style=\"color:#A31515\">&quot;function&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.MarkReservedWords(<span style=\"color:#A31515\">&quot;goto&quot;</span>, <span style=\"color:#A31515\">&quot;if&quot;</span>, <span style=\"color:#A31515\">&quot;in&quot;</span>, <span style=\"color:#A31515\">&quot;label&quot;</span>, <span style=\"color:#A31515\">&quot;mod&quot;</span>, <span style=\"color:#A31515\">&quot;nil&quot;</span>, <span style=\"color:#A31515\">&quot;not&quot;</span> ,<span style=\"color:#A31515\">&quot;of&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.MarkReservedWords(<span style=\"color:#A31515\">&quot;or&quot;</span>, <span style=\"color:#A31515\">&quot;packed&quot;</span>, <span style=\"color:#A31515\">&quot;procedure&quot;</span>, <span style=\"color:#A31515\">&quot;program&quot;</span>, <span style=\"color:#A31515\">&quot;record&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.MarkReservedWords(<span style=\"color:#A31515\">&quot;repeat&quot;</span>, <span style=\"color:#A31515\">&quot;set&quot;</span>, <span style=\"color:#A31515\">&quot;then&quot;</span>, <span style=\"color:#A31515\">&quot;to&quot;</span>, <span style=\"color:#A31515\">&quot;type&quot;</span>, <span style=\"color:#A31515\">&quot;until&quot;</span>, <span style=\"color:#A31515\">&quot;var&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.MarkReservedWords(<span style=\"color:#A31515\">&quot;while&quot;</span>, <span style=\"color:#A31515\">&quot;with&quot;</span>);\r\n\r\n      <span style=\"color:Blue\">#region</span> 1. Terminals\r\n\r\n      <span style=\"color:Blue\">var</span> identifier = <span style=\"color:Blue\">new</span> IdentifierTerminal(<span style=\"color:#A31515\">&quot;Identifier&quot;</span>, IdFlags.NameIncludesPrefix);\r\n      identifier.AddPrefix(Strings.AllLatinLetters, IdFlags.None);   <span style=\"color:Green\">//[a-zA-Z]([a-zA-Z0-9])</span>\r\n\r\n      <span style=\"color:Blue\">var</span> charcode = <span style=\"color:Blue\">new</span> NumberLiteral(<span style=\"color:#A31515\">&quot;CharacterCode&quot;</span>, NumberFlags.IntOnly);\r\n      charcode.AddPrefix(<span style=\"color:#A31515\">&quot;#&quot;</span>, NumberFlags.None); <span style=\"color:Green\">// \\#[0-9]+</span>\r\n\r\n      <span style=\"color:Blue\">var</span> character_string = <span style=\"color:Blue\">new</span> StringLiteral(<span style=\"color:#A31515\">&quot;CharacterString&quot;</span>, <span style=\"color:#A31515\">@&quot;'&quot;</span>, StringFlags.AllowsLineBreak &amp; StringFlags.NoEscapes); <span style=\"color:Green\">//'({NQUOTE}|'')+'</span>\r\n\r\n      <span style=\"color:Blue\">var</span> digit_sequence = <span style=\"color:Blue\">new</span> NumberLiteral(<span style=\"color:#A31515\">&quot;DigitSequence&quot;</span>, NumberFlags.IntOnly); <span style=\"color:Green\">// [0-9]+</span>\r\n\r\n      <span style=\"color:Blue\">var</span> real_number = <span style=\"color:Blue\">new</span> NumberLiteral(<span style=\"color:#A31515\">&quot;RealNumber&quot;</span>, NumberFlags.HasDot); <span style=\"color:Green\">//[0-9]+&quot;.&quot;[0-9]+</span>\r\n\r\n      <span style=\"color:Blue\">var</span> comment1 = <span style=\"color:Blue\">new</span> CommentTerminal(<span style=\"color:#A31515\">&quot;Comment&quot;</span>, <span style=\"color:#A31515\">&quot;(*&quot;</span>, <span style=\"color:#A31515\">&quot;*)&quot;</span>);\r\n      NonGrammarTerminals.Add(comment1);\r\n\r\n      <span style=\"color:Blue\">var</span> comment2 = <span style=\"color:Blue\">new</span> CommentTerminal(<span style=\"color:#A31515\">&quot;Comment&quot;</span>, <span style=\"color:#A31515\">&quot;{&quot;</span>, <span style=\"color:#A31515\">&quot;}&quot;</span>);\r\n      NonGrammarTerminals.Add(comment2);\r\n\r\n      <span style=\"color:Blue\">#endregion</span>\r\n          \r\n      <span style=\"color:Blue\">#region</span> 2. Non-terminal\r\n\r\n      <span style=\"color:Blue\">var</span> file = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FILE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> comment = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;COMMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> program = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROGRAM&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> program_heading = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROGRAM_HEADING&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> identifier_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;IDENTIFIER_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> block = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;BLOCK&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> module = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;MODULE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> label_declaration_part = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;LABEL_DECLARATION_PART&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> label_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;LABEL_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> label = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;LABEL&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> constant_definition_part = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CONSTANT_DEFINITION_PART&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> constant_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CONSTANT_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> constant_definition = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CONSTANT_DEFINITION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> cexpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;C_EXPRESSION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> csimple_expression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;C_SIMPLE_EXPRESSION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> cterm = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;C_TERM&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> cfactor = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;C_FACTOR&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> cexponentiation = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;C_EXPONENTIATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> cprimary = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;C_PRIMARY&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> constant = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CONSTANT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> non_string = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;NON_STRING&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> type_definition_part = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;TYPE_DEFINITION_PART&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> type_definition_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;TYPE_DEFINITION_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> type_definition = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;TYPE_DEFINITION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> type_denoter = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;TYPE_DENOTER&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> new_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;NEW_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> new_ordinal_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;NEW_ORDINAL_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> enumerated_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ENUMERATED_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> subrange_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;SUBRANGE_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> new_structured_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;NEW_STRUCTURED_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> structured_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;STRUCTURED_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> array_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ARRAY_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> index_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;INDEX_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> index_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;INDEX_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> ordinal_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ORDINAL_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> component_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;COMPONENT_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> record_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;RECORD_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> record_section_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;RECORD_SELECTION_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> record_section = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;RECORD_SELECTION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> variant_part = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;VARIANT_PART&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> variant_selector = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;VARIANT_SELECTOR&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> variant_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;VARIANT_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> variant = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;VARIANT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> case_constant_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CASE_CONSTANT_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> case_constant = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CASE_CONSTANT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> tag_field = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;TAG_FIELD&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> tag_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;TAG_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> set_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;SET_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> base_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;BASE_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> file_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FILE_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> new_pointer_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;NEW_POINTER_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> domain_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;DOMAIN_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> variable_declaration_part = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;VARIABLE_DECLARATION_PART&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> variable_declaration_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;VARIABLE_DECLARATION_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> variable_declaration = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;VARIABLE_DECLARATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> procedure_and_function_declaration_part = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROCEDURE_AND_FUNCTION_DECLARATION_PART&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> proc_or_func_declaration_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROC_OR_FUNC_DECLARATION_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> proc_or_func_declaration = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROC_OR_FUNC_DECLARATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> procedure_declaration = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROCEDURE_DECLARATION&quot;</span>); \r\n      <span style=\"color:Blue\">var</span> procedure_heading = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROCEDURE_HEADING&quot;</span>); \r\n      <span style=\"color:Blue\">var</span> directive = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;DIRECTIVE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> formal_parameter_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FORMAL_PARAMETER_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> formal_parameter_section_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FORMAL_PARAMETER_SECTION_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> formal_parameter_section = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FORMAL_PARAMETER_SECTION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> value_parameter_specification = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;VALUE_PARAMETER_SPECIFICATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> variable_parameter_specification = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;VARIABLE_PARAMETER_SPECIFICATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> procedural_parameter_specification = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROCEDURAL_PARAMETER_SPECIFICATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> functional_parameter_specification = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FUNCTIONAL_PARAMETER_SPECIFICATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> procedure_identification = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROCEDURE_IDENTIFICATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> procedure_block = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROCEDURE_BLOCK&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> function_declaration = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FUNCTION_DECLARATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> function_heading = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FUNCTION_HEADING&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> result_type = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;RESULT_TYPE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> function_identification = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FUNCTION_IDENTIFICATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> function_block = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FUNCTION_BLOCK&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> statement_part = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;STATEMENT_PART&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> compound_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;COMPOUND_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> statement_sequence = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;STATEMENT_SEQUENCE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> open_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;OPEN_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> closed_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CLOSED_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> non_labeled_closed_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;NON_LABELED_CLOSED_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> non_labeled_open_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;NON_LABELED_OPEN_STATEMENT&quot;</span>);    \r\n      <span style=\"color:Blue\">var</span> repeat_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;REPEAT_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> open_while_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;OPEN_WHILE_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> closed_while_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CLOSED_WHILE_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> open_for_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;OPEN_FOR_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> closed_for_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CLOSED_FOR_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> open_with_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;OPEN_WITH_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> closed_with_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CLOSED_WITH_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> open_if_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;OPEN_IF_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> closed_if_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CLOSED_IF_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> assignment_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ASSIGNMENT_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> variable_access = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;VARIABLE_ACCESS&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> indexed_variable = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;INDEXED_VARIABLE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> index_expression_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;INDEX_EXPRESSION_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> index_expression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;INDEX_EXPRESSION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> field_designator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FIELD_DESIGNATOR&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> procedure_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PROCEDURE_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> parms = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PARAMETERS&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> actual_parameter_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ACTUAL_PARAMETER_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> actual_parameter = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ACTUAL_PARAMETER&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> goto_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;GOTO_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> case_statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CASE_STATEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> case_index = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CASE_INDEX&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> case_list_element_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CASE_LIST_ELEMENT_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> case_list_element = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CASE_LIST_ELEMENT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> otherwise_part = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;OTHERWISE_PART&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> control_variable = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;CONTROL_VARIABLE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> initial_value = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;INITIAL_VALUE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> direction = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;DIRECTION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> final_value = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FINAL_VALUE&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> record_variable_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;RECORD_VARIABLE_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> boolean_expression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;BOOLEAN_EXPRESSION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> expression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;EXPRESSION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> simple_expression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;SIMPLE_EXPRESSION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> term = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;TERM&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> factor = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FACTOR&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> exponentiation = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;EXPONENTIATION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> primary = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PRIMARY&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> unsigned_constant = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;UNSIGNED_CONSTANT&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> unsigned_number = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;UNSIGNED_NUMBER&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> unsigned_integer = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;UNSIGNED_INTEGER&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> unsigned_real = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;UNSIGNED_REAL&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> function_designator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FUNCTION_DESIGNATOR&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> set_constructor = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;SET_CONSTRUCTOR&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> member_designator_list = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;MEMBER_DESIGNATOR_LIST&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> member_designator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;MEMBER_DESIGNATOR&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> adding_operator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ADD_OP&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> multiplying_operator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;MUL_OP&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> relational_operator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;REL_OP&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> sign = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;SIGN&quot;</span>);\r\n\r\n      <span style=\"color:Blue\">#endregion</span>\r\n\r\n      <span style=\"color:Blue\">#region</span> 3. BNF Rules\r\n\r\n      sign.Rule = Symbol(<span style=\"color:#A31515\">&quot;+&quot;</span>) | <span style=\"color:#A31515\">&quot;-&quot;</span>;\r\n\r\n      relational_operator.Rule = Symbol(<span style=\"color:#A31515\">&quot;=&quot;</span>) | <span style=\"color:#A31515\">&quot;&lt;&gt;&quot;</span> | <span style=\"color:#A31515\">&quot;&lt;&quot;</span> | <span style=\"color:#A31515\">&quot;&gt;&quot;</span> | <span style=\"color:#A31515\">&quot;&lt;=&quot;</span> | <span style=\"color:#A31515\">&quot;&gt;=&quot;</span> | <span style=\"color:#A31515\">&quot;in&quot;</span>;\r\n\r\n      multiplying_operator.Rule = Symbol(<span style=\"color:#A31515\">&quot;*&quot;</span>) | <span style=\"color:#A31515\">&quot;/&quot;</span> | <span style=\"color:#A31515\">&quot;div&quot;</span> | <span style=\"color:#A31515\">&quot;mod&quot;</span> | <span style=\"color:#A31515\">&quot;and&quot;</span>;\r\n\r\n      adding_operator.Rule = Symbol(<span style=\"color:#A31515\">&quot;+&quot;</span>) | <span style=\"color:#A31515\">&quot;-&quot;</span> | <span style=\"color:#A31515\">&quot;or&quot;</span>;\r\n\r\n      member_designator.Rule = \r\n        member_designator + <span style=\"color:#A31515\">&quot;..&quot;</span> + expression | expression;\r\n\r\n      member_designator_list.Rule = \r\n        MakePlusRule(member_designator_list, Symbol(<span style=\"color:#A31515\">&quot;,&quot;</span>), member_designator);\r\n\r\n      set_constructor.Rule = \r\n          <span style=\"color:#A31515\">&quot;[&quot;</span> + member_designator_list + <span style=\"color:#A31515\">&quot;]&quot;</span> | <span style=\"color:#A31515\">&quot;[&quot;</span> + <span style=\"color:#A31515\">&quot;]&quot;</span> |\r\n          <span style=\"color:#A31515\">&quot;(.&quot;</span> + member_designator_list + <span style=\"color:#A31515\">&quot;.)&quot;</span> | <span style=\"color:#A31515\">&quot;(.&quot;</span> + <span style=\"color:#A31515\">&quot;.)&quot;</span>;\r\n\r\n      <span style=\"color:Green\">/* functions with no params will be handled by plain identifier */</span>\r\n      function_designator.Rule = identifier + parms;\r\n\r\n      unsigned_real.Rule = real_number;\r\n\r\n      unsigned_integer.Rule = digit_sequence;\r\n\r\n      unsigned_number.Rule = unsigned_integer | unsigned_real;\r\n\r\n      unsigned_constant.Rule = \r\n        unsigned_number | character_string | charcode | <span style=\"color:#A31515\">&quot;nil&quot;</span>;\r\n\r\n      primary.Rule =\r\n        variable_access | \r\n        unsigned_constant | \r\n        function_designator | \r\n        set_constructor | \r\n        <span style=\"color:#A31515\">&quot;(&quot;</span> + expression + <span style=\"color:#A31515\">&quot;)&quot;</span> |\r\n        <span style=\"color:#A31515\">&quot;not&quot;</span> + primary;\r\n\r\n      exponentiation.Rule = primary | primary + <span style=\"color:#A31515\">&quot;**&quot;</span> + exponentiation;\r\n\r\n      factor.Rule = sign + factor | exponentiation;\r\n\r\n      term.Rule = factor | term + multiplying_operator +  factor;\r\n\r\n      simple_expression.Rule = term | simple_expression + adding_operator +  term;\r\n\r\n      expression.Rule = \r\n        simple_expression | simple_expression + relational_operator + simple_expression;\r\n\r\n      boolean_expression.Rule = expression;\r\n\r\n      record_variable_list.Rule = \r\n        MakePlusRule(record_variable_list, Symbol(<span style=\"color:#A31515\">&quot;,&quot;</span>), variable_access);\r\n\r\n      final_value.Rule = expression;\r\n      \r\n      direction.Rule = Symbol(<span style=\"color:#A31515\">&quot;to&quot;</span>) | <span style=\"color:#A31515\">&quot;downto&quot;</span>;\r\n\r\n      initial_value.Rule = expression;\r\n\r\n      control_variable.Rule = identifier;\r\n\r\n      otherwise_part.Rule = Symbol(<span style=\"color:#A31515\">&quot;otherwise&quot;</span>) | <span style=\"color:#A31515\">&quot;otherwise&quot;</span> + <span style=\"color:#A31515\">&quot;:&quot;</span>;\r\n\r\n      case_list_element.Rule = case_constant_list + <span style=\"color:#A31515\">&quot;:&quot;</span> + statement;\r\n\r\n      case_list_element_list.Rule = \r\n        MakePlusRule(case_list_element_list, Symbol(<span style=\"color:#A31515\">&quot;;&quot;</span>), case_list_element);\r\n\r\n      case_index.Rule = expression;\r\n\r\n      case_statement.Rule = \r\n          <span style=\"color:#A31515\">&quot;case&quot;</span> + case_index + <span style=\"color:#A31515\">&quot;of&quot;</span> + case_list_element_list + <span style=\"color:#A31515\">&quot;end&quot;</span> | \r\n          <span style=\"color:#A31515\">&quot;case&quot;</span> + case_index + <span style=\"color:#A31515\">&quot;of&quot;</span> + case_list_element_list + <span style=\"color:#A31515\">&quot;;&quot;</span> + <span style=\"color:#A31515\">&quot;end&quot;</span> |\r\n          <span style=\"color:#A31515\">&quot;case&quot;</span> + case_index + <span style=\"color:#A31515\">&quot;of&quot;</span> + case_list_element_list + <span style=\"color:#A31515\">&quot;;&quot;</span> + otherwise_part + statement + <span style=\"color:#A31515\">&quot;end&quot;</span> |\r\n          <span style=\"color:#A31515\">&quot;case&quot;</span> + case_index + <span style=\"color:#A31515\">&quot;of&quot;</span> + case_list_element_list + <span style=\"color:#A31515\">&quot;;&quot;</span> + otherwise_part + statement + <span style=\"color:#A31515\">&quot;;&quot;</span> + <span style=\"color:#A31515\">&quot;end&quot;</span>;\r\n\r\n      goto_statement.Rule = <span style=\"color:#A31515\">&quot;goto&quot;</span> + label;\r\n\r\n      <span style=\"color:Green\">/*\r\n       * this forces you to check all this to be sure that only write and\r\n       * writeln use the 2nd and 3rd forms, you really can't do it easily in\r\n       * the grammar, especially since write and writeln aren't reserved\r\n       */</span>\r\n      actual_parameter.Rule =\r\n          expression |\r\n          expression + <span style=\"color:#A31515\">&quot;:&quot;</span> + expression |\r\n          expression + <span style=\"color:#A31515\">&quot;:&quot;</span> + expression + <span style=\"color:#A31515\">&quot;:&quot;</span> + expression;\r\n\r\n      actual_parameter_list.Rule = \r\n        MakePlusRule(actual_parameter_list, Symbol(<span style=\"color:#A31515\">&quot;,&quot;</span>), actual_parameter);\r\n\r\n      parms.Rule = <span style=\"color:#A31515\">&quot;(&quot;</span> + actual_parameter_list + <span style=\"color:#A31515\">&quot;)&quot;</span>;\r\n\r\n      procedure_statement.Rule = identifier + parms | identifier;\r\n\r\n      field_designator.Rule = variable_access + <span style=\"color:#A31515\">&quot;.&quot;</span> + identifier;\r\n\r\n      index_expression.Rule = expression;\r\n      \r\n      index_expression_list.Rule = \r\n        MakePlusRule(index_expression_list, Symbol(<span style=\"color:#A31515\">&quot;,&quot;</span>), index_expression);\r\n\r\n      indexed_variable.Rule = \r\n          variable_access + <span style=\"color:#A31515\">&quot;[&quot;</span> + index_expression_list + <span style=\"color:#A31515\">&quot;]&quot;</span> |\r\n          variable_access + <span style=\"color:#A31515\">&quot;(.&quot;</span> + index_expression_list + <span style=\"color:#A31515\">&quot;.)&quot;</span>;\r\n\r\n      variable_access.Rule = \r\n          identifier | \r\n          indexed_variable |\r\n          field_designator | \r\n          variable_access + (Symbol(<span style=\"color:#A31515\">&quot;^&quot;</span>) | <span style=\"color:#A31515\">&quot;-&gt;&quot;</span> | <span style=\"color:#A31515\">&quot;@&quot;</span>);\r\n\r\n      assignment_statement.Rule = \r\n        variable_access + <span style=\"color:#A31515\">&quot;:=&quot;</span> + expression;\r\n\r\n      closed_if_statement.Rule = \r\n        <span style=\"color:#A31515\">&quot;if&quot;</span> + boolean_expression + <span style=\"color:#A31515\">&quot;then&quot;</span> + closed_statement + PreferShiftHere() + <span style=\"color:#A31515\">&quot;else&quot;</span> + closed_statement;\r\n\r\n      open_if_statement.Rule = \r\n        <span style=\"color:#A31515\">&quot;if&quot;</span> + boolean_expression + <span style=\"color:#A31515\">&quot;then&quot;</span> + statement | \r\n        <span style=\"color:#A31515\">&quot;if&quot;</span> + boolean_expression + <span style=\"color:#A31515\">&quot;then&quot;</span> + closed_statement + PreferShiftHere() + <span style=\"color:#A31515\">&quot;else&quot;</span> + open_statement;\r\n\r\n      closed_with_statement.Rule = \r\n        <span style=\"color:#A31515\">&quot;with&quot;</span> + record_variable_list + <span style=\"color:#A31515\">&quot;do&quot;</span> + closed_statement;\r\n\r\n      open_with_statement.Rule = \r\n        <span style=\"color:#A31515\">&quot;with&quot;</span> + record_variable_list + <span style=\"color:#A31515\">&quot;do&quot;</span> + open_statement;\r\n\r\n      closed_for_statement.Rule = \r\n        <span style=\"color:#A31515\">&quot;for&quot;</span> + control_variable + <span style=\"color:#A31515\">&quot;:=&quot;</span> + initial_value + direction + final_value + <span style=\"color:#A31515\">&quot;do&quot;</span> + closed_statement;\r\n\r\n      open_for_statement.Rule = \r\n        <span style=\"color:#A31515\">&quot;for&quot;</span> + control_variable + <span style=\"color:#A31515\">&quot;:=&quot;</span> + initial_value + direction + final_value + <span style=\"color:#A31515\">&quot;do&quot;</span> + open_statement;\r\n\r\n      closed_while_statement.Rule = \r\n        <span style=\"color:#A31515\">&quot;while&quot;</span> + boolean_expression + <span style=\"color:#A31515\">&quot;do&quot;</span> + closed_statement;\r\n\r\n      open_while_statement.Rule = \r\n        <span style=\"color:#A31515\">&quot;while&quot;</span> + boolean_expression + <span style=\"color:#A31515\">&quot;do&quot;</span> + open_statement;\r\n\r\n      repeat_statement.Rule = \r\n        <span style=\"color:#A31515\">&quot;repeat&quot;</span> + statement_sequence + <span style=\"color:#A31515\">&quot;until&quot;</span> + boolean_expression;\r\n\r\n      non_labeled_open_statement.Rule =  \r\n          open_with_statement | \r\n          open_if_statement | \r\n          open_while_statement | \r\n          open_for_statement;\r\n\r\n      non_labeled_closed_statement.Rule = \r\n          assignment_statement | \r\n          procedure_statement | \r\n          goto_statement | \r\n          compound_statement | \r\n          case_statement | \r\n          repeat_statement | \r\n          closed_with_statement | \r\n          closed_if_statement | \r\n          closed_while_statement | \r\n          closed_for_statement | \r\n          Empty;\r\n\r\n      closed_statement.Rule = \r\n        label + <span style=\"color:#A31515\">&quot;:&quot;</span> + non_labeled_closed_statement | \r\n        non_labeled_closed_statement;\r\n\r\n      open_statement.Rule = \r\n        label + <span style=\"color:#A31515\">&quot;:&quot;</span> + non_labeled_open_statement | \r\n        non_labeled_open_statement;\r\n\r\n      statement.Rule = open_statement | closed_statement;\r\n\r\n      statement_sequence.Rule = \r\n        statement_sequence + <span style=\"color:#A31515\">&quot;;&quot;</span> + statement | statement;\r\n\r\n      compound_statement.Rule = <span style=\"color:#A31515\">&quot;begin&quot;</span> + statement_sequence + <span style=\"color:#A31515\">&quot;end&quot;</span> ;\r\n\r\n      statement_part.Rule = compound_statement;\r\n\r\n      function_block.Rule = block;\r\n\r\n      function_identification.Rule = <span style=\"color:#A31515\">&quot;function&quot;</span> + identifier;\r\n\r\n      result_type.Rule = identifier;\r\n\r\n      function_heading.Rule = \r\n          <span style=\"color:#A31515\">&quot;function&quot;</span> + identifier + <span style=\"color:#A31515\">&quot;:&quot;</span> + result_type |\r\n          <span style=\"color:#A31515\">&quot;function&quot;</span> + identifier + formal_parameter_list + <span style=\"color:#A31515\">&quot;:&quot;</span> + result_type;\r\n\r\n      function_declaration.Rule =\r\n          function_heading + <span style=\"color:#A31515\">&quot;;&quot;</span> + directive |\r\n          function_identification + <span style=\"color:#A31515\">&quot;;&quot;</span> + function_block | \r\n          function_heading + <span style=\"color:#A31515\">&quot;;&quot;</span> + function_block;\r\n\r\n      procedure_block.Rule = block ;\r\n\r\n      procedure_identification.Rule = <span style=\"color:#A31515\">&quot;procedure&quot;</span> + identifier;\r\n\r\n      functional_parameter_specification.Rule = function_heading;\r\n\r\n      procedural_parameter_specification.Rule = procedure_heading;\r\n\r\n      variable_parameter_specification.Rule = \r\n        <span style=\"color:#A31515\">&quot;var&quot;</span> + identifier_list + <span style=\"color:#A31515\">&quot;:&quot;</span> + identifier;\r\n\r\n      value_parameter_specification.Rule = \r\n        identifier_list + <span style=\"color:#A31515\">&quot;:&quot;</span> + identifier;\r\n\r\n      formal_parameter_section.Rule = \r\n            value_parameter_specification | \r\n            variable_parameter_specification | \r\n            procedural_parameter_specification | \r\n            functional_parameter_specification;\r\n\r\n      formal_parameter_section_list.Rule = \r\n        MakePlusRule(formal_parameter_section_list, Symbol(<span style=\"color:#A31515\">&quot;;&quot;</span>), formal_parameter_section);\r\n\r\n      formal_parameter_list.Rule = \r\n        <span style=\"color:#A31515\">&quot;(&quot;</span> + formal_parameter_section_list + <span style=\"color:#A31515\">&quot;)&quot;</span> ;\r\n\r\n      directive.Rule = Symbol(<span style=\"color:#A31515\">&quot;forward&quot;</span>) | <span style=\"color:#A31515\">&quot;extern&quot;</span> | <span style=\"color:#A31515\">&quot;external&quot;</span>;\r\n\r\n      procedure_heading.Rule = \r\n        procedure_identification | \r\n        procedure_identification + formal_parameter_list;\r\n\r\n      procedure_declaration.Rule = \r\n        procedure_heading + <span style=\"color:#A31515\">&quot;;&quot;</span> + directive | \r\n        procedure_heading + <span style=\"color:#A31515\">&quot;;&quot;</span> + procedure_block;\r\n\r\n      proc_or_func_declaration.Rule = \r\n        procedure_declaration | function_declaration;\r\n\r\n      proc_or_func_declaration_list.Rule = \r\n        MakePlusRule(proc_or_func_declaration_list, Symbol(<span style=\"color:#A31515\">&quot;;&quot;</span>), proc_or_func_declaration);\r\n\r\n      procedure_and_function_declaration_part.Rule = \r\n        proc_or_func_declaration_list + <span style=\"color:#A31515\">&quot;;&quot;</span> | Empty;\r\n\r\n      variable_declaration.Rule = \r\n        identifier_list + <span style=\"color:#A31515\">&quot;:&quot;</span> + type_denoter;\r\n      \r\n      variable_declaration_list.Rule = \r\n        MakePlusRule(variable_declaration_list, Symbol(<span style=\"color:#A31515\">&quot;;&quot;</span>), variable_declaration);\r\n\r\n      variable_declaration_part.Rule = \r\n        <span style=\"color:#A31515\">&quot;var&quot;</span> + variable_declaration_list + <span style=\"color:#A31515\">&quot;;&quot;</span> | Empty;\r\n\r\n      domain_type.Rule = identifier;\r\n\r\n      new_pointer_type.Rule = (Symbol(<span style=\"color:#A31515\">&quot;^&quot;</span>) | <span style=\"color:#A31515\">&quot;-&gt;&quot;</span> | <span style=\"color:#A31515\">&quot;@&quot;</span>) + domain_type;\r\n\r\n      file_type.Rule = <span style=\"color:#A31515\">&quot;file&quot;</span> + <span style=\"color:#A31515\">&quot;of&quot;</span>+ component_type;\r\n\r\n      base_type.Rule = ordinal_type;\r\n\r\n      set_type.Rule = <span style=\"color:#A31515\">&quot;set&quot;</span> + <span style=\"color:#A31515\">&quot;of&quot;</span> + base_type;\r\n\r\n      tag_type.Rule = identifier ;\r\n\r\n      tag_field.Rule = identifier ;\r\n\r\n      case_constant.Rule = \r\n        constant | constant + <span style=\"color:#A31515\">&quot;..&quot;</span> + constant;\r\n\r\n      case_constant_list.Rule = \r\n        MakePlusRule(case_constant_list, Symbol(<span style=\"color:#A31515\">&quot;,&quot;</span>), case_constant);\r\n\r\n      variant.Rule =  \r\n        case_constant_list + <span style=\"color:#A31515\">&quot;:&quot;</span> + <span style=\"color:#A31515\">&quot;(&quot;</span> + record_section_list + <span style=\"color:#A31515\">&quot;)&quot;</span> | \r\n        case_constant_list + <span style=\"color:#A31515\">&quot;:&quot;</span> + <span style=\"color:#A31515\">&quot;(&quot;</span> + record_section_list + <span style=\"color:#A31515\">&quot;;&quot;</span> + variant_part + <span style=\"color:#A31515\">&quot;)&quot;</span> | \r\n        case_constant_list + <span style=\"color:#A31515\">&quot;:&quot;</span> + <span style=\"color:#A31515\">&quot;(&quot;</span> + variant_part + <span style=\"color:#A31515\">&quot;)&quot;</span>;\r\n\r\n      variant_list.Rule = \r\n        MakePlusRule(variant_list, Symbol(<span style=\"color:#A31515\">&quot;;&quot;</span>), variant);\r\n\r\n      variant_selector.Rule = \r\n        tag_field + <span style=\"color:#A31515\">&quot;:&quot;</span> + tag_type | tag_type;\r\n\r\n      variant_part.Rule = \r\n        <span style=\"color:#A31515\">&quot;case&quot;</span> + variant_selector + <span style=\"color:#A31515\">&quot;of&quot;</span> + variant_list + <span style=\"color:#A31515\">&quot;;&quot;</span> | \r\n        <span style=\"color:#A31515\">&quot;case&quot;</span> + variant_selector + <span style=\"color:#A31515\">&quot;of&quot;</span> + variant_list | \r\n        Empty;\r\n\r\n      record_section.Rule = \r\n        identifier_list + <span style=\"color:#A31515\">&quot;:&quot;</span> + type_denoter;\r\n\r\n      record_section_list.Rule = \r\n        MakePlusRule(record_section_list, Symbol(<span style=\"color:#A31515\">&quot;;&quot;</span>), record_section);\r\n\r\n      record_type.Rule = \r\n        <span style=\"color:#A31515\">&quot;record&quot;</span> + record_section_list + <span style=\"color:#A31515\">&quot;end&quot;</span> | \r\n        <span style=\"color:#A31515\">&quot;record&quot;</span> + record_section_list + <span style=\"color:#A31515\">&quot;;&quot;</span> + variant_part + <span style=\"color:#A31515\">&quot;end&quot;</span> |\r\n        <span style=\"color:#A31515\">&quot;record&quot;</span> + variant_part + <span style=\"color:#A31515\">&quot;end&quot;</span>;\r\n\r\n      component_type.Rule = type_denoter;\r\n\r\n      ordinal_type.Rule = new_ordinal_type | identifier;\r\n\r\n      index_type.Rule = ordinal_type;\r\n      \r\n      index_list.Rule = \r\n        MakePlusRule(index_list, Symbol(<span style=\"color:#A31515\">&quot;;&quot;</span>), index_type);\r\n      \r\n      array_type.Rule = \r\n        <span style=\"color:#A31515\">&quot;array&quot;</span> + <span style=\"color:#A31515\">&quot;(&quot;</span> + index_list + <span style=\"color:#A31515\">&quot;)&quot;</span> + <span style=\"color:#A31515\">&quot;of&quot;</span> + component_type;\r\n\r\n      structured_type.Rule = \r\n        array_type | \r\n        record_type | \r\n        set_type | \r\n        file_type;\r\n\r\n      new_structured_type.Rule = \r\n        structured_type | <span style=\"color:#A31515\">&quot;packed&quot;</span> + structured_type;\r\n\r\n      subrange_type.Rule = constant + <span style=\"color:#A31515\">&quot;..&quot;</span> + constant;\r\n\r\n      enumerated_type.Rule = <span style=\"color:#A31515\">&quot;(&quot;</span> + identifier_list + <span style=\"color:#A31515\">&quot;)&quot;</span>;\r\n\r\n      new_ordinal_type.Rule = \r\n        enumerated_type| \r\n        subrange_type;\r\n\r\n      new_type.Rule = \r\n        new_ordinal_type | \r\n        new_structured_type | \r\n        new_pointer_type;\r\n\r\n      type_denoter.Rule = identifier | new_type;\r\n\r\n      type_definition.Rule = identifier + <span style=\"color:#A31515\">&quot;=&quot;</span> + type_denoter + <span style=\"color:#A31515\">&quot;;&quot;</span>;\r\n\r\n      type_definition_list.Rule = \r\n        MakePlusRule(type_definition_list, type_definition);\r\n      \r\n      type_definition_part.Rule = \r\n        <span style=\"color:#A31515\">&quot;type&quot;</span> + type_definition_list | Empty;\r\n\r\n      non_string.Rule = \r\n        digit_sequence | \r\n        identifier | \r\n        real_number;\r\n\r\n      constant.Rule = \r\n        non_string | \r\n        sign + non_string | \r\n        character_string;\r\n\r\n      cprimary.Rule = \r\n        identifier | \r\n        <span style=\"color:#A31515\">&quot;(&quot;</span> + cexpression + <span style=\"color:#A31515\">&quot;)&quot;</span> | \r\n        unsigned_constant | \r\n        <span style=\"color:#A31515\">&quot;not&quot;</span> + cprimary;\r\n\r\n      cexponentiation.Rule = \r\n        cprimary | cprimary + <span style=\"color:#A31515\">&quot;**&quot;</span> + cexponentiation;\r\n\r\n      cfactor.Rule = \r\n        sign + cfactor | cexponentiation;\r\n\r\n      cterm.Rule = \r\n        cfactor | cterm + multiplying_operator + cfactor;\r\n\r\n      csimple_expression.Rule =  \r\n        cterm | csimple_expression + adding_operator + cterm;\r\n\r\n      cexpression.Rule = \r\n        csimple_expression | \r\n        csimple_expression + relational_operator + csimple_expression;\r\n\r\n      constant_definition.Rule = \r\n        identifier + <span style=\"color:#A31515\">&quot;=&quot;</span> + cexpression + <span style=\"color:#A31515\">&quot;;&quot;</span>;\r\n      \r\n      constant_list.Rule = \r\n        MakePlusRule(constant_list, constant_definition);\r\n\r\n      constant_definition_part.Rule = \r\n        <span style=\"color:#A31515\">&quot;const&quot;</span> + constant_list | Empty;\r\n\r\n      label.Rule =  digit_sequence;\r\n\r\n      label_list.Rule = \r\n        MakePlusRule(label_list, Symbol(<span style=\"color:#A31515\">&quot;,&quot;</span>), label);\r\n\r\n      label_declaration_part.Rule = \r\n        <span style=\"color:#A31515\">&quot;label&quot;</span> + label_list + <span style=\"color:#A31515\">&quot;;&quot;</span> | Empty;\r\n\r\n      module.Rule = \r\n        constant_definition_part + \r\n        type_definition_part +\r\n        variable_declaration_part + \r\n        procedure_and_function_declaration_part;\r\n\r\n      block.Rule = \r\n        label_declaration_part + \r\n        constant_definition_part + \r\n        type_definition_part +\r\n        variable_declaration_part + \r\n        procedure_and_function_declaration_part +\r\n        statement_part;\r\n\r\n      identifier_list.Rule = \r\n        MakePlusRule(identifier_list, Symbol(<span style=\"color:#A31515\">&quot;,&quot;</span>), identifier);\r\n\r\n      program_heading.Rule = \r\n        <span style=\"color:#A31515\">&quot;program&quot;</span> + identifier | \r\n        <span style=\"color:#A31515\">&quot;program&quot;</span> + identifier + <span style=\"color:#A31515\">&quot;(&quot;</span> + identifier_list + <span style=\"color:#A31515\">&quot;)&quot;</span>;\r\n\r\n      program.Rule = program_heading + <span style=\"color:#A31515\">&quot;;&quot;</span> + block + <span style=\"color:#A31515\">&quot;.&quot;</span>;\r\n\r\n      file.Rule = program | module;\r\n\r\n      <span style=\"color:Blue\">#endregion</span>\r\n\r\n      <span style=\"color:Blue\">#region</span> 4. Set starting symbol\r\n\r\n      <span style=\"color:Blue\">this</span>.Root = file;\r\n\r\n      <span style=\"color:Blue\">#endregion</span>\r\n\r\n      <span style=\"color:Blue\">#region</span> 5. Operators precedence\r\n\r\n      <span style=\"color:Blue\">this</span>.RegisterOperators(1, <span style=\"color:#A31515\">&quot;+&quot;</span>, <span style=\"color:#A31515\">&quot;-&quot;</span>, <span style=\"color:#A31515\">&quot;or&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.RegisterOperators(2, <span style=\"color:#A31515\">&quot;*&quot;</span>, <span style=\"color:#A31515\">&quot;/&quot;</span>, <span style=\"color:#A31515\">&quot;div&quot;</span>, <span style=\"color:#A31515\">&quot;mod&quot;</span>, <span style=\"color:#A31515\">&quot;and&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.RegisterOperators(3, Associativity.Right, <span style=\"color:#A31515\">&quot;**&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.RegisterOperators(4, <span style=\"color:#A31515\">&quot;=&quot;</span>, <span style=\"color:#A31515\">&quot;&lt;&gt;&quot;</span>, <span style=\"color:#A31515\">&quot;&gt;&quot;</span>, <span style=\"color:#A31515\">&quot;&lt;&quot;</span>, <span style=\"color:#A31515\">&quot;&gt;=&quot;</span>, <span style=\"color:#A31515\">&quot;&lt;=&quot;</span>, <span style=\"color:#A31515\">&quot;in&quot;</span>);\r\n\r\n      <span style=\"color:Blue\">#endregion</span>\r\n\r\n      <span style=\"color:Blue\">#region</span> 6. Punctuation symbols\r\n\r\n      <span style=\"color:Blue\">this</span>.RegisterPunctuation(<span style=\"color:#A31515\">&quot;;&quot;</span>, <span style=\"color:#A31515\">&quot;,&quot;</span>, <span style=\"color:#A31515\">&quot;.&quot;</span>, <span style=\"color:#A31515\">&quot;..&quot;</span>, <span style=\"color:#A31515\">&quot;(&quot;</span>, <span style=\"color:#A31515\">&quot;)&quot;</span>, <span style=\"color:#A31515\">&quot;{&quot;</span>, <span style=\"color:#A31515\">&quot;}&quot;</span>, <span style=\"color:#A31515\">&quot;[&quot;</span>, <span style=\"color:#A31515\">&quot;]&quot;</span>, <span style=\"color:#A31515\">&quot;:&quot;</span>);\r\n\r\n      <span style=\"color:Blue\">this</span>.RegisterBracePair(<span style=\"color:#A31515\">&quot;(.&quot;</span>, <span style=\"color:#A31515\">&quot;.)&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.RegisterBracePair(<span style=\"color:#A31515\">&quot;[&quot;</span>, <span style=\"color:#A31515\">&quot;]&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.RegisterBracePair(<span style=\"color:#A31515\">&quot;{&quot;</span>, <span style=\"color:#A31515\">&quot;}&quot;</span>);\r\n      <span style=\"color:Blue\">this</span>.RegisterBracePair(<span style=\"color:#A31515\">&quot;(*&quot;</span>, <span style=\"color:#A31515\">&quot;*)&quot;</span>);\r\n\r\n      <span style=\"color:Blue\">#endregion</span>\r\n    }\r\n  }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-29T07:31:44.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "240287",
    "ThreadId": "70460",
    "Html": "<p>Thanks a lot for sharing, much to learn from this. :)</p>",
    "PostedDate": "2009-09-30T00:47:24.737-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241166",
    "ThreadId": "70460",
    "Html": "<p>Nice work! Will definitely add it to sample grammars - with 99bottles.pas of course!</p>\r\n<p>Did you get any parser conflicts? If not, that's a great result!</p>\r\n<p>Just with quick look, without compiling -&nbsp;a few comments:</p>\r\n<p>identifier - you don't need this .AddPrefix line, identifier by default expects first char as a letter and following as letters/digits</p>\r\n<p>charcode literal - specifying # as prefix - prefix is actually optional for a number, which means parser may read &quot; 123&quot; as a charcode with skipped # prefix.</p>\r\n<p>it is better to specify it as a non-terminal with rule like &quot;#&quot; + intNumber</p>\r\n<p>realnumber - You should not specify this HasDot flag, it is for internal use and is set when scanner actually sees the dot. I know it is confusing, I will refactor it.</p>\r\n<p>Specifying binary operation non-terminals and operators (+, -, *, / etc) - you should make use of operator precedence handling in Irony; then you can avoid specifying all these extra nonterminals like cterm, csimple_expression, cexpression etc. Just use a single &quot;binary_operator&quot; and specify precedence values for operator symbols</p>\r\n<p>What's the deal with open/close versions of statement? didn't quite get it... can it be simplified somehow?</p>\r\n<p>thanks again</p>\r\n<p>I will play with it myself when I have time and place it into samples</p>\r\n<p>Roman</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-01T23:18:02.753-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241361",
    "ThreadId": "70460",
    "Html": "<p>Hey Roman!</p>\r\n<p>Thanks for the feedback. I now see your points on both the identifier, charcode literals, and the realnumber.&nbsp;</p>\r\n<p>One question I have about your point on charcode,&nbsp; is wouldn't using a NonTerminal &quot;#&quot; + int allow white-space between the two tokens? And if so, is there a way to create a mandatory prefix?</p>\r\n<p>For the binary operations, you are exactly right. I was just doing a straight port of the YACC/Lexer to Irony. In another project I am working on, I reduced all of these extra rules down to a couple of rules and used the precedence. It is much cleaner and makes much more sense.</p>\r\n<p>Also, just like the binary operators, I'm not sure what the deal is with the open/close version of the operators.&nbsp; I'm sure it can be simplified.</p>\r\n<p>Once time comes available, I may go back through and optimize the grammar for Irony.&nbsp; I did get some successful parses with this version, however most pascal source I found on the web was in Turbo Pascal and not Standard Pascal which have a few differences (ex. uses statement - which could be easily added).</p>\r\n<p>Thanks,</p>\r\n<p>MindCore</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-02T09:15:34.317-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241902",
    "ThreadId": "70460",
    "Html": "<p>About char literal with # prefix - you're right about whitespace, it becomes allowed in this case. Mandatory prefix - not sure, will think about this... in any case, the trouble is that you try to use NumberLiteral for this, and the output value is number, while it would be logical to expect Char .NET type. Will think about this.</p>\r\n<p>thanks</p>\r\n<p>Roman</p>",
    "PostedDate": "2009-10-04T10:18:49.857-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "242949",
    "ThreadId": "70460",
    "Html": "<p>Roman,</p>\r\n<p>I've given what I previously said some thought and actual came to an alternate solution. I'm not sure of the complexities involved in implementing something like this, but is it possible to add a new operator that doesn't allow whitespace between the tokens? Currently, it looks like the | and + symbols are the only two operators, so I would like to suggest the &amp; symbol.</p>\r\n<p>Scenarios:<br> <em>&quot;#&quot; &amp; charcode</em>&nbsp;&nbsp; -&nbsp; would match to &quot;#27&quot;, but would not match to &quot;# 27&quot;<br> Or in HTML, character literals like this<br> <em>&quot;&amp;&quot; &amp; charcode &amp; &quot;;&quot;</em>&nbsp; -&nbsp; which would be used to capture things like &quot;&amp;nbsp;&quot; or &quot;&amp;amp;&quot;<br><br></p>\r\n<p>The major problem I see with this suggestion is rule precedents.</p>\r\n<p>Example:<br> If a developer had the following two rules, which one would win?<br> <em>term1.Rule = &quot;#&quot; + charcode;<br> term2.Rule = &quot;#&quot; &amp; charcode;</em><br><br></p>\r\n<p>Just some thoughts, let me know what you think.</p>\r\n<p>Thanks,<br> MindCore</p>",
    "PostedDate": "2009-10-07T06:33:38.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "243479",
    "ThreadId": "70460",
    "Html": "<p>That's an interesting suggestion, and I will look into this. However, this &amp; operator would probably come as an enhancement, syntax sugar over basic&nbsp;implementation which probably should be a grammar hint, with something like NoWhitespace()&nbsp;method injected inside the expression that would signal to parser that here you&nbsp;shouldn't bypass whitespaces before starting to&nbsp;scan the token. The &amp; operator then would simply work as combination of &quot;+ NoWhitespace() + &quot;. The problem is now to figure out how to modify parser/scanner to handle this situation. I think it's possible, and&nbsp;I will give&nbsp;it a try.</p>\r\n<p>thanks for the suggestion!</p>\r\n<p>Roman&nbsp;</p>",
    "PostedDate": "2009-10-08T08:16:37.84-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]