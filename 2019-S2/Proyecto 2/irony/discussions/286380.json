[
  {
    "Id": "726181",
    "ThreadId": "286380",
    "Html": "<div style=\"background-color: white; color: black;\">Hello,</div>\n<p>I have same problem with operators associativity. I have following grammar:</p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\">using</span> Irony.Interpreter;\r\n<span style=\"color: blue;\">using</span> Irony.Interpreter.Ast;\r\n<span style=\"color: blue;\">using</span> Irony.Parsing;\r\n<span style=\"color: blue;\">using</span> IronyTests.AST;\r\n\r\n<span style=\"color: blue;\">namespace</span> IronyTests.Grammars\r\n{\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> SimpleCalcGrammar : InterpretedLanguageGrammar\r\n    {\r\n        <span style=\"color: blue;\">#region</span> .ctors\r\n\r\n        <span style=\"color: blue;\">public</span> SimpleCalcGrammar()\r\n            : <span style=\"color: blue;\">base</span>(<span style=\"color: blue;\">false</span>)\r\n        {\r\n            NumberLiteral number = TerminalFactory.CreateCSharpNumber(<span style=\"color: #a31515;\">\"number\"</span>);\r\n            IdentifierTerminal identifier = TerminalFactory.CreateCSharpIdentifier(<span style=\"color: #a31515;\">\"identifier\"</span>);\r\n\r\n            NonTerminal expression = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"expression\"</span>);\r\n            NonTerminal binexpr = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"binexpr\"</span>, <span style=\"color: blue;\">typeof</span>(BinaryOperationNode));\r\n            NonTerminal parexpr = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"parexpr\"</span>, <span style=\"color: blue;\">typeof</span>(BracketsNode));\r\n            NonTerminal fncall = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"fncall\"</span>, <span style=\"color: blue;\">typeof</span>(IronyTests.AST.FunctionCallNode));\r\n            NonTerminal binop = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"binop\"</span>);\r\n\r\n            expression.Rule = parexpr | binexpr | number | fncall;\r\n            parexpr.Rule = <span style=\"color: #a31515;\">\"(\"</span> + expression + <span style=\"color: #a31515;\">\")\"</span>;\r\n            binexpr.Rule = expression + binop + expression;\r\n            binop.Rule = <span style=\"color: blue;\">this</span>.ToTerm(<span style=\"color: #a31515;\">\"+\"</span>) | <span style=\"color: #a31515;\">\"-\"</span> | <span style=\"color: #a31515;\">\"/\"</span> | <span style=\"color: #a31515;\">\"*\"</span> | <span style=\"color: #a31515;\">\"%\"</span>;\r\n            fncall.Rule = identifier + <span style=\"color: #a31515;\">\"(\"</span> + expression + <span style=\"color: #a31515;\">\")\"</span>;\r\n\r\n            <span style=\"color: blue;\">this</span>.RegisterBracePair(<span style=\"color: #a31515;\">\"(\"</span>, <span style=\"color: #a31515;\">\")\"</span>);\r\n            <span style=\"color: blue;\">this</span>.RegisterOperators(1, Associativity.Left, <span style=\"color: #a31515;\">\"+\"</span>, <span style=\"color: #a31515;\">\"-\"</span>);\r\n            <span style=\"color: blue;\">this</span>.RegisterOperators(2, Associativity.Left, <span style=\"color: #a31515;\">\"*\"</span>, <span style=\"color: #a31515;\">\"/\"</span>, <span style=\"color: #a31515;\">\"%\"</span>);\r\n\r\n            <span style=\"color: blue;\">this</span>.MarkTransient(expression, binop);\r\n            \r\n            <span style=\"color: blue;\">this</span>.Root = expression;\r\n            <span style=\"color: blue;\">this</span>.LanguageFlags = Irony.Parsing.LanguageFlags.CreateAst;\r\n        }\r\n\r\n        <span style=\"color: blue;\">#endregion</span>\r\n    }\r\n}\r\n</pre>\n</div>\n<p>I test my grammar by using following code:&uml;</p>\n<div style=\"color: black; background-color: white;\">\n<pre>SimpleCalcGrammar g = <span style=\"color: blue;\">new</span> SimpleCalcGrammar();\r\nParser p = <span style=\"color: blue;\">new</span> Parser(g);\r\nParseTree t = p.Parse(<span style=\"color: #a31515;\">\"2+3*3*3\"</span>);\r\n\r\nIrony.Interpreter.ScriptApp interpreter = <span style=\"color: blue;\">new</span> Irony.Interpreter.ScriptApp(<span style=\"color: blue;\">new</span> LanguageData(<span style=\"color: blue;\">new</span> SimpleCalcGrammar()));\r\n<span style=\"color: blue;\">object</span> vvv = interpreter.Evaluate(<span style=\"color: #a31515;\">\"2+3*3*3\"</span>);\r\n\r\n</pre>\n</div>\n<p>I dont know why but result of Evaluate method call is 33 but valid result is 29. Can you please help me?<br />Thank you very much.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<div style=\"background-color: white; color: black;\">\n<pre>\r\n</pre>\n</div>",
    "PostedDate": "2012-01-16T23:25:11.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "726464",
    "ThreadId": "286380",
    "Html": "<p>Confirmed, this is a bug, or more like design flaw. Will fix it&nbsp;</p>\r\n<p>thanks and sorry for trouble</p>",
    "PostedDate": "2012-01-17T08:06:06.697-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "729066",
    "ThreadId": "286380",
    "Html": "<p>should be fixed now, in the latest version</p>\r\n<p>Roman</p>",
    "PostedDate": "2012-01-22T20:01:58.727-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]