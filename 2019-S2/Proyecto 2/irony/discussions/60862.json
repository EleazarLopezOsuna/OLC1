[
  {
    "Id": "206271",
    "ThreadId": "60862",
    "Html": "<p>Similiar to 'vilx' a couple discussions down I am currently fiddling with the grammar of a custom query language that mimics SQL's where statement.</p>\r\n<p>Here's an example:</p>\r\n<p style=\"padding-left:30px\"><em>TYPE = &lsquo;Some Specified Type Value&rsquo; and (status = &lsquo;- CHAPTER -&rsquo; or status = &lsquo;Accepted&rsquo; or status = &lsquo;Deferred&rsquo; or status = &lsquo;ToBeReviewed&rsquo;) and (hierarchy &gt;= &lsquo;2&rsquo; or hierarchy &gt;= &lsquo;10&rsquo;) and ((Some Attribute like &lsquo;%VA10A%&rsquo;) or (Some Other Attribute like &lsquo;%VA11A%&rsquo;) or (Some third Attribute &gt; '5' and Some fourth Attribute not like '%DEF%'))</em></p>\r\n<p>&nbsp;</p>\r\n<p>The criterias are basically pretty simple:</p>\r\n<ul>\r\n<li>Everything's case insensitive</li>\r\n<li>X conditions can be chained together with the tpyical and / or keywords</li>\r\n<li>Infinite subconditioning with and in ( and ) is possible</li>\r\n<li>Values are all in single or double quotes (' or &quot; ... ignore the weird quotes in the example)</li>\r\n<li>In case of a (not) like condition, the values to compare against are post/prefixed with %'s</li>\r\n<li>Everything's that's left to a comparison operator (= &gt;= &lt;= != etc) is the identifier and these identifiers are <em>not </em>surrounded by quotes and can be multiple words/numbers.</li>\r\n<li>It's always just one line... no multiline input is allowed</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>So what I have right now is the following:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> Irony.CompilerServices;\r\n\r\n<span style=\"color:Blue\">namespace</span> DocFactoryFilter\r\n{\r\n    [Language(<span style=\"color:#A31515\">&quot;DocFactory Filter&quot;</span>, <span style=\"color:#A31515\">&quot;1.0&quot;</span>, <span style=\"color:#A31515\">&quot;Irony.Net Grammar for the darn DocFactory&quot;</span>)]\r\n    <span style=\"color:Blue\">internal</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Grammar : Irony.CompilerServices.Grammar\r\n    </span>{\r\n        <span style=\"color:Blue\">internal</span> Grammar()\r\n            : <span style=\"color:Blue\">base</span>(<span style=\"color:Blue\">false</span>)\r\n        {\r\n            var xBetween = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Between&quot;</span>);\r\n\r\n            var xEquals = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Equals&quot;</span>);\r\n            var xNotEquals = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;NotEquals&quot;</span>);\r\n            var xGreater = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Greater&quot;</span>);\r\n            var xGreaterEqual = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;GreaterEqual&quot;</span>);\r\n            var xLess = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Less&quot;</span>);\r\n            var xLessEqual = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;LessEqual&quot;</span>);\r\n            var xBeginsWith = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;BeginsWith&quot;</span>);\r\n            var xNotBeginsWith = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;NotBeginsWith&quot;</span>);\r\n            var xLike = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Like&quot;</span>);\r\n            var xNotLike = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;NotLike&quot;</span>);\r\n\r\n\r\n            \r\n            var xIdentifier = <span style=\"color:Blue\">new</span> IdentifierTerminal(<span style=\"color:#A31515\">&quot;AttributeIdentifier&quot;</span>);\r\n\r\n            var xValue = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Value&quot;</span>)\r\n                             {\r\n                                 Rule = <span style=\"color:Blue\">new</span> StringLiteral(<span style=\"color:#A31515\">&quot;String&quot;</span>, <span style=\"color:#A31515\">&quot;'&quot;</span>,\r\n                                                          StringFlags.AllowsAllEscapes |\r\n                                                          StringFlags.AllowsDoubledQuote |\r\n                                                          StringFlags.HasEscapes) |\r\n                                                          <span style=\"color:Blue\">new</span> NumberLiteral(<span style=\"color:#A31515\">&quot;Number&quot;</span>)\r\n                             };\r\n\r\n            xBetween.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;between&quot;</span>) + xValue + (<span style=\"color:#A31515\">&quot;and&quot;</span>) + xValue | xIdentifier + (<span style=\"color:#A31515\">&quot;in&quot;</span>) + xValue + (<span style=\"color:#A31515\">&quot;and&quot;</span>) + xValue;\r\n            xEquals.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;=&quot;</span>) + xValue | xValue + (<span style=\"color:#A31515\">&quot;=&quot;</span>) + xIdentifier;\r\n            xNotEquals.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;!=&quot;</span>) + xValue | xValue + (<span style=\"color:#A31515\">&quot;!=&quot;</span>) + xIdentifier | xIdentifier + (<span style=\"color:#A31515\">&quot;&lt;&gt;&quot;</span>) + xValue | xValue + (<span style=\"color:#A31515\">&quot;&lt;&gt;&quot;</span>) + xIdentifier;\r\n            xGreater.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;&gt;&quot;</span>) + xValue | xValue + (<span style=\"color:#A31515\">&quot;&lt;&quot;</span>) + xIdentifier;\r\n            xGreaterEqual.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;&gt;=&quot;</span>) + xValue | xValue + (<span style=\"color:#A31515\">&quot;&lt;=&quot;</span>) + xIdentifier;\r\n            xLess.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;&lt;&quot;</span>) + xValue | xValue + (<span style=\"color:#A31515\">&quot;&gt;&quot;</span>) + xIdentifier;\r\n            xLessEqual.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;&lt;=&quot;</span>) + xValue | xValue + (<span style=\"color:#A31515\">&quot;&gt;=&quot;</span>) + xIdentifier;\r\n            xBeginsWith.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;begins&quot;</span>) + (<span style=\"color:#A31515\">&quot;with&quot;</span>) + xValue;\r\n            xNotBeginsWith.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;not&quot;</span>) + (<span style=\"color:#A31515\">&quot;begins&quot;</span>) + (<span style=\"color:#A31515\">&quot;with&quot;</span>) + xValue;\r\n            xLike.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;like&quot;</span>) + xValue;\r\n            xNotLike.Rule = xIdentifier + (<span style=\"color:#A31515\">&quot;not&quot;</span>) + (<span style=\"color:#A31515\">&quot;like&quot;</span>) + xValue;\r\n\r\n\r\n            var xComparison = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Comparison&quot;</span>)\r\n                                  {\r\n                                      Rule = xBetween\r\n                                             | xEquals\r\n                                             | xNotEquals\r\n                                             | xGreater\r\n                                             | xGreaterEqual\r\n                                             | xLess\r\n                                             | xLessEqual\r\n                                             | xBeginsWith\r\n                                             | xNotBeginsWith\r\n                                             | xLike\r\n                                             | xNotLike\r\n                                  };\r\n\r\n\r\n            var xExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Expression&quot;</span>);\r\n            var xOr = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Or&quot;</span>);\r\n            var xAnd = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;And&quot;</span>);\r\n            var xNot = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Not&quot;</span>);\r\n            var xParenthesis = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Parenthesis&quot;</span>);\r\n\r\n            xParenthesis.SetOption(TermOptions.IsTransient);\r\n\r\n            xOr.Rule = xExpression + (<span style=\"color:#A31515\">&quot;or&quot;</span>) + xExpression | xExpression + (<span style=\"color:#A31515\">&quot;|&quot;</span>) + xExpression;\r\n            xAnd.Rule = xExpression + (<span style=\"color:#A31515\">&quot;and&quot;</span>) + xExpression | xExpression + (<span style=\"color:#A31515\">&quot;&amp;&quot;</span>) + xExpression;\r\n            xNot.Rule = (<span style=\"color:#A31515\">&quot;NOT&quot;</span>) + xExpression;\r\n\r\n            xParenthesis.Rule = (<span style=\"color:#A31515\">&quot;(&quot;</span>) + xExpression + (<span style=\"color:#A31515\">&quot;)&quot;</span>);\r\n            xExpression.Rule = xComparison | xOr | xAnd | xNot | xParenthesis;\r\n\r\n\r\n            RegisterOperators(6, <span style=\"color:#A31515\">&quot;not&quot;</span>);\r\n            RegisterOperators(5, <span style=\"color:#A31515\">&quot;and&quot;</span>);\r\n            RegisterOperators(4, <span style=\"color:#A31515\">&quot;or&quot;</span>);\r\n\r\n            RegisterPunctuation(<span style=\"color:#A31515\">&quot;between&quot;</span>, <span style=\"color:#A31515\">&quot;and&quot;</span>, <span style=\"color:#A31515\">&quot;or&quot;</span>, <span style=\"color:#A31515\">&quot;not&quot;</span>, <span style=\"color:#A31515\">&quot;=&quot;</span>, <span style=\"color:#A31515\">&quot;!=&quot;</span>, <span style=\"color:#A31515\">&quot;&gt;&quot;</span>, <span style=\"color:#A31515\">&quot;&lt;&quot;</span>, <span style=\"color:#A31515\">&quot;&lt;&gt;&quot;</span>, <span style=\"color:#A31515\">&quot;&gt;=&quot;</span>, <span style=\"color:#A31515\">&quot;&lt;=&quot;</span>, <span style=\"color:#A31515\">&quot;begins&quot;</span>, <span style=\"color:#A31515\">&quot;with&quot;</span>, <span style=\"color:#A31515\">&quot;like&quot;</span>, <span style=\"color:#A31515\">&quot;in&quot;</span>, <span style=\"color:#A31515\">&quot;(&quot;</span>, <span style=\"color:#A31515\">&quot;)&quot;</span>);\r\n\r\n            Root = xExpression;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>But when trying to parse that I get the error '<em>Syntax error, expected: between,in,=,!=,&lt;&gt;,&gt;,&gt;=,&lt;,&lt;=,begins,not,like,</em>' and I am kinda lost right now. Does anyone know why this is happening and/or what I can do?</p>\r\n<p>&nbsp;</p>\r\n<p>Any ideas/suggestions are highly appreciated :)</p>\r\n<p>&nbsp;</p>\r\n<p>Cheers &amp; thanks,</p>\r\n<p>-J&ouml;rg</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-27T18:21:47.287-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "206293",
    "ThreadId": "60862",
    "Html": "<p>Hi</p>\r\n<p>In the grid with error message, double-click on state name - this will bring you to the parser state where error occurred. Examine the state, see what terms are expected in shift productions (after &quot;dot&quot;) or as lookaheads of reduce actions (with dot at the end)</p>\r\n<p>this would give you idea what maybe wrong with your grammar.</p>\r\n<p>As a general note. Avoid using this auto-initialize syntax in constructors (with {Rule=...} ) initializers.</p>\r\n<p>Make explicit non-terminals for string literal and number literal.</p>\r\n<p>When defining expression, define it as:</p>\r\n<p>expr.Rule = binExpr | unExpr | compareExpr;</p>\r\n<p>binExpr.Rule = expr + binOp + expr;</p>\r\n<p>binOp =&nbsp;Symbol(&quot;|&quot;) | &quot;or&quot; | &quot;and&quot; | &quot;&amp;&quot;;</p>\r\n<p>and so on - my&nbsp;point, define binary operation with binOp nonterminal in the middle, then list all binary operators in its rule. Also don't forget&nbsp;register all operators - you register &quot;and&quot;, &quot;or&quot;, but forget&nbsp;about &quot;|&quot; and &quot;&amp;&quot;</p>\r\n<p>Roman&nbsp;</p>",
    "PostedDate": "2009-06-28T00:06:15.15-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]