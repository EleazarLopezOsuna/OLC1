[
  {
    "Id": "1299801",
    "ThreadId": "565618",
    "Html": "Hi,\r<br />\n<br />\nNice work on this project. \r<br />\n<br />\nTo help those who are asking how to start, and reduce the questions thereof, I suggest taking the modified README.TXT snippet (below) and posting to the Documentation tab:<br />\n<hr />\nDemo instructions (and show ideas for creating your own language) :\r<br />\nRun Grammar Explorer --<br />\n<ul>\n<li>Open Irony_All.sln solution file in Visual Studio.</li>\n<li>Right-click on the project &quot;030.Irony.GrammarExplorer&quot; and select &quot;Set as StartUp project&quot; from context menu.</li>\n<li>Click Run button on toolbar (F5). Grammar Explorer Window opens.</li>\n<li>\n!!!Important: if you are launching the Grammar Explorer for the first time after downloading Irony and <br />\nif you see that Grammars combobox is not empty, then make sure you clear it: click the button <br />\nnext to the combobox and select &quot;Remove all&quot;\n</li>\n<li>If Grammars combobox on top is empty, click on the button next to it (or right-click the combobox) and select \r<br />\n   &quot;Add grammar&quot; command. In the file-open window that appears, navigate to (root)\\Irony.Samples\\bin\\debug folder and \r<br />\n   select Irony.Samples.dll. Application will popup a small window with a list of grammars in selected assembly. \r<br />\n   Leave all lines checked and click &quot;OK&quot;. The newly added grammars will appear in the grammar combobox.  \r</li>\n<li>Select grammar/language in top combo-box.</li>\n<li>Browse form tabs to see grammar data. </li>\n<li>To parse source code sample, switch to &quot;Test&quot; tab. Click &quot;Load...&quot; button on top of the form. Open file dialog opens.</li>\n<li>Navigate to &lt;root&gt;\\Irony.Samples\\SourceSamples folder. Select source file appropriate for the selected grammar. </li>\n<li>Source file contents are loaded in the text area in the form. Click Parse button to parse the sample. </li>\n<li>The Parse Tree control on the right will show the parse tree for the sample.</li>\n<li>If the button &quot;Run&quot; enabled, click it to execute/evaluate the code. The results are shown in the Output window at the bottom of the form.\r<br />\n  For Expression Evaluator grammar, the output is the result of the last expression or assignment. Interpreter for Scheme\r<br />\n  can execute more complex programs found in SourceSamples\\Scheme subfolder.  \r</li>\n<li>Alternatively you can paste or type your own sample program into source text area. </li>\n<li>Repeat for other selections in the Grammar combobox.</li>\n<li>\nGrammar Explorer restores your last language selection and source sample after you close/restart the form. <br />\n</li>\n</ul>\nNote about Silverlight:\r<br />\nIronySilverlight project in the solution is a version of Irony for use in Silverlight environment. \r<br />\nThis project shares almost all sources files with core Irony project. It has a conditonal symbol SILVERLIGHT defined\r<br />\nand uses it in a few places to select different code pieces for different environments. \r<br />\nThe output assembly name is IronySL.dll. By default this project is not compiled when you build the solution -\r<br />\nso it does not break your build if you don't have SL files on your computer. \r<br />\n<br />\nNote: To compile this project you must have Silverlight 4 Tools installed: \r<br />\n(<a href=\"http://www.microsoft.com/downloads/details.aspx?familyid=9442b0f2-7465-417a-88f3-5e7b5409e9dd&amp;displaylang=en\" rel=\"nofollow\">http://www.microsoft.com/downloads/details.aspx?familyid=9442b0f2-7465-417a-88f3-5e7b5409e9dd&displaylang=en</a>)\r<br />\n<br />\nCredits:\r<br />\nIrony-SL adaptation is by Kirill Osenkov<br />\n<hr />\n... Just a suggestion,\r<br />\nChuck<br />\n",
    "PostedDate": "2014-09-05T11:09:11.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]