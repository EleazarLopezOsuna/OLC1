[
  {
    "Id": "1242524",
    "ThreadId": "544580",
    "Html": "Hi I am building a simple language but having problem to parse<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> System;\n<span style=\"color:Blue;\">using</span> System.Collections;\n<span style=\"color:Blue;\">using</span> System.Collections.Generic;\n<span style=\"color:Blue;\">using</span> System.Data;\n<span style=\"color:Blue;\">using</span> System.Diagnostics;\n<span style=\"color:Blue;\">using</span> Irony.Parsing;\n\n[Language(<span style=\"color:#A31515;\">&quot;Short Script&quot;</span>)]\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> ShortGrammer : Grammar\n{\n    <span style=\"color:Blue;\">public</span> ShortGrammer() : <span style=\"color:Blue;\">base</span>(<span style=\"color:Blue;\">false</span>)\n    {\n        <span style=\"color:Blue;\">dynamic</span> KeyWords = {\n            <span style=\"color:#A31515;\">&quot;Var&quot;</span>,\n            <span style=\"color:#A31515;\">&quot;Proc&quot;</span>,\n            <span style=\"color:#A31515;\">&quot;eProc&quot;</span>,\n            <span style=\"color:#A31515;\">&quot;Program&quot;</span>,\n            <span style=\"color:#A31515;\">&quot;Name&quot;</span>,\n            <span style=\"color:#A31515;\">&quot;Ref&quot;</span>,\n            <span style=\"color:#A31515;\">&quot;Desc&quot;</span>,\n            <span style=\"color:#A31515;\">&quot;[&quot;</span>,\n            <span style=\"color:#A31515;\">&quot;]&quot;</span>,\n            <span style=\"color:#A31515;\">&quot;,&quot;</span>\n        };\n        <span style=\"color:Green;\">//Terminals</span>\n        IdentifierTerminal Identifier = <span style=\"color:Blue;\">default</span>(IdentifierTerminal);\n        StringLiteral String = <span style=\"color:Blue;\">default</span>(StringLiteral);\n        NumberLiteral Number = <span style=\"color:Blue;\">default</span>(NumberLiteral);\n        String = TerminalFactory.CreateVbString(<span style=\"color:#A31515;\">&quot;String&quot;</span>);\n        Number = TerminalFactory.CreateVbNumber(<span style=\"color:#A31515;\">&quot;Number&quot;</span>);\n        Identifier = TerminalFactory.CreateCSharpIdentifier(<span style=\"color:#A31515;\">&quot;Identifier&quot;</span>);\n        <span style=\"color:Green;\">//Non Terminals</span>\n        <span style=\"color:Green;\">//&#39;Collections</span>\n        NonTerminal Program = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Program&quot;</span>);\n        NonTerminal ProgramStatements = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;ProgramStatements&quot;</span>);\n        NonTerminal gVarStatements = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;gVarStatements&quot;</span>);\n        NonTerminal ProcedureStatements = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;ProcedureStatements&quot;</span>);\n        NonTerminal ArgStatements = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;ArgStatements&quot;</span>);\n        NonTerminal Stmnts = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Stmnts&quot;</span>);\n        NonTerminal Values = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Values&quot;</span>);\n        <span style=\"color:Green;\">//&#39;Selfs</span>\n        NonTerminal gVarStatement = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;gVarStatement&quot;</span>);\n        NonTerminal ProgramStatement = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;ProgramStatement&quot;</span>);\n        NonTerminal ProcedureStatement = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;ProcedureStatement&quot;</span>);\n        NonTerminal ProgKeyWord = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;ProgKeyWord&quot;</span>);\n        NonTerminal Stmnt = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Stmnt&quot;</span>);\n        NonTerminal Value = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;Value&quot;</span>);\n        <span style=\"color:Green;\">//Programming</span>\n        <span style=\"color:Green;\">//&#39;Basic</span>\n        Program.Rule = ProgramStatements + gVarStatements + ProcedureStatements;\n        ProgramStatements.Rule = MakeStarRule(ProgramStatements, NewLinePlus, ProgramStatement);\n        gVarStatements.Rule = MakeStarRule(gVarStatements, NewLinePlus, gVarStatement);\n        ProcedureStatements.Rule = MakeStarRule(ProcedureStatements, NewLinePlus, ProcedureStatement);\n        <span style=\"color:Green;\">//&#39;gVar Statement</span>\n        gVarStatement.Rule = ToTerm(KeyWords(0)) + Identifier;\n        <span style=\"color:Green;\">//&#39;Program Statement</span>\n        ProgramStatement.Rule = ToTerm(KeyWords(3)) + ProgKeyWord + String;\n        ProgKeyWord.Rule = ToTerm(KeyWords(4)) | KeyWords(5) | KeyWords(6);\n        <span style=\"color:Green;\">//&#39;Procedure Statement</span>\n        ProcedureStatement.Rule = ToTerm(KeyWords(1)) + Identifier + KeyWords(7) + ArgStatements + KeyWords(8) + NewLinePlus + Stmnts + NewLinePlus + KeyWords(2);\n        ArgStatements.Rule = MakeStarRule(ArgStatements, ToTerm(KeyWords(9)), Identifier);\n        Stmnts.Rule = MakeStarRule(Stmnts, NewLinePlus, Stmnt);\n        Stmnt.Rule = Identifier + Values;\n        Values.Rule = MakeStarRule(Values, Value);\n        Value.Rule = String | Number | Identifier;\n        <span style=\"color:Blue;\">this</span>.Root = Program;\n        MarkPunctuation(KeyWords);\n    }\n}\n<span style=\"color:Green;\">//--------------------------------------------------------------------------------------</span>\n<span style=\"color:Green;\">//--------------------------------------------------------------------------------------</span>\n<span style=\"color:Green;\">//--------------------------------------------------------------------------------------</span>\n<span style=\"color:Green;\">//Program :== ProgramStatements gVarStatements ProcedureStatements</span>\n<span style=\"color:Green;\">//ProgramStatements :== [ProgramStatement+]</span>\n<span style=\"color:Green;\">//gVarStatements :== [gVarStatement+]</span>\n<span style=\"color:Green;\">//ProcedureStatements :== [ProcedureStatement+]</span>\n<span style=\"color:Green;\">//--------------------------------------------------------------------------------------</span>\n<span style=\"color:Green;\">//gVarStatement :== &quot;Var&quot; Identifier</span>\n<span style=\"color:Green;\">//Identifier :== &lt;Base Defination&gt;</span>\n<span style=\"color:Green;\">//--------------------------------------------------------------------------------------</span>\n<span style=\"color:Green;\">//ProgramStatement :== &quot;Program&quot; ProgKw String</span>\n<span style=\"color:Green;\">//ProgKw :== &quot;Name&quot; Or &quot;Ref&quot; Or &quot;Desc&quot;</span>\n<span style=\"color:Green;\">//String :== &lt;Base Defination&gt;</span>\n<span style=\"color:Green;\">//--------------------------------------------------------------------------------------</span>\n<span style=\"color:Green;\">//ProcedureStatement :== &quot;Proc&quot; Identifier &quot;[&quot; ArgStatements &quot;]&quot; NewLine+ Stmnts NewLine+ &quot;eProc&quot;</span>\n<span style=\"color:Green;\">//NewLine :== &lt;Base Defination&gt;</span>\n<span style=\"color:Green;\">//ArgStatements :== [ArgStatement+]</span>\n<span style=\"color:Green;\">//ArgStatement :== Identifier</span>\n<span style=\"color:Green;\">//--------------------------------------------------------------------------------------</span>\n<span style=\"color:Green;\">//Stmnts :== [Stmnt+]</span>\n<span style=\"color:Green;\">//Stmnt :== Identifier Values </span>\n<span style=\"color:Green;\">//Values :== [Value+] </span>\n<span style=\"color:Green;\">//Value :== String Or Number Or Identifier</span>\n<span style=\"color:Green;\">//Number :== &lt;Base Defination&gt;</span>\n<span style=\"color:Green;\">//--------------------------------------------------------------------------------------</span>\n<span style=\"color:Green;\">//--------------------------------------------------------------------------------------</span>\n<span style=\"color:Green;\">//--------------------------------------------------------------------------------------</span>\n\n<span style=\"color:Green;\">//===Sample.ss--------------------------------------------------------------------------</span>\n<span style=\"color:Green;\">//Program Name &quot;my app&quot;</span>\n<span style=\"color:Green;\">//Program Ref &quot;abc.dll&quot;</span>\n<span style=\"color:Green;\">//Program Desc &quot;This is testing program&quot;</span>\n<span style=\"color:Green;\">//Var Name</span>\n<span style=\"color:Green;\">//Var Name2</span>\n<span style=\"color:Green;\">//Proc Name[arg1,arg2]</span>\n<span style=\"color:Green;\">//   do a ,&quot;b&quot; ,4</span>\n<span style=\"color:Green;\">//   test &quot;cmd&quot;</span>\n<span style=\"color:Green;\">//   perform arg1</span>\n<span style=\"color:Green;\">//   set arg2</span>\n<span style=\"color:Green;\">//eProc</span>\r\n</pre></div>I get Parser error Shift-reduce conflicts on inputs: LF<br />\n<br />\nCan anyone help me!<br />\n",
    "PostedDate": "2014-05-07T05:02:30.637-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1243201",
    "ThreadId": "544580",
    "Html": "you have to get familiar with LALR parsing concepts and what conflicts are, no easy way here. Just google, there's plenty on the subject there. For deeper understanding, get books on compiler construction; like Dragon book, or Parsing Techniques (my favorite)\r<br />\nRoman<br />\n",
    "PostedDate": "2014-05-08T10:54:43.933-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1244535",
    "ThreadId": "544580",
    "Html": "Roman is correct...  it really helps to understand parsing concepts to debug &amp; develop your Irony grammars.\r<br />\n<br />\nI just wanted to give you an additional hint to where your problem is possibly located.\r<br />\n<br />\nLF = Line-Feed\r<br />\n<br />\nLooking quickly at your grammar, I see that you use NewLinePlus (which is sometimes referred to as LF+) in your MakeStarRule methods as the delimiter.  Try making these part of your statements' rules instead of part of the MakeStarRule. You may still have some further investigation to ensure that multiple rules do not apply for each possible path (i.e. ProcedureStatement).<br />\n\r<br />\nI have personally found it easier to develop my grammars in the simplest rule definitions as possible and then optimize once I have it working. \r<br />\n<br />\n-MindCore<br />\n",
    "PostedDate": "2014-05-12T12:47:06.607-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]