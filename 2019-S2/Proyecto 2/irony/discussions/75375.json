[
  {
    "Id": "257983",
    "ThreadId": "75375",
    "Html": "<p>Hello!<br> I have a problem with scanning of FreeTextLiteral.<br> That one was detected when input text starts with any character missing in hash table.<br> How to create Terminal which fits free text starts with any character (including latin characters).<br> Can anybody help me?</p>",
    "PostedDate": "2009-11-17T09:45:05.843-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "257990",
    "ThreadId": "75375",
    "Html": "<p>First, do you use this FreeTextLiteral in any of the rules? if not, you should add it to NonGrammarTerminals.</p>\r\n<p>Otherwise, if it is used somewhere, then Scanner should find it. If it does not define any Firsts prefixes (GetFirsts() return null or empty list), it should be automatically added to FallbackTerminals. Step thru the process and check that this is so (stop when scanner tries to find a terminal and check that your FreeTextTerminal is in the list of FallBackTerminals)</p>\r\n<p>Let me know the results</p>\r\n<p>Roman</p>",
    "PostedDate": "2009-11-17T09:52:00.057-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "258030",
    "ThreadId": "75375",
    "Html": "<p>I want to see a free text in the parse tree so I haven't added FreeTextLiteral to NonGrammarTerminals.<br> And FreeTextTerminal is always in the list of FallBackTerminals.<br> I have to scan and parse a text like this:</p>\r\n<p><em> PORTFOLIO_EX Portfolio name;<br> DESCRIPTION Any description;<br> FIRMS_LIST ALL_FIRMS;</em></p>\r\n<p>I wrote the code below for it:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>          <span style=\"color:Blue\">var</span> PORTFOLIO = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PORTFOLIO&quot;</span>);\r\n          <span style=\"color:Blue\">var</span> METADATA = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;METADATA&quot;</span>);\r\n          <span style=\"color:Blue\">var</span> PORTFOLIO_EX = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PORTFOLIO_EX&quot;</span>);\r\n          <span style=\"color:Blue\">var</span> DESCRIPTION = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;DESCRIPTION&quot;</span>);\r\n          <span style=\"color:Blue\">var</span> FIRMS = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FIRMS&quot;</span>);\r\n          <span style=\"color:Blue\">var</span> LINE_END = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;LINE_END&quot;</span>);\r\n          <span style=\"color:Blue\">var</span> FIRMS_VARIATIONS = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FIRMS_VARIATIONS&quot;</span>);\r\n          <span style=\"color:Blue\">var</span> FIRMS_LIST = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FIRMS_LIST&quot;</span>);\r\n\r\n          <span style=\"color:Blue\">var</span> FREE_TEXT = <span style=\"color:Blue\">new</span> FreeTextLiteral(<span style=\"color:#A31515\">&quot;FREE_TEXT&quot;</span>, <span style=\"color:#A31515\">&quot;;&quot;</span>, <span style=\"color:#A31515\">&quot;\\n&quot;</span>);\r\n          <span style=\"color:Blue\">var</span> SEMICOLON = ToTerm(<span style=\"color:#A31515\">&quot;;&quot;</span>, <span style=\"color:#A31515\">&quot;SEMICOLON&quot;</span>);\r\n          <span style=\"color:Blue\">var</span> COMMA = ToTerm(<span style=\"color:#A31515\">&quot;,&quot;</span>, <span style=\"color:#A31515\">&quot;COMMA&quot;</span>);\r\n          <span style=\"color:Blue\">var</span> FIRM = <span style=\"color:Blue\">new</span> IdentifierTerminal(<span style=\"color:#A31515\">&quot;FIRM&quot;</span>);\r\n\r\n\r\n          <span style=\"color:Blue\">this</span>.Root = PORTFOLIO;\r\n          PORTFOLIO.Rule = METADATA;\r\n          METADATA.Rule = PORTFOLIO_EX + DESCRIPTION + FIRMS;\r\n          PORTFOLIO_EX.Rule = <span style=\"color:#A31515\">&quot;PORTFOLIO_EX&quot;</span> + FREE_TEXT + LINE_END | <span style=\"color:#A31515\">&quot;PORTFOLIO&quot;</span> + FREE_TEXT + LINE_END;\r\n          DESCRIPTION.Rule = <span style=\"color:#A31515\">&quot;DESCRIPTION&quot;</span> + FREE_TEXT + LINE_END;\r\n          FIRMS.Rule = <span style=\"color:#A31515\">&quot;FIRMS_LIST&quot;</span> + FIRMS_VARIATIONS + LINE_END;\r\n          FIRMS_VARIATIONS.Rule = <span style=\"color:#A31515\">&quot;ALL_FIRMS&quot;</span> | FIRMS_LIST;\r\n          FIRMS_LIST.Rule = MakePlusRule(FIRMS_LIST, COMMA, FIRM);\r\n          LINE_END.Rule = SEMICOLON + NewLine;\r\n</pre>\r\n</div>\r\n<p>And it's not working (</p>\r\n<p>Maybe, are there defects in the rules?</p>",
    "PostedDate": "2009-11-17T12:09:41.057-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "258332",
    "ThreadId": "75375",
    "Html": "<p>It would be helpful next time if you provide a sample that you try to parse and also point to the exact place when parser reports an error.</p>\r\n<p>But from what I see my guess would be that the trouble is in PORTFOLIO_EX definition - it should not have LINE_END in both clauses. Semicolon and linebreak are defined as terminators for FREE_TEXT elements and are consumed by this element - in the sense that when parser completes reading FREE_TEXT, the current position of the scanner is at the beginning of the next line, after &quot;\\n&quot;. But parser still wants to see&nbsp;LINE_END, because it is specified in the rule.</p>\r\n<p>So just try removing LINE_END from PORTFOLIO_EX rule. Let me know if it works. If it's not the problem, then please provide a sample and failure position</p>\r\n<p>Roman</p>",
    "PostedDate": "2009-11-18T08:40:45.117-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "258408",
    "ThreadId": "75375",
    "Html": "<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"font-family:'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif;white-space:normal\">I've tried different rules with semicolon and linebreak. They didn't give the result I need. But i still one change:</span></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre style=\"color:#000000;font-family:Consolas, 'Courier New', Courier, monospace;font-size:1em;margin:8px\">          <span style=\"color:blue\">var</span> FREE_TEXT = <span style=\"color:blue\">new</span> FreeTextLiteral(<span style=\"color:#a31515\">&quot;FREE_TEXT&quot;</span>, <span style=\"color:#a31515\">&quot;;&quot;</span>); // &quot;\\n&quot; removed\r\n</pre>\r\n<div><span style=\"font-family:Consolas, 'Courier New', Courier, monospace\"><span style=\"white-space:pre\"><br></span></span></div>\r\n</div>\r\n<p>I made 2 screenshots how it works with grammar:</p>\r\n<p><a href=\"http://picasaweb.google.com/DenisKolodin/PublicScreenshots#5405524059530328114\">Screenshot when parsing fails</a></p>\r\n<p><a href=\"http://picasaweb.google.com/DenisKolodin/PublicScreenshots#5405524062347731970\">Screenshot when it works well</a></p>\r\n<p>As you can see I add prefix for token. The prefix is '@'. And parsing works right. When free text starts with any char which can be start of terminal FIRM it doesn't work (<br> If i add a char to Firsts list of FreeTextLiteral it will work but when text starts with this char.&nbsp;But as I said I want free text can starts with any character (including latin).<br> It isn't good idea to add all latin chars to Firsts list, is it?<br> And more about parsing error. I try to parse text:</p>\r\n<p><em>PORTFOLIO_EX <span style=\"color:#ff0000\"><span style=\"text-decoration:underline\">T</span></span>he very long name of portfolio;</em><br> <em>DESCRIPTION Any description. You can write much here;</em><br> <em>FIRMS_LIST ALL_FIRMS;</em></p>\r\n<p>Error happens at L,C (0, 13). It highlighted red in the parsing text.<br> Error message: Syntax error, expected: FREE_TEXT<br> Parser state: S4</p>\r\n<p>All parser states is below (sorry for the size):</p>\r\n<p>&lt;small&gt; State S0 <br> Shift items: <br> PORTFOLIO' -&gt; &middot;PORTFOLIO EOF  <br> PORTFOLIO -&gt; &middot;METADATA  <br> METADATA -&gt; &middot;PORTFOLIO_EX DESCRIPTION FIRMS  <br> PORTFOLIO_EX -&gt; &middot;PORTFOLIO_EX FREE_TEXT LINE_END  <br> PORTFOLIO_EX -&gt; &middot;PORTFOLIO FREE_TEXT LINE_END  <br> Transitions: PORTFOLIO-&gt;S1, METADATA-&gt;S2, PORTFOLIO_EX-&gt;S3, PORTFOLIO_EX-&gt;S4, PORTFOLIO-&gt;S5,  <br> <br> State S1 <br> Shift items: <br> PORTFOLIO' -&gt; PORTFOLIO &middot;EOF  <br> <br> State S2 <br> Reduce items: <br> PORTFOLIO -&gt; METADATA &middot; [EOF] <br> <br> State S3 <br> Shift items: <br> METADATA -&gt; PORTFOLIO_EX &middot;DESCRIPTION FIRMS  <br> DESCRIPTION -&gt; &middot;DESCRIPTION FREE_TEXT LINE_END  <br> Transitions: DESCRIPTION-&gt;S7, DESCRIPTION-&gt;S8,  <br> <br> State S4 <br> Shift items: <br> PORTFOLIO_EX -&gt; PORTFOLIO_EX &middot;FREE_TEXT LINE_END  <br> Transitions: FREE_TEXT-&gt;S9,  <br> <br> State S5 <br> Shift items: <br> PORTFOLIO_EX -&gt; PORTFOLIO &middot;FREE_TEXT LINE_END  <br> Transitions: FREE_TEXT-&gt;S10,  <br> <br> State S6 <br> Reduce items: <br> PORTFOLIO' -&gt; PORTFOLIO EOF &middot; [] <br> <br> State S7 <br> Shift items: <br> METADATA -&gt; PORTFOLIO_EX DESCRIPTION &middot;FIRMS  <br> FIRMS -&gt; &middot;FIRMS_LIST FIRMS_VARIATIONS LINE_END  <br> Transitions: FIRMS-&gt;S11, FIRMS_LIST-&gt;S12,  <br> <br> State S8 <br> Shift items: <br> DESCRIPTION -&gt; DESCRIPTION &middot;FREE_TEXT LINE_END  <br> Transitions: FREE_TEXT-&gt;S13,  <br> <br> State S9 <br> Shift items: <br> PORTFOLIO_EX -&gt; PORTFOLIO_EX FREE_TEXT &middot;LINE_END  <br> LINE_END -&gt; &middot;SEMICOLON LF  <br> Transitions: LINE_END-&gt;S14, SEMICOLON-&gt;S15,  <br> <br> State S10 <br> Shift items: <br> PORTFOLIO_EX -&gt; PORTFOLIO FREE_TEXT &middot;LINE_END  <br> LINE_END -&gt; &middot;SEMICOLON LF  <br> Transitions: LINE_END-&gt;S16, SEMICOLON-&gt;S15,  <br> <br> State S11 <br> Reduce items: <br> METADATA -&gt; PORTFOLIO_EX DESCRIPTION FIRMS &middot; [EOF] <br> <br> State S12 <br> Shift items: <br> FIRMS -&gt; FIRMS_LIST &middot;FIRMS_VARIATIONS LINE_END  <br> FIRMS_VARIATIONS -&gt; &middot;ALL_FIRMS  <br> FIRMS_VARIATIONS -&gt; &middot;FIRMS_LIST  <br> FIRMS_LIST -&gt; &middot;FIRM  <br> FIRMS_LIST -&gt; &middot;FIRMS_LIST COMMA FIRM  <br> Transitions: FIRMS_VARIATIONS-&gt;S17, ALL_FIRMS-&gt;S18, FIRMS_LIST-&gt;S19, FIRM-&gt;S20,  <br> <br> State S13 <br> Shift items: <br> DESCRIPTION -&gt; DESCRIPTION FREE_TEXT &middot;LINE_END  <br> LINE_END -&gt; &middot;SEMICOLON LF  <br> Transitions: LINE_END-&gt;S21, SEMICOLON-&gt;S15,  <br> <br> State S14 <br> Reduce items: <br> PORTFOLIO_EX -&gt; PORTFOLIO_EX FREE_TEXT LINE_END &middot; [DESCRIPTION] <br> <br> State S15 <br> Shift items: <br> LINE_END -&gt; SEMICOLON &middot;LF  <br> Transitions: [line break]-&gt;S22,  <br> <br> State S16 <br> Reduce items: <br> PORTFOLIO_EX -&gt; PORTFOLIO FREE_TEXT LINE_END &middot; [DESCRIPTION] <br> <br> State S17 <br> Shift items: <br> FIRMS -&gt; FIRMS_LIST FIRMS_VARIATIONS &middot;LINE_END  <br> LINE_END -&gt; &middot;SEMICOLON LF  <br> Transitions: LINE_END-&gt;S23, SEMICOLON-&gt;S15,  <br> <br> State S18 <br> Reduce items: <br> FIRMS_VARIATIONS -&gt; ALL_FIRMS &middot; [SEMICOLON] <br> <br> State S19 (Inadequate) <br> Shift items: <br> FIRMS_LIST -&gt; FIRMS_LIST &middot;COMMA FIRM  <br> Reduce items: <br> FIRMS_VARIATIONS -&gt; FIRMS_LIST &middot; [SEMICOLON] <br> Transitions: COMMA-&gt;S24,  <br> <br> State S20 <br> Reduce items: <br> FIRMS_LIST -&gt; FIRM &middot; [COMMA SEMICOLON] <br> <br> State S21 <br> Reduce items: <br> DESCRIPTION -&gt; DESCRIPTION FREE_TEXT LINE_END &middot; [FIRMS_LIST] <br> <br> State S22 <br> Reduce items: <br> LINE_END -&gt; SEMICOLON LF &middot; [EOF DESCRIPTION FIRMS_LIST] <br> <br> State S23 <br> Reduce items: <br> FIRMS -&gt; FIRMS_LIST FIRMS_VARIATIONS LINE_END &middot; [EOF] <br> <br> State S24 <br> Shift items: <br> FIRMS_LIST -&gt; FIRMS_LIST COMMA &middot;FIRM  <br> Transitions: FIRM-&gt;S25,  <br> <br> State S25 <br> Reduce items: <br> FIRMS_LIST -&gt; FIRMS_LIST COMMA FIRM &middot; [COMMA SEMICOLON]&nbsp;&lt;/small&gt;</p>\r\n<p>Roman, thanks for your desire to help! )</p>\r\n<p>It's possible to scan and parse hard grammars like C# or SQL with Irony.<br> I'm sure it have to work for my task! What can I try else?</p>",
    "PostedDate": "2009-11-18T12:15:14.197-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "258434",
    "ThreadId": "75375",
    "Html": "<p>I see the problem now. If you look at your first screenshot, in the right-bottom corner, you see token list. The second token produced by scanner is &quot;FIRM&quot; - an identifier token you defined for firms. It is Irony's inconsistency in dealing with terminals without prefixes, long outstanding item. The trouble is Scanner.SelectTerminals method. No-prefix terminals are picked up for consideration ONLY if there are no other candidates with prefixes. In your case there is one candidate - &quot;Firm&quot; identifier, so it leaves out the FREE_TEXT which is in FallbackTerminals. This is wrong, it should be fixed, I simply did not come up yet with consistent and reliable fix for this - this is actually more than a fix, it is sort of refactoring and change of entire scanning algorithm. Until now this bug manifested itself in little inconsistencies but your case is blown up by this. Sorry, will get to this ASAP. For now, add all Latin upper and lower letters to Firsts list of FreeTextLiterals you use - yes, it looks silly, and it would work only for English, but would work until the fix is there.</p>\r\n<p>Sorry again</p>\r\n<p>Roman&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-11-18T13:41:48.39-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "258437",
    "ThreadId": "75375",
    "Html": "<p>By the way, quite similar issue is reported in latest bug opened in Issue Tracker page. Need to fix it finally</p>\r\n<p>Roman</p>",
    "PostedDate": "2009-11-18T13:44:11.76-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "258513",
    "ThreadId": "75375",
    "Html": "<p>I've seen this behavior in debugger, but I've been assured&nbsp;that works fine )&nbsp;I thought the problem is in my usage of Irony.</p>\r\n<p>Undoubtedly I'll wait for the newest release where it fixed, because it's simplest then doing the same on any *cc toolkit!</p>\r\n<p><strong>Thank you! )</strong></p>",
    "PostedDate": "2009-11-18T19:51:45.383-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "259439",
    "ThreadId": "75375",
    "Html": "<p>This should be fixed in the latest source drop. Here's what your grammar can look like:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><div style=\"color:Black;background-color:White\"><pre>  <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> SamplePortfolioGrammar : Grammar {\r\n    <span style=\"color:Blue\">public</span> SamplePortfolioGrammar() {\r\n      <span style=\"color:Blue\">var</span> PORTFOLIO = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PORTFOLIO&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> METADATA = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;METADATA&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> PORTFOLIO_EX = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;PORTFOLIO_EX&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> DESCRIPTION = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;DESCRIPTION&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> FIRMS = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FIRMS&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> LINE_END = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;LINE_END&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> FIRMS_VARIATIONS = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FIRMS_VARIATIONS&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> FIRMS_LIST = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;FIRMS_LIST&quot;</span>);\r\n\r\n      <span style=\"color:Blue\">var</span> FREE_TEXT = <span style=\"color:Blue\">new</span> FreeTextLiteral(<span style=\"color:#A31515\">&quot;FREE_TEXT&quot;</span>, <span style=\"color:#A31515\">&quot;\\n&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> SEMICOLON = ToTerm(<span style=\"color:#A31515\">&quot;;&quot;</span>, <span style=\"color:#A31515\">&quot;SEMICOLON&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> COMMA = ToTerm(<span style=\"color:#A31515\">&quot;,&quot;</span>, <span style=\"color:#A31515\">&quot;COMMA&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> FIRM = <span style=\"color:Blue\">new</span> IdentifierTerminal(<span style=\"color:#A31515\">&quot;FIRM&quot;</span>);\r\n\r\n\r\n      <span style=\"color:Blue\">this</span>.Root = PORTFOLIO;\r\n      PORTFOLIO.Rule = METADATA + NewLineStar; <span style=\"color:Green\">//to allow empty lines after</span>\r\n      METADATA.Rule = PORTFOLIO_EX + DESCRIPTION + FIRMS;\r\n      PORTFOLIO_EX.Rule = <span style=\"color:#A31515\">&quot;PORTFOLIO_EX&quot;</span> + FREE_TEXT + LINE_END | <span style=\"color:#A31515\">&quot;PORTFOLIO&quot;</span> + FREE_TEXT + LINE_END;\r\n      DESCRIPTION.Rule = <span style=\"color:#A31515\">&quot;DESCRIPTION&quot;</span> + FREE_TEXT + LINE_END;\r\n      FIRMS.Rule = <span style=\"color:#A31515\">&quot;FIRMS_LIST&quot;</span> + FIRMS_VARIATIONS + LINE_END;\r\n      FIRMS_VARIATIONS.Rule = <span style=\"color:#A31515\">&quot;ALL_FIRMS&quot;</span> | FIRMS_LIST;\r\n      FIRMS_LIST.Rule = MakePlusRule(FIRMS_LIST, COMMA, FIRM);\r\n      LINE_END.Rule = NewLine;\r\n\r\n      RegisterPunctuation(SEMICOLON, LINE_END);\r\n      LanguageFlags |= LanguageFlags.NewLineBeforeEOF;\r\n    }\r\n  }\r\n\r\n</pre>\r\n</div>\r\nThis version does not use any prefixes or require semicolon as terminator. You might also think about removing some superficial things like LINE_END - use NewLine directly</pre>\r\n</div>",
    "PostedDate": "2009-11-21T17:38:38.93-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "259802",
    "ThreadId": "75375",
    "Html": "<p><strong><span style=\"color:#ff0000\"><span style=\"color:#008000\"><span style=\"text-decoration:underline\"> Wow! It works fine!</span></span></span></strong><br> But the semicolon is part of the rules. I looked long for why it works not as a former rules ))) You've removed the ';' char from the FreeTextLiteral ))))))))</p>\r\n<p>Presented rules isn't full. There are many other rules for body of program that I remove which don't use semicalon as separator. Well, now I can add all of them! Thank you!</p>\r\n<p>P.S. If tell the truth I have other problem. I think it is in my definition of the grammar and if I can't solve it I'll post )))</p>\r\n<p>Thanks you help me! )))</p>",
    "PostedDate": "2009-11-23T05:37:38.07-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]