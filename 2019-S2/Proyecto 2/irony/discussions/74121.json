[
  {
    "Id": "253516",
    "ThreadId": "74121",
    "Html": "<p>Using this as an example: http://www.codeproject.com/KB/recipes/VSLanguageService.aspx?msg=2995031, I was trying to get MyC up and going on Irony.</p>\r\n<p>I can get a basic code snippet to compile, but am not clear on the syntax to get it to actually run.</p>\r\n<p>For example, the following will compile:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">int</span> foo(<span style=\"color:Blue\">int</span> a, <span style=\"color:Blue\">int</span> b)\r\n{\r\n   <span style=\"color:Blue\">return</span> a+b;\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>I couldn't figure out how to declare a main, or some equivalent. All I am able to do is compile functions, I can't call them.</p>\r\n<p>&nbsp;</p>\r\n<p>If anyone know how to then call the methods I'd like to know.</p>\r\n<p>The grammar I am using is listed below. Any help is greatly appreciated.</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> MyC : Irony.Parsing.Grammar\r\n    {\r\n        <span style=\"color:Blue\">public</span> MyC()\r\n        {\r\n            <span style=\"color:Blue\">#region</span> Declare Terminals Here\r\n            CommentTerminal blockComment = <span style=\"color:Blue\">new</span> CommentTerminal(<span style=\"color:#A31515\">&quot;block-comment&quot;</span>, <span style=\"color:#A31515\">&quot;/*&quot;</span>, <span style=\"color:#A31515\">&quot;*/&quot;</span>);\r\n            CommentTerminal lineComment = <span style=\"color:Blue\">new</span> CommentTerminal(<span style=\"color:#A31515\">&quot;line-comment&quot;</span>, <span style=\"color:#A31515\">&quot;//&quot;</span>, <span style=\"color:#A31515\">&quot;\\r&quot;</span>, <span style=\"color:#A31515\">&quot;\\n&quot;</span>, <span style=\"color:#A31515\">&quot;\\u2085&quot;</span>, <span style=\"color:#A31515\">&quot;\\u2028&quot;</span>, <span style=\"color:#A31515\">&quot;\\u2029&quot;</span>);\r\n            NonGrammarTerminals.Add(blockComment);\r\n            NonGrammarTerminals.Add(lineComment);\r\n\r\n            NumberLiteral number = <span style=\"color:Blue\">new</span> NumberLiteral(<span style=\"color:#A31515\">&quot;number&quot;</span>);\r\n            number.AddPrefix(<span style=\"color:#A31515\">&quot;0x&quot;</span>, NumberFlags.Hex);\r\n            number.AddSuffixCodes(<span style=\"color:#A31515\">&quot;f&quot;</span>, TypeCode.Single);\r\n\r\n            IdentifierTerminal identifier = <span style=\"color:Blue\">new</span> IdentifierTerminal(<span style=\"color:#A31515\">&quot;identifier&quot;</span>);\r\n            <span style=\"color:Blue\">#endregion</span>\r\n\r\n            <span style=\"color:Blue\">#region</span> Declare NonTerminals Here\r\n            NonTerminal program = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;program&quot;</span>);\r\n            NonTerminal declarations = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;declaration&quot;</span>);\r\n            NonTerminal declaration = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;declaration&quot;</span>);\r\n            NonTerminal simpleDeclarations = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;simple-declarations&quot;</span>);\r\n            NonTerminal simpleDeclaration = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;simple-declaration&quot;</span>);\r\n            NonTerminal semiDeclaration = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;semi-declaration&quot;</span>);\r\n            NonTerminal parenParameters = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;paren-parameters&quot;</span>);\r\n            NonTerminal parameters = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;parameters&quot;</span>);\r\n            NonTerminal classOption = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;class-option&quot;</span>);\r\n            NonTerminal variableType = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;variable-type&quot;</span>);\r\n            NonTerminal block = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;block&quot;</span>);\r\n            NonTerminal blockContent = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;block-content&quot;</span>);\r\n            NonTerminal statements = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;statements&quot;</span>);\r\n            NonTerminal statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;statement&quot;</span>);\r\n            NonTerminal parenExpressionAlways = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;paren-expression-always&quot;</span>);\r\n            NonTerminal parenExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;paren-expression&quot;</span>);\r\n            NonTerminal forHeader = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;for-header&quot;</span>);\r\n            NonTerminal forBlock = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;for-block&quot;</span>);\r\n            NonTerminal semiStatement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;semi-statement&quot;</span>);\r\n            NonTerminal arguments = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;arguments&quot;</span>);\r\n            NonTerminal parenArguments = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;paren-arguments&quot;</span>);\r\n            NonTerminal assignExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;assign-expression&quot;</span>);\r\n            NonTerminal expression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;expression&quot;</span>);\r\n            NonTerminal booleanOperator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;boolean-operator&quot;</span>);\r\n            NonTerminal relationalExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;relational-expression&quot;</span>);\r\n            NonTerminal relationalOperator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;relational-operator&quot;</span>);\r\n            NonTerminal bitExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;bit-expression&quot;</span>);\r\n            NonTerminal bitOperator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;bit-operator&quot;</span>);\r\n            NonTerminal addExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;add-expression&quot;</span>);\r\n            NonTerminal addOperator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;add-operator&quot;</span>);\r\n            NonTerminal multiplyExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;muliply-expression&quot;</span>);\r\n            NonTerminal multiplyOperator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;multiply-operator&quot;</span>);\r\n            NonTerminal prefixExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;prefix-expression&quot;</span>);\r\n            NonTerminal prefixOperator = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;prefix-operator&quot;</span>);\r\n            NonTerminal factor = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;factor&quot;</span>);\r\n            NonTerminal identifierExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;identifier-expression&quot;</span>);\r\n            <span style=\"color:Blue\">#endregion</span>\r\n\r\n            <span style=\"color:Blue\">#region</span> Place Rules Here\r\n            \r\n\r\n            declarations.Rule = MakeStarRule(declarations, declaration);\r\n\r\n            <span style=\"color:Green\">//Must follow declarations so that assignment is made after rule is initialized.</span>\r\n            program.Rule = declarations.Rule;\r\n\r\n            declaration.Rule\r\n                = classOption + variableType + identifier + parameters + block\r\n                | classOption + identifier + parenParameters + block\r\n                | variableType + identifier + parenParameters + block\r\n                | identifier + parenParameters + block\r\n                | simpleDeclaration;\r\n\r\n            simpleDeclarations.Rule = MakePlusRule(simpleDeclarations, simpleDeclaration);\r\n\r\n            simpleDeclaration.Rule = semiDeclaration + <span style=\"color:#A31515\">&quot;;&quot;</span>;\r\n\r\n            semiDeclaration.Rule\r\n                = semiDeclaration + <span style=\"color:#A31515\">&quot;,&quot;</span> + identifier\r\n                | classOption + variableType + identifier\r\n                | variableType + identifier;\r\n\r\n            parameters.Rule\r\n                = parameters + <span style=\"color:#A31515\">&quot;,&quot;</span> + variableType + identifier\r\n                | variableType + identifier;\r\n\r\n            parenParameters.Rule\r\n                = Symbol(<span style=\"color:#A31515\">&quot;(&quot;</span>) + <span style=\"color:#A31515\">&quot;)&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;(&quot;</span> + parameters + <span style=\"color:#A31515\">&quot;)&quot;</span>;\r\n\r\n            classOption.Rule\r\n                = Symbol(<span style=\"color:#A31515\">&quot;static&quot;</span>)\r\n                | <span style=\"color:#A31515\">&quot;auto&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;extern&quot;</span>;\r\n\r\n            variableType.Rule\r\n                = Symbol(<span style=\"color:#A31515\">&quot;int&quot;</span>)\r\n                | <span style=\"color:#A31515\">&quot;void&quot;</span>;\r\n\r\n            block.Rule\r\n                = Symbol(<span style=\"color:#A31515\">&quot;{&quot;</span>) + <span style=\"color:#A31515\">&quot;}&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;{&quot;</span> + blockContent + <span style=\"color:#A31515\">&quot;}&quot;</span>;\r\n\r\n            blockContent.Rule\r\n                = simpleDeclarations + statements\r\n                | simpleDeclarations\r\n                | statements;\r\n\r\n            statements.Rule = MakePlusRule(statements, statement);\r\n\r\n            statement.Rule\r\n                = semiStatement + <span style=\"color:#A31515\">&quot;;&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;while&quot;</span> + parenExpression + statement\r\n                | <span style=\"color:#A31515\">&quot;for&quot;</span> + forHeader + statement\r\n                | <span style=\"color:#A31515\">&quot;if&quot;</span> + parenExpression + statement\r\n                | <span style=\"color:#A31515\">&quot;if&quot;</span> + parenExpression + statement + PreferShiftHere() + <span style=\"color:#A31515\">&quot;else&quot;</span> + statement;\r\n\r\n            parenExpression.Rule = Symbol(<span style=\"color:#A31515\">&quot;(&quot;</span>) + expression + <span style=\"color:#A31515\">&quot;)&quot;</span>;\r\n\r\n            forHeader.Rule = <span style=\"color:#A31515\">&quot;(&quot;</span> + forBlock + <span style=\"color:#A31515\">&quot;)&quot;</span>;\r\n\r\n            forBlock.Rule = assignExpression + <span style=\"color:#A31515\">&quot;;&quot;</span> + expression + <span style=\"color:#A31515\">&quot;;&quot;</span> + assignExpression;\r\n\r\n            semiStatement.Rule\r\n                = assignExpression\r\n                | <span style=\"color:#A31515\">&quot;return&quot;</span> + expression\r\n                | <span style=\"color:#A31515\">&quot;break&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;continue&quot;</span>;\r\n\r\n            arguments.Rule\r\n                = expression + <span style=\"color:#A31515\">&quot;,&quot;</span> + arguments\r\n                | expression;\r\n\r\n            parenArguments.Rule\r\n                = Symbol(<span style=\"color:#A31515\">&quot;(&quot;</span>) + <span style=\"color:#A31515\">&quot;)&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;(&quot;</span> + arguments + <span style=\"color:#A31515\">&quot;)&quot;</span>;\r\n\r\n            assignExpression.Rule\r\n                = identifier + <span style=\"color:#A31515\">&quot;=&quot;</span> + expression\r\n                | expression;\r\n\r\n            expression.Rule\r\n                = relationalExpression + booleanOperator + expression\r\n                | relationalExpression;\r\n\r\n            booleanOperator.Rule\r\n                = Symbol(<span style=\"color:#A31515\">&quot;&amp;&amp;&quot;</span>)\r\n                | <span style=\"color:#A31515\">&quot;||&quot;</span>;\r\n\r\n            relationalExpression.Rule\r\n                = bitExpression + relationalOperator + bitExpression\r\n                | bitExpression;\r\n\r\n            relationalOperator.Rule\r\n                = Symbol(<span style=\"color:#A31515\">&quot;&gt;&quot;</span>)\r\n                | <span style=\"color:#A31515\">&quot;&gt;=&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;&lt;&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;&lt;=&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;==&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;!=&quot;</span>;\r\n\r\n            bitExpression.Rule\r\n                = addExpression + bitOperator + bitExpression\r\n                | addExpression;\r\n\r\n            bitOperator.Rule\r\n                = Symbol(<span style=\"color:#A31515\">&quot;|&quot;</span>)\r\n                | <span style=\"color:#A31515\">&quot;&amp;&quot;</span>\r\n                | <span style=\"color:#A31515\">&quot;^&quot;</span>;\r\n\r\n            addExpression.Rule\r\n                = multiplyExpression + addOperator + addExpression\r\n                | prefixExpression;\r\n\r\n            addOperator.Rule\r\n                = Symbol(<span style=\"color:#A31515\">&quot;+&quot;</span>) | <span style=\"color:#A31515\">&quot;-&quot;</span>;\r\n\r\n            multiplyExpression.Rule\r\n                = prefixExpression + multiplyOperator + multiplyExpression\r\n                | prefixExpression;\r\n\r\n            multiplyOperator.Rule\r\n                = Symbol(<span style=\"color:#A31515\">&quot;*&quot;</span>)\r\n                | <span style=\"color:#A31515\">&quot;/&quot;</span>;\r\n\r\n            prefixExpression.Rule\r\n                = prefixOperator + factor\r\n                | factor;\r\n\r\n            prefixOperator.Rule = Symbol(<span style=\"color:#A31515\">&quot;!&quot;</span>);\r\n\r\n            factor.Rule\r\n                = identifierExpression + parenArguments\r\n                | identifierExpression\r\n                | number\r\n                | parenExpression;\r\n\r\n            identifierExpression.Rule\r\n                = identifier\r\n                | identifierExpression + <span style=\"color:#A31515\">&quot;.&quot;</span> + identifier;\r\n            <span style=\"color:Blue\">#endregion</span>\r\n\r\n            <span style=\"color:Blue\">#region</span> Define Keywords and Register Symbols\r\n            <span style=\"color:Green\">//this.AddKeywords(&quot;break&quot;, &quot;continue&quot;, &quot;else&quot;, &quot;extern&quot;, &quot;for&quot;,</span>\r\n            <span style=\"color:Green\">//    &quot;if&quot;, &quot;int&quot;, &quot;return&quot;, &quot;static&quot;, &quot;void&quot;, &quot;while&quot;);</span>\r\n\r\n            <span style=\"color:Blue\">this</span>.RegisterBracePair(<span style=\"color:#A31515\">&quot;{&quot;</span>, <span style=\"color:#A31515\">&quot;}&quot;</span>);\r\n            <span style=\"color:Blue\">this</span>.RegisterBracePair(<span style=\"color:#A31515\">&quot;(&quot;</span>, <span style=\"color:#A31515\">&quot;)&quot;</span>);\r\n\r\n            <span style=\"color:Blue\">this</span>.RegisterOperators(1, <span style=\"color:#A31515\">&quot;+&quot;</span>, <span style=\"color:#A31515\">&quot;-&quot;</span>);\r\n            <span style=\"color:Blue\">this</span>.RegisterOperators(2, <span style=\"color:#A31515\">&quot;*&quot;</span>, <span style=\"color:#A31515\">&quot;/&quot;</span>);\r\n            <span style=\"color:Blue\">#endregion</span>\r\n\r\n\r\n            \r\n\r\n\r\n            <span style=\"color:Blue\">this</span>.Root = expression;\r\n            <span style=\"color:Blue\">this</span>.LanguageFlags = LanguageFlags.CreateAst | LanguageFlags.CanRunSample;\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-11-04T15:41:04.843-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "253523",
    "ThreadId": "74121",
    "Html": "<p>I'm afraid you're a bit confused. Having Irony grammar for a language allows you to parse it. To execute it, some more should be done: AST node types defined&nbsp;for non-terminals. If you look at expression evaluator grammar, you'll see that non-terminals declarations have this second parameter &quot;typeof(xxxNode)&quot; - this is for construction of executable AST tree. For GWBasic grammar, and MyC as well, these nodes are not defined, so all Irony can do is just parse it into a parse tree.</p>\r\n<p>And I'm afraid you can't modify these grammars easily to make them run the scripts - the Irony's AST node set is very limited now, it is enough only for very primitive languages, like ExprEvaluator or mini-Python.</p>\r\n<p>Roman</p>",
    "PostedDate": "2009-11-04T15:48:26.753-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "253603",
    "ThreadId": "74121",
    "Html": "<p>Do not be afraid of me being confused. I'm very happy with the delusional world I have constructed for myself.</p>\r\n<p>In all seroiusness, I guess I was/am confused. I see the working example of mini-python, where you can actually define functions AND run them, and examples where you can assign variables and use numeric operators. I guess I am not clear on what Irony is and isn't capable of.</p>\r\n<p>1. Would you be able to use Irony to create the full grammar for a Basic like language? I assume yes.</p>\r\n<p>2. Would you be able to overload methods with different number and types of parameters?</p>\r\n<p>3. Once you had the full AST would you just have to implement the correct classes to get this to run?</p>\r\n<p>4. If you had to provide a bullet proof language for users to write scripts would you use this version of Irony, or wait a few versions? By bullet proof I don't mean it is an awesome language, I just mean that there are no defects in it.</p>\r\n<p>&nbsp;</p>\r\n<p>Irony looks well thought out, but I obviously need to get a better grasp on what it is and isn't designed for.</p>\r\n<p>&nbsp;</p>\r\n<p>thanks a ton, this tool looks great so far.</p>",
    "PostedDate": "2009-11-04T20:57:10.577-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "253879",
    "ThreadId": "74121",
    "Html": "<p>The answer to questions 1-3 is yes. As for #4, if you need to provide a solid scripting engine inside your app, and you need it now, then you should go for IronPython.</p>\r\n<p>Irony is a tool for creating scripting solutions, but not a scripting solution by itself.&nbsp;People will&nbsp;build&nbsp;real things using Irony, but Irony itself is not the thing you're looking for. As for IronPython, you should consider the following factor:</p>\r\n<p>1. Language - it's better to have some standardized and popular language, so customers wouldn't have trouble finding help and advice about it.</p>\r\n<p>2. Implementation - it should be .NET based, with full .NET interoperability, allowed to be hosted inside other .NET app, and allow extension/hooks to the hosting app (to manipulate the host app's objects)</p>\r\n<p>IronPython fits well into these requirements. I&nbsp;myself uses it as a script engine in one of my features in Dynamics AX - see my presentation in Lang.NET 2009</p>\r\n<p>Hope this answers your questions</p>\r\n<p>Roman</p>",
    "PostedDate": "2009-11-05T10:12:50.343-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "253940",
    "ThreadId": "74121",
    "Html": "<p>My customers have 1000s of scripts written in a basic-like language, and any language I provide must also run all of their scripts.&nbsp;</p>\r\n<p>This is why I'm looking at implementing a language. I am fully aware of all the reasons an already existing language should be used, but compatibility with the old scripts is the number one priority for my customers at this point.</p>\r\n<p>As a side note, I have already provided an IronPython solution, and it is working great for new features and scripts.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks for the info. It is very helpful.</p>",
    "PostedDate": "2009-11-05T12:57:18.32-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254155",
    "ThreadId": "74121",
    "Html": "<p>Well. if you're stuck with GwBasic for existing scripts, and wish to upgrade the engine, then it is a doable project with Irony, even in incomplete state as it is today. You have a parser already, you'd need to complete the AST set for various statement types. I don't think its a very big undertaking, you have already some initial sketch of Interpreter infrastructure, it should be matter of weeks at most. The only trouble I see is that your solution may mismatch my design decisions when I finally get to completing the AST's. Or you can just wait, I may get to it in 2-3 months period, and then I hope building Basic interpreter would be an easy and fast work.</p>\r\n<p>Roman</p>",
    "PostedDate": "2009-11-06T01:29:11.54-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]