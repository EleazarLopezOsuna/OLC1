[
  {
    "Id": "932586",
    "ThreadId": "400830",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm quite new to this so please bear with me.&nbsp; I'm trying to extend the ExpressionEvaluatorGrammar to a language that I'm trying to parse.</p>\r\n<p>The main thing I want to be able to do is create a different AstNode when I hit a function name than when I hit a standard Identifier.&nbsp; In the expression grammar it creates an IdentifierNode in both cases.&nbsp;</p>\r\n<p>I thought to create another terminal which inherits off IdentifierTerminal, but creates a different AstNode.&nbsp; I then tried to replace</p>\r\n<p>&#65279;&#65279;&#65279;&#65279;&#65279;&#65279;&#65279;&#65279;&#65279;FunctionCall.Rule = Expr &#43; PreferShiftHere() &#43; &quot;(&quot; ArgList &#43; &quot;)&quot;;</p>\r\n<p>with</p>\r\n<p>&#65279;&#65279;FunctionCall.Rule = testTerminal &#43; PreferShiftHere() &#43; &quot;(&quot; &#43; ArgList &#43; &quot;)&quot;;</p>\r\n<p>however this causes the parser to seem to try to match all identifiers as function calls and complains that a '(' is missing after every identifier. [syntax error, expected: ( ]</p>\r\n<p>I can see that it doesn't know how to decide which one to start parsing, but I can't work out how to use the hints to fix it up.</p>\r\n<p>Can you provide any help?&nbsp; (I'm sorry not to paste the grammer but windows clipboard has died on me)&nbsp; The rest of the grammar is exactly the same as the expressionevaluator example.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-10-25T11:46:26.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "932610",
    "ThreadId": "400830",
    "Html": "\r\n<p>It is better to attache the AST-node creation to the NonTerminals. I was surprised to see that the rule for function calls was this:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>FunctionCall.Rule = Expr &#43; PreferShiftHere() &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; ArgList &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;</pre>\r\n</div>\r\n<p>instead of</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>FunctionCall.Rule = identifier &#43; PreferShiftHere() &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; ArgList &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\r\n</pre>\r\n</div>\r\n<div style=\"background-color:white; color:black\">but in either case the AST node created for a\r\n<em><strong>FunctionCall </strong></em>is a <em><strong>FunctionCallNode.</strong></em></div>\r\n<div style=\"background-color:white; color:black\"><em><strong>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> FunctionCall = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FunctionCall&quot;</span>, <span style=\"color:blue\">typeof</span>(FunctionCallNode));\r\n</pre>\r\n</div>\r\n</strong></em></div>\r\n",
    "PostedDate": "2012-10-25T12:27:52.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "932639",
    "ThreadId": "400830",
    "Html": "Thanks for the amazingly quick response.<br>\r\n<br>\r\nI was surprised at that too but either seems to work, and I didn't want to<br>\r\nconfuse things in my example.<br>\r\n<br>\r\nThe underlying problem is that when I evaluate, I visit all the<br>\r\nastnodes and extract<br>\r\nall the identifiernodes to be treated as variables. I then evaluate the<br>\r\nstatementnodes in variable dependency order.<br>\r\n<br>\r\nYou are right that the parent node is a functionnode, but the first child<br>\r\nis an identifiernode containing the function name. I need to ignore this.<br>\r\n<br>\r\nI can do this with some custom logic, but I liked the neatness of handling<br>\r\nit in the grammar and since I'm trying to learn more of Irony (which is<br>\r\npretty amazing btw), I thought it was a good opportunity.<br>\r\nI looked at shiftif but didn't really get it in the context of what I'm<br>\r\ntrying to do.<br>\r\n<br>\r\nI guess I could also create a custom terminal based on the<br>\r\nidentifier terminal with a suffix of (. That way the tryparse would give a<br>\r\nfail for normal identifiers. Seemed a bit messy though.<br>\r\n<br>\r\n<br>\r\n&gt; On Oct 25, 2012 8:27 PM, &quot;pgeerkens&quot; &lt;notifications@codeplex.com&gt; wrote:<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; From: pgeerkens<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; It is better to attache the AST-node creation to the NonTerminals. I was<br>\r\n&gt;&gt; surprised to see that the rule for function calls was this:<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; FunctionCall.Rule = Expr &#43; PreferShiftHere() &#43; &quot;(&quot; &#43; ArgList &#43; &quot;)&quot;;<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; instead of<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; FunctionCall.Rule = identifier &#43; PreferShiftHere() &#43; &quot;(&quot; &#43; ArgList &#43; &quot;)&quot;;<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; but in either case the AST node created for a FunctionCall is a<br>\r\n&gt;&gt; FunctionCallNode.<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; Read the full discussion online.<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; To add a post to this discussion, reply to this email<br>\r\n&gt;&gt; ([email removed])<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; To start a new discussion for this project, email<br>\r\n&gt;&gt; [email removed]<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; You are receiving this email because you subscribed to this discussion on<br>\r\n&gt;&gt; CodePlex. You can unsubscribe on CodePlex.com.<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; Please note: Images and attachments will be removed from emails. Any posts<br>\r\n&gt;&gt; to this discussion will also be available online at CodePlex.com",
    "PostedDate": "2012-10-25T13:21:46.853-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "932647",
    "ThreadId": "400830",
    "Html": "<p>Let's say you make the change to FunctionCall.Rule (replacing <em>Expr </em>with <em>identifier</em>). Now, when walking the AST tree, there are 6 node types that can have <em>Identifier</em> as a child. In 5 of those <em>identifier</em> is a variable or member reference, and in the last it is a FunctionCall reference. Doesn't that work?</p>",
    "PostedDate": "2012-10-25T13:36:26.8-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "932655",
    "ThreadId": "400830",
    "Html": "<p>I think you're a bit confused - at least, in a scripting language like expr evaluator that's not the way it works. You want to pin down an identifier as a function call at the moment of parsing - and assign appropriate node. The reality is that it's not the identifier itself that is the function: identifier is a reference to a named slot (memory location) in local or enclosing scope. It resolves to 'function call' only at runtime. For this, the interpreter reaches the identifier, pulls the the value of the variable - it might be anything (a number, a function ref, or null), then it tries to perform a 'function call' invocation against the 'value' of the variable. The function itself (Ast node containing function body) sits at the target, and 'name' in function call references this target node through a variable value. ExprEvaluator runtime simply defines all global functions as named global variables, just like any other 'x' or 'y' your script may define.</p>\r\n<p>So basically, identifier is always a reference to a named runtime value - parser does not have to and does not need to assume anything else about it. Its AST node knows how to fetch the value (be it some number, string, or function ref). No need to put special FunctionCall AST into these identifiers.</p>\r\n<p>If you want to make some sort of 'static' function binding, then the best way to do this is after parsing, by analyzing (visiting) the AST tree and rewriting/replacing some nodes.&nbsp;</p>\r\n<p>Roman</p>",
    "PostedDate": "2012-10-25T13:51:58.48-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "932658",
    "ThreadId": "400830",
    "Html": "\r\n<p>Indeed. You are right. I had done something along those lines.</p>\r\n<p>However, thinking ahead I wanted to be sure that if someone extended the grammar, it would be obvious that identifiers were only for use as variables.</p>\r\n<p>As it stands the logic is hidden right down in my top level astnode node a long way from the problem.</p>\r\n<p>In general, is there a solution when two terminals are an equally good match?</p>\r\n<div>On Oct 25, 2012 9:36 PM, &quot;pgeerkens&quot; &lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt; wrote:<br type=\"attribution\">\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: pgeerkens</p>\r\n<div>\r\n<p>Let's say you make the change to FunctionCall.Rule (replacing <em>Expr </em>with\r\n<em>identifier</em>). Now, when walking the AST tree, there are 6 node types that can have\r\n<em>Identifier</em> as a child. In 5 of those <em>identifier</em> is a variable or member reference, and in the last it is a FunctionCall reference. Doesn't that work?</p>\r\n</div>\r\n<div>\r\n<p>Read the <a href=\"http://irony.codeplex.com/discussions/400830#post932647\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:irony@discussions.codeplex.com?subject=[irony:400830]\" target=\"_blank\">irony@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:irony@discussions.codeplex.com\" target=\"_blank\">\r\nirony@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://irony.codeplex.com/discussions/400830/unsubscribe/\" target=\"_blank\">\r\nunsubscribe</a> on CodePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at CodePlex.com</p>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n",
    "PostedDate": "2012-10-25T13:56:54.187-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "932670",
    "ThreadId": "400830",
    "Html": "<p>You are confusing the <em>tokens</em> identified by the Scanner with the&nbsp;Terminals and NonTerminals identified by the Parser and the AST nodes it builds. The definition of the <strong>token</strong> <em>identifer</em> is always going to be shared beween the names of variables, members, and functions, unless the grammar changes fundamentally, which is not going to happen from an <em>enhancement</em>.</p>\r\n<p>The <em>evaluation</em> functionality for a <strong>FunctionCall</strong> is always going to be rooted int&nbsp;the AST node <strong>FunctionCallNode.</strong>&nbsp; I don't see the issue you are concerned with.</p>",
    "PostedDate": "2012-10-25T14:20:12.02-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "932674",
    "ThreadId": "400830",
    "Html": "Roman,<br>\r\n<br>\r\nI see what you're saying. I'm sure am confused it's a steep learning<br>\r\ncurve for me.<br>\r\n<br>\r\nJust to explain what I am doing. I have a language which is very like<br>\r\nthe expression evaluator. A sample script:<br>\r\n<br>\r\nb=a<br>\r\na=1<br>\r\nc=sin(2.2)<br>\r\n<br>\r\nEvery line must be an assignment. When I evaluate, I create a list of<br>\r\ndependencies between statements and evaluate in an order that will<br>\r\nresolve. In the above I evaluate a=1 followed by b=a, followed by<br>\r\nc=sin(2.2) To do this I scan the statement nodes and extract all the<br>\r\nvariables by finding the identifiernodes on the rhs. I then create a<br>\r\ndependency tree for each line and run it from the bottom up.<br>\r\n<br>\r\nWhen a script contains a function call, I get an extra variable on the<br>\r\ndependency tree for c which is 'sin'. I can filter this out during<br>\r\nevaluation by looking at the parent, but thought it would be neat to<br>\r\ndo this at the grammar stage by identifying it differently. It seemed<br>\r\nlike a slightly different thing to me.<br>\r\n<br>\r\nIt sounds like it's best I stick with what I've got working right now.<br>\r\nAs I said, I was just keen to know if there was a 'right' way to do<br>\r\nit, and indeed whether I can even do what I'm suggesting, if only for<br>\r\nthe purposes of learning more about writing grammars.<br>\r\n<br>\r\nI haven't looked at the code since I thought of this, but the Keyterm<br>\r\nterminal must have exactly this problem, mustn't it? Is this treated<br>\r\nas a special case, or handled generically with some grammar construct.<br>\r\n<br>\r\nThanks<br>\r\n<br>\r\nOn 25 October 2012 21:56, David Carr &lt;davecarrs@gmail.com&gt; wrote:<br>\r\n&gt; Indeed. You are right. I had done something along those lines.<br>\r\n&gt;<br>\r\n&gt; However, thinking ahead I wanted to be sure that if someone extended the<br>\r\n&gt; grammar, it would be obvious that identifiers were only for use as<br>\r\n&gt; variables.<br>\r\n&gt;<br>\r\n&gt; As it stands the logic is hidden right down in my top level astnode node a<br>\r\n&gt; long way from the problem.<br>\r\n&gt;<br>\r\n&gt; In general, is there a solution when two terminals are an equally good<br>\r\n&gt; match?<br>\r\n&gt;<br>\r\n&gt; On Oct 25, 2012 9:36 PM, &quot;pgeerkens&quot; &lt;notifications@codeplex.com&gt; wrote:<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; From: pgeerkens<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; Let's say you make the change to FunctionCall.Rule (replacing Expr with<br>\r\n&gt;&gt; identifier). Now, when walking the AST tree, there are 6 node types that can<br>\r\n&gt;&gt; have Identifier as a child. In 5 of those identifier is a variable or member<br>\r\n&gt;&gt; reference, and in the last it is a FunctionCall reference. Doesn't that<br>\r\n&gt;&gt; work?<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; Read the full discussion online.<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; To add a post to this discussion, reply to this email<br>\r\n&gt;&gt; ([email removed])<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; To start a new discussion for this project, email<br>\r\n&gt;&gt; [email removed]<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; You are receiving this email because you subscribed to this discussion on<br>\r\n&gt;&gt; CodePlex. You can unsubscribe on CodePlex.com.<br>\r\n&gt;&gt;<br>\r\n&gt;&gt; Please note: Images and attachments will be removed from emails. Any posts<br>\r\n&gt;&gt; to this discussion will also be available online at CodePlex.com",
    "PostedDate": "2012-10-25T14:23:14.61-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "932682",
    "ThreadId": "400830",
    "Html": "<p>A <em>pea </em>doesn't know what type of <em>pod </em>it is in, just it's own shape: spherical or ellipsoidal. The <em>pod</em> grows to accomodate the type of <em>peas</em> it contains.</p>\r\n<p>Work top-down instead of bottom-up, and much context will be immediately at hand.</p>",
    "PostedDate": "2012-10-25T14:48:07.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "932988",
    "ThreadId": "400830",
    "Html": "\r\n<p>I am working top down in my evaluation and that works for me.&nbsp; Sorry - I seem to have got away from the original question, which is kind of independent of my problem, and&nbsp;I'm sure is&nbsp;pretty trivial to solve.&nbsp; I've created and example\r\n to make it clear.&nbsp; Say I have the grammar below</p>\r\n<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#65279;&#65279;&#65279;&#65279;&#65279;var identifier = new IdentifierTerminal(&quot;identifier&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>var&nbsp;letters = new LettersOnlyTerminal(&quot;test letters&quot;); //letters a-z only</strong>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var Expr = new NonTerminal(&quot;Expr&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var comma = ToTerm(&quot;,&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var Term = new NonTerminal(&quot;Term&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var ArgList = new NonTerminal(&quot;ArgList&quot;, typeof(ExpressionListNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var FunctionCall = new NonTerminal(&quot;FunctionCall&quot;, typeof(FunctionCallNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var ObjectRef = new NonTerminal(&quot;ObjectRef&quot;); // foo, foo.bar or f['bar']<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var Statement = new NonTerminal(&quot;Statement&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var Program = new NonTerminal(&quot;Program&quot;, typeof(StatementListNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var AssignmentStmt = new NonTerminal(&quot;AssignmentStmt&quot;, typeof(AssignmentNode));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Expr.Rule = Term;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Term.Rule =&nbsp; FunctionCall | identifier;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArgList.Rule = MakeStarRule(ArgList, comma, Expr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FunctionCall.Rule = <strong>letters&#43;</strong> PreferShiftHere() &#43; &quot;(&quot; &#43; ArgList &#43; &quot;)&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AssignmentStmt.Rule = ObjectRef &#43; ToTerm(&quot;=&quot;) &#43; Expr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ObjectRef.Rule = identifier;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Statement.Rule = AssignmentStmt | Empty;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Program.Rule = MakePlusRule(Program, NewLine, Statement);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Root = Program;&nbsp;</p></pre>\r\n<p>Here the LettersOnlyTerminal is similar to an identifier, but more specific. It can only be letters a-z. Now, I've inserted it into the function call</p>\r\n<p>because I (hypothetically) only want function calls in my language to contain letters. When I parse:\r\n</p>\r\n<p>&nbsp;</p>\r\n<pre>a=b<br>\r\na=b()</pre>\r\n<p>I get an error because it thought b was an identifier in line two and didn't expect the brackets after it. (Syntax error, expected: [line break])</p>\r\n<p>I know this is a trivial conflict problem and I should be able to work it out for myself, but it goes to the heart of my understanding. How do I rewrite my grammar so that it understands both. How does it prioritise 'identifier' over 'letters' in the first\r\n place?</p>\r\n<p></p>\r\n",
    "PostedDate": "2012-10-26T06:45:28.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "933162",
    "ThreadId": "400830",
    "Html": "<p>Why do you desire to over-constrain (meaning, in many senses, break) your language this way?&nbsp; It is possible to build parsers for grammars with such overlapping token definitions, but it is to be&nbsp;avoided whenever possible because it is (usually) an artificial and unnecessary cxomplexity.&nbsp;&nbsp;</p>",
    "PostedDate": "2012-10-26T14:09:35.687-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "933172",
    "ThreadId": "400830",
    "Html": "\r\n<p>I just wondered if there was some built in way of handling it or some pattern of grammar building I could use which would avoid it.\r\n</p>\r\n<p>When I look more carefully at some of the questions others have asked, I see it has been asked in other contexts.\r\n</p>\r\n<p>Since this is only a theoretical problem which I can work around, I'll leave you in peace.</p>\r\n<p>Thanks again</p>\r\n<p>David</p>\r\n<div>On Oct 26, 2012 10:09 PM, &quot;pgeerkens&quot; &lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt; wrote:<br type=\"attribution\">\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: pgeerkens</p>\r\n<div>\r\n<p>Why do you desire to over-constrain (meaning, in many senses, break) your language this way? It is possible to build parsers for grammars with such overlapping token definitions, but it is to be avoided whenever possible because it is (usually) an artificial\r\n and unnecessary cxomplexity. </p>\r\n</div>\r\n<div>\r\n<p>Read the <a href=\"http://irony.codeplex.com/discussions/400830#post933162\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:irony@discussions.codeplex.com?subject=[irony:400830]\" target=\"_blank\">irony@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:irony@discussions.codeplex.com\" target=\"_blank\">\r\nirony@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://irony.codeplex.com/discussions/400830/unsubscribe/\" target=\"_blank\">\r\nunsubscribe</a> on CodePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at CodePlex.com</p>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n",
    "PostedDate": "2012-10-26T14:41:24.54-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]