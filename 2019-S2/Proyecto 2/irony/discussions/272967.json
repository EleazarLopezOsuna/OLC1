[
  {
    "Id": "673272",
    "ThreadId": "272967",
    "Html": "<p>&nbsp;I'm new to Irony, and am finding it very powerful and flexible.&nbsp; Currently, I'm looking for a way to set up a rule to be \"anything but x or y or z\", is there an operator or construct to support NOT?</p>\n<p>I have a template language that is kind of asp/c# like.&nbsp; An example template looks like:</p>\n<div style=\"background-color: white; color: black;\">\n<pre style=\"padding-left: 30px;\">#region \"Methods\"\r\n\r\n///--------------------------------------------------------------------------------\r\n/// <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">summary</span><span style=\"color: blue;\">&gt;</span>This method gets the <span style=\"background-color: yellow;\">&lt;%=</span>BLLClassName<span style=\"background-color: yellow;\">%&gt;</span> instance from the database,\r\n/// using its primary key values.<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">summary</span><span style=\"color: blue;\">&gt;</span>\r\n///--------------------------------------------------------------------------------\r\npublic override void Load()\r\n{\r\n\tLoad(<span style=\"background-color: yellow;\">&lt;%=</span>TAB 1<span style=\"background-color: yellow;\">%&gt;</span>\r\n<span style=\"background-color: yellow;\">&lt;%</span>\r\n\tforeach (Property where IsPrimaryKeyMember == true)\r\n\t{\r\n\t\t<span style=\"background-color: yellow;\">&lt;%&amp;&lt;%=</span>BLLPropertyName<span style=\"background-color: yellow;\">%&gt;</span>, <span style=\"background-color: yellow;\">%&gt;</span>\r\n\t}\r\n\t<span style=\"background-color: yellow;\">&lt;%</span>&amp;0);<span style=\"background-color: yellow;\">%&gt;</span>\r\n<span style=\"background-color: yellow;\">%&gt;</span>\r\n}<span style=\"background-color: yellow;\">&lt;%=</span>TAB -1<span style=\"background-color: yellow;\">%&gt;</span>\r\n#endregion \"Methods\"</pre>\n</div>\n<p>In the literal text sections of the template, it's important to retain all of the white space, so I have a preparsing stage that would store these \"blobs\" of text.</p>\n<p>The result of preparsing&nbsp;and translating the above template example would look like:</p>\n<div style=\"background-color: white; color: black;\">\n<pre style=\"padding-left: 30px;\"><span style=\"background-color: yellow;\">&lt;%=</span>CONTENT 1<span style=\"background-color: yellow;\">%&gt;</span><span style=\"background-color: yellow;\">&lt;%=</span>BLLClassName<span style=\"background-color: yellow;\">%&gt;</span><span style=\"background-color: yellow;\">&lt;%=</span>CONTENT 2<span style=\"background-color: yellow;\">%&gt;</span><span style=\"background-color: yellow;\">&lt;%=</span>TAB 1<span style=\"background-color: yellow;\">%&gt;</span>\r\n<span style=\"background-color: yellow;\">&lt;%</span>\r\n\tforeach (Property where IsPrimaryKeyMember == true)\r\n\t{\r\n\t\t<span style=\"background-color: yellow;\">&lt;%&amp;&lt;%=</span>BLLPropertyName<span style=\"background-color: yellow;\">%&gt;&lt;%=</span>CONTENT 3<span style=\"background-color: yellow;\">%&gt;%&gt;</span>\r\n\t}\r\n\t<span style=\"background-color: yellow;\">&lt;%&amp;&lt;%=</span>CONTENT 4<span style=\"background-color: yellow;\">%&gt;%&gt;</span>\r\n<span style=\"background-color: yellow;\">%&gt;</span>\r\n<span style=\"background-color: yellow;\">&lt;%=</span>CONTENT 5<span style=\"background-color: yellow;\">%&gt;</span><span style=\"background-color: yellow;\">&lt;%=</span>TAB -1<span style=\"background-color: yellow;\">%&gt;</span>\r\n<span style=\"background-color: yellow;\">&lt;%=</span>CONTENT 6<span style=\"background-color: yellow;\">%&gt;</span></pre>\n<pre style=\"padding-left: 30px;\">&nbsp;</pre>\n</div>\n<p>I'm having no trouble with the template grammar and parsing after the preparsing stage.&nbsp; I'm having trouble with the preparsing grammar though.&nbsp; I'm trying to define a rule that includes anything but symbols, including whitespace and line terminations.</p>\n<p>The preparsing grammar looks like the following (the blob rule is the one I'm having trouble with):</p>\n<pre><div style=\"background-color: white; color: black;\"><pre><div style=\"background-color: white; color: black;\"><pre>\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">partial</span> <span style=\"color: blue;\">class</span> TemplateContentPreGrammar : Grammar\r\n\t{\r\n\t\t<span style=\"color: blue;\">public</span> TemplateContentPreGrammar()\r\n\t\t{\r\n\t\t\t<span style=\"color: blue;\">this</span>.LanguageFlags |= LanguageFlags.CreateAst;\r\n\t\t\t<span style=\"color: blue;\">this</span>.GrammarComments = <span style=\"color: #a31515;\">\"This grammar is used to preparse a template.\\r\\n\"</span> +\r\n\t\t\t\t\t\t\t\t   <span style=\"color: #a31515;\">\"This preparser replaces blob text with , where n\\r\\n\"</span> +\r\n\t\t\t\t\t\t\t\t   <span style=\"color: #a31515;\">\"is the index to the actual text stored in a dictionary.\\r\\n\"</span>;\r\n\r\n\t\t\t<span style=\"color: blue;\">#region</span> \"Symbols, Punctuation, etc.\"\r\n\r\n\t\t\t<span style=\"color: green;\">// symbols</span>\r\n\t\t\tKeyTerm evalOpen = ToTerm(<span style=\"color: #a31515;\">\"&lt;%\"</span>, <span style=\"color: #a31515;\">\"evalOpen\"</span>);\r\n\t\t\tKeyTerm contentPropOpen = ToTerm(<span style=\"color: #a31515;\">\"&lt;%=\"</span>, <span style=\"color: #a31515;\">\"contentPropOpen\"</span>);\r\n\t\t\tKeyTerm outputPropOpen = ToTerm(<span style=\"color: #a31515;\">\"&lt;%&gt;\"</span>, <span style=\"color: #a31515;\">\"outputPropOpen\"</span>);\r\n\t\t\tKeyTerm appendOpen = ToTerm(<span style=\"color: #a31515;\">\"&lt;%&amp;\"</span>, <span style=\"color: #a31515;\">\"appendOpen\"</span>);\r\n\t\t\tKeyTerm appendLineOpen = ToTerm(<span style=\"color: #a31515;\">\"&lt;%+\"</span>, <span style=\"color: #a31515;\">\"appendLineOpen\"</span>);\r\n\t\t\tKeyTerm close = ToTerm(<span style=\"color: #a31515;\">\"%&gt;\"</span>, <span style=\"color: #a31515;\">\"close\"</span>);\r\n\r\n\t\t\t<span style=\"color: green;\">// nothing is whitespace for the preprocessor</span>\r\n\t\t\t<span style=\"color: blue;\">this</span>.WhitespaceChars = <span style=\"color: #a31515;\">\"\"</span>;\r\n\t\t\t<span style=\"color: blue;\">#endregion</span>\r\n\r\n\t\t\t<span style=\"color: blue;\">#region</span> \"Nodes\"\r\n\t\t\t<span style=\"color: green;\">// high level nodes</span>\r\n\t\t\t<span style=\"color: blue;\">var</span> template = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"template\"</span>);\r\n\t\t\t<span style=\"color: blue;\">var</span> templateBlock = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"templateBlock\"</span>);\r\n\t\t\t<span style=\"color: blue;\">var</span> paragraph = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"paragraph\"</span>);\r\n\t\t\t<span style=\"color: blue;\">var</span> paragraphBlock = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"paragraphBlock\"</span>);\r\n\t\t\t<span style=\"color: blue;\">var</span> evaluation = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"evaluation\"</span>);\r\n\t\t\t<span style=\"color: blue;\">var</span> evaluationBlock = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"evaluationBlock\"</span>);\r\n\r\n\t\t\t<span style=\"color: green;\">// statements</span>\r\n\t\t\t<span style=\"color: blue;\">var</span> appendStatement = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"appendStatement\"</span>);\r\n\t\t\t<span style=\"color: blue;\">var</span> appendLineStatement = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"appendLineStatement\"</span>);\r\n\r\n\t\t\t<span style=\"color: green;\">// properties</span>\r\n\t\t\t<span style=\"color: blue;\">var</span> property = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"property\"</span>);\r\n\t\t\t<span style=\"color: blue;\">var</span> contentProperty = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"contentProperty\"</span>);\r\n\t\t\t<span style=\"color: blue;\">var</span> outputProperty = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"outputProperty\"</span>);\r\n\r\n\t\t\t<span style=\"color: green;\">// text and symbols</span>\r\n\t\t\t<span style=\"color: blue;\">var</span> blob = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"blob\"</span>);\r\n\t\t\t<span style=\"color: blue;\">var</span> symbol = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"symbol\"</span>);\r\n\t\t\t<span style=\"color: blue;\">#endregion</span>\r\n\r\n\t\t\t<span style=\"color: blue;\">#region</span> \"Rules\"\r\n\t\t\t<span style=\"color: green;\">// a template consists of any number of template blocks</span>\r\n\t\t\ttemplate.Rule = MakeStarRule(template, <span style=\"color: blue;\">null</span>, templateBlock);\r\n\r\n\t\t\t<span style=\"color: green;\">// a template block is an evaluation or a paragraph</span>\r\n\t\t\ttemplateBlock.Rule = evalOpen + evaluation + close | paragraph;\r\n\r\n\t\t\t<span style=\"color: green;\">// a paragraph consists of any number of paragraph blocks</span>\r\n\t\t\tparagraph.Rule = MakeStarRule(paragraph, <span style=\"color: blue;\">null</span>, paragraphBlock);\r\n\r\n\t\t\t<span style=\"color: green;\">// a paragraph block is a property or a blob of text</span>\r\n\t\t\tparagraphBlock.Rule = property | blob;\r\n\r\n\t\t\t<span style=\"color: green;\">// an evaluation consists of any number of evaluation blocks</span>\r\n\t\t\tevaluation.Rule = MakeStarRule(evaluation, <span style=\"color: blue;\">null</span>, evaluationBlock);\r\n\r\n\t\t\t<span style=\"color: green;\">// an evaluation block is an append statement, append line statement or a blob of text</span>\r\n\t\t\tevaluationBlock.Rule = appendStatement | appendLineStatement | blob;\r\n\r\n\t\t\t<span style=\"color: green;\">// an append statement includes a paragraph to append</span>\r\n\t\t\tappendStatement.Rule = appendOpen + paragraph + close;\r\n\r\n\t\t\t<span style=\"color: green;\">// an append line statement includes a paragraph to append as a new line</span>\r\n\t\t\tappendLineStatement.Rule = appendLineOpen + paragraph + close;\r\n\r\n\t\t\t<span style=\"color: green;\">// a property is a content property or an output property</span>\r\n\t\t\tproperty.Rule = contentProperty | outputProperty;\r\n\r\n\t\t\t<span style=\"color: green;\">// a content property contains a blob of text between the content property delimiters</span>\r\n\t\t\tcontentProperty.Rule = contentPropOpen + blob + close;\r\n\r\n\t\t\t<span style=\"color: green;\">// an output property contains a blob of text between the output property delimiters</span>\r\n\t\t\toutputProperty.Rule = outputPropOpen + blob + close;\r\n\r\n\t\t\t<span style=\"color: green;\">// a symbol is any of the recognized \"directives\"</span>\r\n\t\t\tsymbol.Rule = evalOpen | contentPropOpen | outputPropOpen | appendOpen | appendLineOpen | close;\r\n\r\n\t\t\t<span style=\"color: green;\">// a blob is anything but a symbol</span>\r\n\t\t\tblob.Rule = symbol;\r\n\r\n\t\t\t<span style=\"color: blue;\">#endregion</span>\r\n\r\n\t\t\t<span style=\"color: green;\">// the template is the root of the grammar</span>\r\n\t\t\t<span style=\"color: blue;\">this</span>.Root = template;\r\n\r\n\t\t\t<span style=\"color: green;\">// mark nodes to filter from the parse tree</span>\r\n\t\t\t<span style=\"color: blue;\">this</span>.MarkTransient(templateBlock, paragraphBlock, evaluationBlock, property);\r\n\t\t}\r\n\t}\r\n</pre>\n</div>\n</pre>\n</div>\n</pre>\n<p>&nbsp;Thanks!</p>\n<div id=\"_mcePaste\" style=\"width: 1px; height: 1px; overflow: hidden; top: 0px; left: -10000px;\">﻿</div>",
    "PostedDate": "2011-09-18T02:23:33.927-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "673733",
    "ThreadId": "272967",
    "Html": "<p>I guess the answer is no.&nbsp; Using RegexBasedTerminal helped define the \"blob\", but I'm still unable to get a token to go beyond end of line.&nbsp; So at this point I'm doing preparsing through a custom technique.</p>",
    "PostedDate": "2011-09-19T09:28:00.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "673760",
    "ThreadId": "272967",
    "Html": "<p>well, parsing templates is a tricky area, and I admit, Irony does not have a direct support for this.&nbsp;</p>\r\n<p>I think the proper way is to treat template text as special comment-like terminals, injected among main text which is your evaluation scriptlets. You take the template source and add \"%&gt;\" at the beginning. Then you define your \"templateText\" terminal as quoted string, which starts with \"%&gt;\" and ends with \"&lt;%\". Like this:</p>\r\n<p>&nbsp;</p>\r\n<pre><span style=\"color: #ff00ff;\">%&gt;public override void Load()\r\n{\r\n\tLoad(</span><span><span style=\"color: #ff00ff;\">&lt;%</span>=</span>TAB 1<span style=\"color: #ff00ff;\">%&gt;\r\n&lt;%</span>\r\n\tforeach (Property where IsPrimaryKeyMember == true)</pre>\r\n<pre>..</pre>\r\n<p>... and so on - fragments shown in red are now \"strings\" embedded into the main text. Then you write your grammar around this modified source. &nbsp;</p>\r\n<p>I'm planning to add more direct support to template parsing in some future</p>",
    "PostedDate": "2011-09-19T10:28:03.12-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "673928",
    "ThreadId": "272967",
    "Html": "<p>Hi Roman,</p>\r\n<p>Thanks for the suggestion, and thanks for bringing Irony into this world!</p>\r\n<p>I updated my template grammar, requiring explicit symbols to start and end literal text, and defining a terminal based on CommentTerminal.&nbsp; It works great!&nbsp; The template grammar is now a little more verbose, but the preparser (and separate grammar) is no longer necessary, and it will be easier to match errors to the template and color areas of the template text.</p>\r\n<p>Thanks again,</p>\r\n<p>Dave</p>",
    "PostedDate": "2011-09-19T15:51:16.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]