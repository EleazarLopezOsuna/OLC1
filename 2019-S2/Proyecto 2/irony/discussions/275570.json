[
  {
    "Id": "683022",
    "ThreadId": "275570",
    "Html": "<p>To continue my last thread, here is the grammar written to capture variables:</p>\n<div style=\"color: black; background-color: white;\">\n<pre>\t<span style=\"color: blue;\">var</span> variableName = <span style=\"color: blue;\">new</span> FreeTextLiteral(<span style=\"color: #a31515;\">\"varName\"</span>, FreeTextOptions.ConsumeTerminator, <span style=\"color: #a31515;\">\":\"</span>);\n\t<span style=\"color: blue;\">var</span> variableType = <span style=\"color: blue;\">new</span> FreeTextLiteral(<span style=\"color: #a31515;\">\"varType\"</span>, FreeTextOptions.ConsumeTerminator, <span style=\"color: #a31515;\">\";\"</span>);\n\n\t<span style=\"color: blue;\">var</span> varList = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"varList\"</span>);\n\tvarList.Rule = MakeStarRule(varList, variableName + variableType + NewLinePlus);\n\n\t<span style=\"color: blue;\">var</span> var_block = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"var_block\"</span>, <span style=\"color: #a31515;\">\"VAR\"</span> + NewLinePlus + varList + <span style=\"color: #a31515;\">\"END_VAR\"</span> + NewLinePlus);\n\n</pre>\n</div>\n<p>Sample input:</p>\n<pre><span style=\"color: #008080;\">VAR\nMESSAGE:STRING80;\n\nEND_VAR</span>\n</pre>\n<p>&nbsp;</p>\n<p>Basically, the structure of variable declaration is (in C# Regex format):</p>\n<p>VAR(\\r?\\n)+(?&lt;variable_name&gt;\\w+):(?&lt;variable_type&gt;\\w+);(\\r?\\n)+END_VAR(\\r?\\n)</p>\n<p>The regex expression gives me correct variable type and name. What is wrong in my Irony grammar?</p>\n<p>&nbsp;</p>\n<p>Hint: While debugging, i see that <strong>variableName</strong> terminal is eating up the <em><strong>NewLinePlus</strong></em> terminal content.</p>\n<p><img id=\"smallDivTip\" style=\"z-index: 90; border: 0px solid blue; left: 383px; top: 152px;\" alt=\"\" /></p>",
    "PostedDate": "2011-10-12T02:46:11.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683074",
    "ThreadId": "275570",
    "Html": "<p>The whole input is:</p>\n<pre>PROGRAM\nABC_DEF\nVAR\nMESSAGE:STRING80;\nEND_VAR\nTRANSITION\nSTEP_00\n:=\nEND_TRANSITION\nEND_PROGRAM\n</pre>\n<p>Transition rule is,</p>\n<p>\n<div style=\"color: black; background-color: white;\">\n<pre>            <span style=\"color: blue;\">var</span> transitionContent = <span style=\"color: blue;\">new</span> FreeTextLiteral(<span style=\"color: #a31515;\">\"transitionContent\"</span>, FreeTextOptions.ConsumeTerminator, <span style=\"color: #a31515;\">\"END_TRANSITION\"</span>);\n            <span style=\"color: blue;\">var</span> transition_block = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"transition_block\"</span>,\n                <span style=\"color: #a31515;\">\"TRANSITION\"</span> + NewLine\n                + transitionContent\n                + NewLinePlus);\n\n</pre>\n</div>\nI see that if I remove the ':=' text, then there is no problem. Seems like the parser doesn't know whether ':' is in between the variable declaration or in some other block (TRANSITION.)</p>",
    "PostedDate": "2011-10-12T05:13:04.097-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683105",
    "ThreadId": "275570",
    "Html": "<p>According to your regular expression variable_name and variable_type do not include whitespace, so my question is, why are you not just using an IdentifierTerminal instead of the FreeTextLiteral?</p>\r\n<pre><span style=\"color: blue;\"></span><div style=\"color: black; background-color: white;\"><pre><span style=\"color: blue;\"></span><div style=\"color: black; background-color: white;\"><pre><span style=\"color: blue;\">var</span> variableName = <span style=\"color: blue;\">new</span> IdentifierTerminal(<span style=\"color: #a31515;\">\"varName\"</span>, IdOptions.AllowsEscapes | IdOptions.CanStartWithEscape); <span style=\"color: green;\">// Not sure what IdOptions you need here</span>\r\n<span style=\"color: blue;\">var</span> variableType = <span style=\"color: blue;\">new</span> IdentifierTerminal(<span style=\"color: #a31515;\">\"varType\"</span>, IdOptions.AllowsEscapes | IdOptions.CanStartWithEscape);\r\n\r\n<span style=\"color: blue;\">var</span> varList = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"varList\"</span>);\r\nvarList.Rule = MakeStarRule(varList, variableName + <span style=\"color: #a31515;\">\":\"</span> + variableType + <span style=\"color: #a31515;\">\";\"</span> + NewLinePlus);  <span style=\"color: green;\"><br />// Does your grammar really require line breaks, or can you put multiple variable declarations on one line? Seems odd to require the semicolon if the line break is required.</span>\r\n\r\n<span style=\"color: blue;\">var</span> var_block = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"var_block\"</span>, <span style=\"color: #a31515;\">\"VAR\"</span> + NewLinePlus + varList + <span style=\"color: #a31515;\">\"END_VAR\"</span> + NewLinePlus);\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>",
    "PostedDate": "2011-10-12T06:05:55.093-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683138",
    "ThreadId": "275570",
    "Html": "<p><strong>why are you not just using an IdentifierTerminal instead of the FreeTextLiteral?</strong></p>\r\n<p>A valid question! Answer is silly - because I didn't know! I am a beginner regarding Irony implementation. Its been only a week that I have been using it. But i'm learning. :)</p>\r\n<pre><span style=\"color: green;\">// Does your grammar really require line breaks, or can you put multiple variable declarations on one line? Seems odd to require the semicolon if the line break is required</span></pre>\r\n<p>Its odd indeed but I can't change the grammar.</p>\r\n<p>&nbsp;</p>\r\n<p>MindCore, IdentifierTerminal works! Thanks so much for helping me out!!</p>\r\n<p>&nbsp;</p>\r\n<p>Regards</p>\r\n<p>Nayan</p>",
    "PostedDate": "2011-10-12T06:56:30.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683139",
    "ThreadId": "275570",
    "Html": "<p><em>Can you also please point me a direction regarding how to include whitespaces between the variable declaration?</em></p>\n<p><em>Like, regex pattern - (?&lt;varname&gt;\\w+)\\s*:\\s*(?&lt;vartype&gt;\\w+)\\s*(\\r?\\n)</em></p>\n<p><em>What would be the WS replacement in Irony?</em></p>\n<p>&nbsp;</p>\n<p>Gah! I played a little and found that WS are already ignored in 'NextToken()' function. :)</p>",
    "PostedDate": "2011-10-12T06:59:05.133-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683179",
    "ThreadId": "275570",
    "Html": "<p>I'm glad it worked for you!</p>\r\n<p>Before I am able to answer your next question though, it would help to know your intent.&nbsp; What I mean is, once you have your parser built do you plan on using the content or is it throw away data?</p>\r\n<p>From your examples on this post and the previous post that Roman responded back on, it appears that everything has a pretty specific purpose.&nbsp; If this is the case, I believe you need to identify each pattern and stay away from using things like FreeTextTerminal and RegExTerminal if possible. So, let me illustrate.</p>\r\n<p>In your last post you had the following test case scenario:</p>\r\n<pre><span style=\"color: #a31515;\">VAR<br />MESSAGE:STRING80;<br />(*_ORError Message*)<br />END_VAR<br /><br /></span>How is example of something I would expect your grammar to look.  <br />Note that I have set the grammar to recognize, yet ignore line breaks because they don't really seem relevant (I could be wrong here).<br /><br /><br /><div style=\"color: black; background-color: white;\"><pre> LineTerminators = <span style=\"color: #a31515;\">\"\\r\\n\\u2085\\u2028\\u2029\"</span>; <span style=\"color: green;\">//CR, linefeed, nextLine, LineSeparator, paragraphSeparator</span>\r\n\r\n <span style=\"color: green;\">// White space, formed from spaces (U+0020), carriage returns (U+000D), and newlines (U+000A), </span>\r\n <span style=\"color: green;\">// is ignored except as it separates tokens that would otherwise combine into a single token.</span>\r\n WhitespaceChars = <span style=\"color: #a31515;\">\" \\r\\n\"</span>; <span style=\"color: green;\">// declare line terminators</span>\r\n\r\n<span style=\"color: blue;\">var</span> variableName = <span style=\"color: blue;\">new</span> IdentifierTerminal(<span style=\"color: #a31515;\">\"varName\"</span>, IdOptions.AllowsEscapes | IdOptions.CanStartWithEscape); \r\n<span style=\"color: blue;\">var</span> variableType = <span style=\"color: blue;\">new</span> IdentifierTerminal(<span style=\"color: #a31515;\">\"varType\"</span>, IdOptions.AllowsEscapes | IdOptions.CanStartWithEscape);\r\n\r\n<span style=\"color: blue;\">var</span> var_error_msg = <span style=\"color: blue;\">new</span> QuotedValueLiteral(<span style=\"color: #a31515;\">\"varErrorMsg\"</span>, <span style=\"color: #a31515;\">\"(*_OR\"</span>, <span style=\"color: #a31515;\">\"*)\"</span>, TypeCode.String); <span style=\"color: green;\">// I can't recall, but this should include whitespace</span>\r\n\r\n<span style=\"color: blue;\">var</span> var_block = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"varBlock\"</span>);\r\n<span style=\"color: blue;\">var</span> var_list = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"varList\"</span>);\r\n<span style=\"color: blue;\">var</span> var_list_element = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"varListElement\"</span>);\r\n<span style=\"color: blue;\">var</span> var_line = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"varLine\"</span>);\r\n\r\nvar_block.Rule = <span style=\"color: #a31515;\">\"VAR\"</span> + varList + <span style=\"color: #a31515;\">\"END_VAR\"</span>;\r\n\r\nvar_list.Rule = MakeStarRule(var_list, var_list_element); \r\n\r\nvar_list_element.Rule = var_line | var_error_msg;\r\n\r\nvar_line.Rule = variableName + <span style=\"color: #a31515;\">\":\"</span> + variableType + <span style=\"color: #a31515;\">\";\"</span>;\r\n</pre>\r\n</div>\r\n<br />Let me know if I am leading you in the right direction or if I am totally wrong here.<br /><br />Best Regards,<br />Mindcore<br />&nbsp;\r\n<pre>\r\n\r\n\r\n\r\n</pre>\r\n</pre>",
    "PostedDate": "2011-10-12T08:06:22.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683202",
    "ThreadId": "275570",
    "Html": "<p>I really appreciate your effort, Mindcore, to go to this extent :)</p>\n<p>You're in the right direction, but I won't blame you for minor mistakes as you're not familiar with the DSL I'm working on.<br /> (* and *) are comment markers, like /* and */ in C/C++/C#. The statements are single line statements only. ';' is there to end the line for the variables - required to be parsed, but doesn't make sense.</p>\n<p>These rules are working for me (given by you only):</p>\n<div style=\"color: black; background-color: white;\">\n<pre>            <span style=\"color: blue;\">var</span> variableName = <span style=\"color: blue;\">new</span> IdentifierTerminal(<span style=\"color: #a31515;\">\"varName\"</span>, IdOptions.AllowsEscapes | IdOptions.CanStartWithEscape | IdOptions.IsNotKeyword);\n            <span style=\"color: blue;\">var</span> variableType = <span style=\"color: blue;\">new</span> IdentifierTerminal(<span style=\"color: #a31515;\">\"varType\"</span>, IdOptions.AllowsEscapes | IdOptions.CanStartWithEscape | IdOptions.IsNotKeyword);\n\n            <span style=\"color: blue;\">var</span> varList = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"varList\"</span>);\n            varList.Rule = MakeStarRule(varList, variableName + <span style=\"color: #a31515;\">\":\"</span> + variableType + <span style=\"color: #a31515;\">\";\"</span> + NewLinePlus);\n\n            <span style=\"color: blue;\">var</span> var_block = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"var_block\"</span>, <span style=\"color: #a31515;\">\"VAR\"</span> + NewLinePlus + varList + <span style=\"color: #a31515;\">\"END_VAR\"</span> + NewLinePlus);\n            <span style=\"color: blue;\">var</span> var_alias_block = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"var_alias_block\"</span>, <span style=\"color: #a31515;\">\"VAR_ALIAS\"</span> + NewLinePlus + varList + <span style=\"color: #a31515;\">\"END_VAR\"</span> + NewLinePlus);\n\n</pre>\n</div>\n<p>I'm ignoring the comment because I recently learnt that the comments won't be there in input.</p>\n<p>I should use CommentTerminal instead of QuotedValueLiteral(which makes more sense here in this case, IMO). !!</p>\n<p>I need to learn more about LineTerminators and WhitespaceChars (how to use, etc.). Is there any example available anywhere that you know (code/website/forum)?</p>\n<p><img id=\"smallDivTip\" style=\"z-index: 90; border: 0px solid blue; left: 387px; top: 324px;\" src=\"chrome://dictionarytip/skin/dtipIconHover.png\" alt=\"\" /></p>",
    "PostedDate": "2011-10-12T08:43:15.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683294",
    "ThreadId": "275570",
    "Html": "<p>First, I would agree that if the (* *) block is a comment, then use the CommentTerminal (if needed of course).</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>CommentTerminal comment = <span style=\"color: blue;\">new</span> CommentTerminal (<span style=\"color: #a31515;\">\"Comment\"</span>, <span style=\"color: #a31515;\">\"(*\"</span>, <span style=\"color: #a31515;\">\"*)\"</span>);\r\n\r\nNonGrammarTerminals.Add (comment); <span style=\"color: green;\">// if it's not to be included in your tree, add this</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>As far as the LineTerminators and WhiteSpaceChars, these are two of the Grammar's properties (like the NonGrammarTerminals above) that have default settings and are used by the underlining logic.&nbsp; Without looking back through the code, if I recall correctly, both are strings that are casted to an array of characters. When Irony parses what it's provided, it uses LineTerminators when determining the NewLine, NewlinePlus, and NewLineStar terminals, and it uses WhiteSpaceChars to know which characters to completely ignore unless the NonTerminal explicitly says it should be there.</p>\r\n<p>&nbsp;</p>\r\n<p>The best source for figuring out how things work is to play with the provided samples.&nbsp; Roman has provided a good set of example Grammars that each have something special.&nbsp; I honestly started with the GWBasic grammar because I find that language pretty easy and then moved up to the Java and CSharp Grammars which are a bit more complex.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-10-12T11:08:39.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683311",
    "ThreadId": "275570",
    "Html": "<p>My DSL is easier than GwBasic :)</p>\r\n<p>I'm on a time crunch actually. That's why so many questions. Otherwise, I would love to spend hours on understanding this project via samples.&nbsp;This project is really excellent, I must say. :)</p>\r\n<p>Thank you MindCore for helping me out so much!</p>\r\n<p>&nbsp;</p>\r\n<p>Regards</p>\r\n<p>Nayan</p>",
    "PostedDate": "2011-10-12T11:47:18.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]