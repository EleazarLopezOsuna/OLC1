[
  {
    "Id": "431157",
    "ThreadId": "209377",
    "Html": "<p>Hi</p>\r\n<p>I have the following scenario. I am creating cinema movies schedules. So i have schedules of the form</p>\r\n<p><span style=\"font-size:10pt\">Thu-Wen 14.15 / 16.45, Thu &amp; Mon-Wen 22.15 /00.45, Sat,Sun 12.15 3D translated </span></p>\r\n<p><span style=\"font-size:10pt\">or</span></p>\r\n<p><span style=\"font-family:Verdana;font-size:x-small\"><span style=\"font-size:10pt;font-family:Verdana\">Thu-Wen 14.15 /16.45 Mon 14.15<br></span></span></p>\r\n<p>given the characters TFSAMBW for each day of the week starting from thurday -&gt;T ,friday-&gt;F and so on i would expect the following input for 1st schedule above</p>\r\n<p>T-W14151645TMW22150045SA1215DL</p>\r\n<p>this way the user input speed is almost maximun</p>\r\n<p>but since i m a first time user i would need some help for creating that grammar. It could also be a nice very simple scenario for Irony source :)</p>",
    "PostedDate": "2010-04-14T14:00:03.353-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431176",
    "ThreadId": "209377",
    "Html": "<p>Some quick questions.&nbsp;</p>\r\n<p>1. Shouldn't the input text be as follows:</p>\r\n<p>T-W14151645TM<strong><span style=\"color:#ff0000\">-</span></strong>W22150045SA1215DL</p>\r\n<p>for&nbsp;&nbsp;&nbsp; <span style=\"font-size:10pt\">Thu-Wen 14.15 / 16.45, Thu &amp; Mon<strong><span style=\"color:#ff0000\">-</span></strong>Wen  22.15 /00.45, Sat,Sun 12.15 3D</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:10pt\">2. Are the times always 4 digits?&nbsp; In other words, they can't just put 12 for 12.00.</span></p>\r\n<p><span style=\"font-size:10pt\">3. Are there any other options like &quot;3D&quot;, which appears to translate to &quot;DL&quot;, correct?</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:10pt\">-MindCore<br></span></p>",
    "PostedDate": "2010-04-14T15:23:07.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431193",
    "ThreadId": "209377",
    "Html": "<p>1. yes</p>\r\n<p>2.12 should be acceptable also</p>\r\n<p>3. no onlyt those 2</p>\r\n<p>4. the combination of days and hrs may vary a lot, also the length of the sentence. I just gave u some examples and hope from your code to be able to build anything else i need</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-14T16:37:19.417-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431240",
    "ThreadId": "209377",
    "Html": "<p>I think you should use FixedLengthLiteral for dates/times, with proper DateFormat setting; for alphabetical symbols use direct terms ( Day.Rule = ToTerm(&quot;M&quot;) | &quot;T&quot; | &quot;W&quot;...)</p>\r\n<p>If you want to exclude spaces (not allow them), you should set Grammar.WhitespaceChars to empty string.&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-14T20:41:11.92-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431263",
    "ThreadId": "209377",
    "Html": "<p>I had to have some fun with the CustomTerminal class.  Find below a grammar for the scenario you described.  As you will see that I created two custom terminals, one for dates and date ranges and another one for times.  This may be overkill, but it was a great exercise for me and I hope it will aid others in their own exploration of the Irony framework.<br> <br> - MindCore</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n\r\n<span style=\"color:Blue\">using</span> Irony.Parsing;\r\n\r\n<span style=\"color:Blue\">namespace</span> Irony.Samples\r\n{\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> This class defines the Grammar for simple Movie Time entry language.</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;remarks&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> http://irony.codeplex.com/Thread/View.aspx?ThreadId=209377</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/remarks&gt;</span>\r\n    [Language(<span style=\"color:#A31515\">&quot;Movie Times&quot;</span>, <span style=\"color:#A31515\">&quot;1.0&quot;</span>, <span style=\"color:#A31515\">&quot;Simple Movie Times grammar&quot;</span>)]\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> MovieTimesGrammar : Grammar\r\n    {\r\n        <span style=\"color:Blue\">public</span> MovieTimesGrammar()\r\n        {\r\n\r\n            <span style=\"color:Blue\">#region</span> Terminals\r\n\r\n            <span style=\"color:Blue\">var</span> Time = <span style=\"color:Blue\">new</span> MovieTimeTerminal(<span style=\"color:#A31515\">&quot;Time&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> Date = <span style=\"color:Blue\">new</span> MovieDateTerminal(<span style=\"color:#A31515\">&quot;Date or Date Range&quot;</span>);\r\n           \r\n            <span style=\"color:Blue\">#endregion</span>\r\n\r\n            <span style=\"color:Blue\">#region</span> Non-terminals\r\n\r\n            <span style=\"color:Blue\">var</span> MOVIE = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Movie&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> DATES_AND_TIMES = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Movie Dates &amp; Times&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> DATE_TIME_SET = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Date/Time Set&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> DATE = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Date&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> TIME = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Time&quot;</span>);\r\n\r\n            <span style=\"color:Blue\">var</span> MISC = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Misc&quot;</span>);\r\n\r\n            <span style=\"color:Blue\">#endregion</span>\r\n\r\n            MISC.Rule = <span style=\"color:#A31515\">&quot;DL&quot;</span> | Empty;\r\n\r\n\r\n            TIME.Rule = MakePlusRule(TIME, Time);\r\n\r\n            DATE.Rule = MakePlusRule(DATE, Date);\r\n\r\n            DATE_TIME_SET.Rule = DATE + TIME;\r\n\r\n            DATES_AND_TIMES.Rule = MakePlusRule(DATES_AND_TIMES, DATE_TIME_SET);\r\n\r\n            MOVIE.Rule = DATES_AND_TIMES + MISC;\r\n            \r\n\r\n            <span style=\"color:Blue\">this</span>.Root = MOVIE;\r\n\r\n            <span style=\"color:Blue\">this</span>.LanguageFlags = LanguageFlags.NewLineBeforeEOF;\r\n\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> MovieTimeTerminal : CustomTerminal\r\n        {\r\n            <span style=\"color:Blue\">public</span> MovieTimeTerminal(<span style=\"color:Blue\">string</span> name)\r\n                : <span style=\"color:Blue\">base</span>(name, MovieTimeHandler, <span style=\"color:Blue\">null</span>)\r\n            { }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> Token MovieTimeHandler(Terminal terminal, ParsingContext context, ISourceStream source)\r\n        {\r\n            <span style=\"color:Blue\">var</span> pos = context.Source.PreviewPosition;\r\n            <span style=\"color:Blue\">string</span> text = <span style=\"color:Blue\">string</span>.Empty;\r\n\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; 4; i++)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (context.Source.EOF()) <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n                text += context.Source.PreviewChar;\r\n                context.Source.PreviewPosition++;\r\n            }\r\n            \r\n            <span style=\"color:Blue\">int</span> raw;\r\n\r\n            <span style=\"color:Green\">// Is the text numeric?</span>\r\n            <span style=\"color:Blue\">if</span> (!<span style=\"color:Blue\">int</span>.TryParse(text, <span style=\"color:Blue\">out</span> raw))\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n\r\n            <span style=\"color:Green\">// Validate Hours</span>\r\n            <span style=\"color:Blue\">var</span> hrs = Convert.ToInt16(raw / 100);\r\n            <span style=\"color:Blue\">if</span> (hrs &lt; 0 || hrs &gt; 23)\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n\r\n            <span style=\"color:Green\">// Validate Minutes</span>\r\n            <span style=\"color:Blue\">var</span> min = raw - (hrs * 100);\r\n            <span style=\"color:Blue\">if</span> (min &lt; 0 || min &gt; 60)\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n\r\n            <span style=\"color:Green\">// Create a Token with a TimeSpan object</span>\r\n            <span style=\"color:Blue\">var</span> line = context.Source.Location.Line;\r\n            <span style=\"color:Blue\">var</span> col = context.Source.Location.Column;\r\n            <span style=\"color:Blue\">var</span> sl = <span style=\"color:Blue\">new</span> SourceLocation(pos, line, col);\r\n            <span style=\"color:Blue\">var</span> time = <span style=\"color:Blue\">new</span> TimeSpan(hrs, min, 0);\r\n\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> Token(terminal, sl, text, time);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> MovieDateTerminal : CustomTerminal\r\n        {\r\n            <span style=\"color:Blue\">public</span> MovieDateTerminal(<span style=\"color:Blue\">string</span> name)\r\n                : <span style=\"color:Blue\">base</span>(name, MovieDateHandler, <span style=\"color:Blue\">null</span>)\r\n            { }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> Token MovieDateHandler(Terminal terminal, ParsingContext context, ISourceStream source)\r\n        {\r\n            <span style=\"color:Green\">// Set up a date code Dictionary</span>\r\n            <span style=\"color:Blue\">var</span> valid_date_codes = <span style=\"color:Blue\">new</span> Dictionary&lt;<span style=\"color:Blue\">char</span>,<span style=\"color:Blue\">string</span>&gt;();\r\n            valid_date_codes.Add(<span style=\"color:#A31515\">'M'</span>, <span style=\"color:#A31515\">&quot;Mon&quot;</span>);\r\n            valid_date_codes.Add(<span style=\"color:#A31515\">'B'</span>, <span style=\"color:#A31515\">&quot;Tue&quot;</span>);\r\n            valid_date_codes.Add(<span style=\"color:#A31515\">'W'</span>, <span style=\"color:#A31515\">&quot;Wed&quot;</span>);\r\n            valid_date_codes.Add(<span style=\"color:#A31515\">'T'</span>, <span style=\"color:#A31515\">&quot;Thur&quot;</span>);\r\n            valid_date_codes.Add(<span style=\"color:#A31515\">'F'</span>, <span style=\"color:#A31515\">&quot;Fri&quot;</span>);\r\n            valid_date_codes.Add(<span style=\"color:#A31515\">'S'</span>, <span style=\"color:#A31515\">&quot;Sat&quot;</span>);\r\n            valid_date_codes.Add(<span style=\"color:#A31515\">'A'</span>, <span style=\"color:#A31515\">&quot;Sun&quot;</span>);\r\n            \r\n            <span style=\"color:Blue\">var</span> pos = context.Source.Location.Position;\r\n            <span style=\"color:Blue\">var</span> from_date = context.Source.PreviewChar;\r\n\r\n            <span style=\"color:Green\">// Validate first character against the Dictionary?</span>\r\n            <span style=\"color:Blue\">if</span> (!valid_date_codes.ContainsKey(from_date))\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n\r\n            <span style=\"color:Blue\">var</span> dates = valid_date_codes[from_date];\r\n            <span style=\"color:Blue\">var</span> text = from_date.ToString();\r\n            context.Source.PreviewPosition++;\r\n\r\n            <span style=\"color:Green\">// Determine if it is a range by validating that the </span>\r\n            <span style=\"color:Green\">// second preview character is a dash</span>\r\n            <span style=\"color:Blue\">if</span> (context.Source.PreviewChar == <span style=\"color:#A31515\">'-'</span>)\r\n            {\r\n                <span style=\"color:Blue\">var</span> thru_date = context.Source.NextPreviewChar;\r\n\r\n                <span style=\"color:Green\">// Validate third character against the Dictionary?</span>\r\n                <span style=\"color:Blue\">if</span> (!valid_date_codes.ContainsKey(thru_date))\r\n                    <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n\r\n                text += <span style=\"color:#A31515\">&quot;-&quot;</span> + thru_date.ToString();\r\n                dates += <span style=\"color:#A31515\">&quot; through &quot;</span> + valid_date_codes[thru_date];\r\n                context.Source.PreviewPosition++;\r\n                context.Source.PreviewPosition++;               \r\n            }\r\n\r\n            <span style=\"color:Green\">// Create a Token</span>\r\n            <span style=\"color:Blue\">var</span> line = context.Source.Location.Line;\r\n            <span style=\"color:Blue\">var</span> col = context.Source.Location.Column;\r\n            <span style=\"color:Blue\">var</span> sl = <span style=\"color:Blue\">new</span> SourceLocation(pos, line, col);\r\n\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> Token(terminal, sl, text, dates);\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-14T22:25:44.6-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431268",
    "ThreadId": "209377",
    "Html": "<p>Looks good. Couple of things</p>\r\n<p>Why you need to subclass CustomTerminal? you can use CustomTerminal itself directly in the grammar (two instances) and specify MatchHandlers for each.&nbsp;</p>\r\n<p>Names for non-terminals - it's better use names without spaces. With spaces the printout of states/productions in Parser States page will be quite confusing</p>\r\n<p>In MovieDateHandler, at the end - calling new Token(...) - the last param is token Value; it should normally be a binary, parsed value, to be usable by processing code down the line; you put just a string there, just to see it in parse tree I guess, but for real code it should be some data structure for (dateFrom, dateUntil) pair.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-14T22:37:39.2-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431317",
    "ThreadId": "209377",
    "Html": "<p>thnks for the code. but still need some help here. What the recommended way to debug this? what i have done is copy the new moviegrammar to Irony.Samples.Console and add a 3 option for it. then i run it and</p>\r\n<p>&gt;M<br>.M1200<br>Root AST node is null, cannot evaluate.</p>\r\n<p>i hit M + enter which is not a valid entry but the cursor move to the next line. then i corrected the entry but i got the next message</p>",
    "PostedDate": "2010-04-15T00:55:39.857-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431425",
    "ThreadId": "209377",
    "Html": "<p>Roman,&nbsp; thanks for the suggestions.&nbsp; As for the first suggestion, I did this for the sake of demonstration as I would assume that typically the Custom Terminals and their Match Handlers would be in a separate file.&nbsp; As for the last suggestion, you are correct, it was just to spit out the text to the parse tree;&nbsp; it would be useless down stream. So, this would have to be adjusted depending on how it's to be used later.&nbsp; You date pair suggestion would probably be most feasible.</p>\r\n<p>Tolisss,&nbsp; can you better describe how you added your 3 new options?&nbsp; It appears that the AST Node construction has been enabled, yet the only thing I've provided is a simple parser grammar and two terminals.&nbsp; You would still have to create AST nodes for the two custom terminals. Without the token to AST Node conversion, Irony doesn't know how to continue and would error out.</p>\r\n<p>Thanks,</p>\r\n<p>MindCore</p>",
    "PostedDate": "2010-04-15T06:01:28.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431427",
    "ThreadId": "209377",
    "Html": "<p>Hi</p>\r\n<p>i have added the grammar at 020.Irony.Samples project compile and change the init code at 025.Irony.Samples.Console to</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>      Console.Title = <span style=\"color:#A31515\">&quot;Irony Console Sample&quot;</span>;\r\n      Console.WriteLine(<span style=\"color:#A31515\">&quot;Irony Console Sample.&quot;</span>);\r\n      Console.WriteLine(<span style=\"color:#A31515\">&quot;&quot;</span>);\r\n      Console.WriteLine(<span style=\"color:#A31515\">&quot;Select a grammar to load:&quot;</span>);\r\n      Console.WriteLine(<span style=\"color:#A31515\">&quot;  1. Expression Evaluator&quot;</span>);\r\n      Console.WriteLine(<span style=\"color:#A31515\">&quot;  2. mini-Python&quot;</span>);\r\n      Console.WriteLine(<span style=\"color:#A31515\">&quot;  Or press any other key to exit.&quot;</span>);\r\n      Console.WriteLine(<span style=\"color:#A31515\">&quot;&quot;</span>);\r\n      Console.Write(<span style=\"color:#A31515\">&quot;?&quot;</span>);\r\n      <span style=\"color:Blue\">var</span> choice = Console.ReadLine();\r\n      Grammar grammar; \r\n      <span style=\"color:Blue\">switch</span> (choice) {\r\n        <span style=\"color:Blue\">case</span> <span style=\"color:#A31515\">&quot;1&quot;</span>: \r\n          grammar = <span style=\"color:Blue\">new</span> ExpressionEvaluatorGrammar();\r\n          <span style=\"color:Blue\">break</span>;\r\n        <span style=\"color:Blue\">case</span> <span style=\"color:#A31515\">&quot;2&quot;</span>:\r\n          grammar = <span style=\"color:Blue\">new</span> MovieTimesGrammar();\r\n          <span style=\"color:Blue\">break</span>; \r\n        <span style=\"color:Blue\">default</span>:\r\n          <span style=\"color:Blue\">return</span>;\r\n      }\r\n      Console.Clear(); \r\n      <span style=\"color:Blue\">var</span> commandLine = <span style=\"color:Blue\">new</span> CommandLine(grammar);\r\n      commandLine.Run();\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-04-15T06:04:33.977-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431437",
    "ThreadId": "209377",
    "Html": "<p>Ok,</p>\r\n<p>Sorry, I misunderstood you when you said you added 3 options.&nbsp; The 025.Irony.Samples.Console will do a full evaluation on the text you type in; it assumes that the Parser &amp; Interpreter are fully functional.&nbsp; Unfortunately, all I provided you was the Parser portion.</p>\r\n<p>If you would like to see the parser function, set your start-up project to 030.Irony.GrammarExplorer, then run the solution.&nbsp; At the top of the window is an area to add and select grammars.&nbsp; Add your grammar from your compiled Irony.Samples.dll and select it.&nbsp; Then go over to the Test tab, enter your text in the textarea, and click the parse button.&nbsp; If there are no syntax errors, you should see the Parse Tree on the right.&nbsp; You will also notice that the AST Node Tree isn't populated upon parsing and the evaluation doesn't run because this would still need to be done.</p>\r\n<p>Let me know if that helps.</p>\r\n<p>-MindCore</p>",
    "PostedDate": "2010-04-15T06:29:13.69-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431510",
    "ThreadId": "209377",
    "Html": "<p>Hi i look how u do it on Grammar explorer and i ll replicate in my app.</p>\r\n<p>I have one more question on translate , 3D</p>\r\n<p>what i really want to do is</p>\r\n<p>MISC.Rule = ToTerm(&quot;D&quot;) |&quot;L&quot;|&quot;DL&quot;|&quot;LD&quot;|Empty;</p>\r\n<p>does that sound right to u? Or i could make it more clever by introducing more NonTerminals?</p>",
    "PostedDate": "2010-04-15T08:36:01.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "431550",
    "ThreadId": "209377",
    "Html": "<p>It really depends on how you intend to use the terminals.&nbsp; Do the &quot;D&quot; and &quot;L&quot; signify different Terminals (does &quot;D&quot; mean one thing and &quot;L&quot; mean another - 2 unique terminals) or does each Terminal mean something different (&quot;D&quot;,&quot;L&quot;, &quot;DL&quot; , or &quot;LD&quot; - 4 terminals)?&nbsp; What you are specifying in the change is the latter.</p>\r\n<p>If the first one is what you intend, you could do the following:</p>\r\n<p>OPTION_D.Rule = ToTerm(&quot;D&quot;);<br> OPTION_L.Rule = ToTerm(&quot;L&quot;);<br> OPTION_DL.Rule = OPTION_D + OPTION_L;&nbsp; // represents DL<br> OPTION_LD.Rule = OPTION_L + OPTION_D;&nbsp; // represents LD<br> MISC.Rule = Empty | OPTION_D | OPTION_L | OPTION_DL | OPTION_LD;&nbsp; // this would allow for only one instance for each D and L</p>\r\n<p>&nbsp;</p>\r\n<p>One thing to note - the MakeStarRule approach probably won't suit your needs because it would allow multiple D's and L's</p>\r\n<p>Example: <br>MISC.Rule = MakeStarRule(MISC , ToTerm(&quot;D&quot;) | ToTerm(&quot;L&quot;));&nbsp;&nbsp;&nbsp; //&nbsp; this would allow for inputs such as DLDD or LL</p>\r\n<p>-MindCore</p>",
    "PostedDate": "2010-04-15T09:55:00.12-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "432692",
    "ThreadId": "209377",
    "Html": "<p>Hi again</p>\r\n<p>thnks for your great support , but i would need to introduce one more symbol and cannot find the correct way . I want to introduce the &amp; symbol just after days so the input may be now like. Take a note that &amp; is not required</p>\r\n<p>T-W14151645TM<strong><span style=\"color:#ff0000\">-</span></strong>W&amp;22150045SA&amp;1215DL. Could u please modify the code ?</p>",
    "PostedDate": "2010-04-19T05:56:47.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "432697",
    "ThreadId": "209377",
    "Html": "<p>Here you are.  You may be able to make the BNF terms more concise by changing DATE_AMP to something like DATE_AMP.Rule = DATE + (Empty | ToTerm(&quot;&amp;&quot;)); however, it's usually better to start everything out in it's simplest form and then clean it up.<br> <br>- MindCore</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>AMP_OPT.Rule = Empty | ToTerm(<span style=\"color:#a31515\">&quot;&amp;&quot;</span>);\r\n\r\nOPTION_D.Rule = ToTerm(<span style=\"color:#a31515\">&quot;D&quot;</span>);\r\n\r\nOPTION_L.Rule = ToTerm(<span style=\"color:#a31515\">&quot;L&quot;</span>);\r\n\r\nOPTION_DL.Rule = OPTION_D + OPTION_L;\r\n\r\nOPTION_LD.Rule = OPTION_L + OPTION_D;\r\n\r\nMISC.Rule =  Empty | OPTION_D | OPTION_L | OPTION_DL | OPTION_LD;\r\n\r\nTIME.Rule = MakePlusRule(TIME, Time);\r\n\r\nDATE.Rule = MakePlusRule(DATE, Date);\r\n\r\nDATE_AMP.Rule = DATE + AMP_OPT;\r\n\r\nDATE_TIME_SET.Rule = DATE_AMP + TIME;\r\n\r\nDATES_AND_TIMES.Rule = MakePlusRule(DATES_AND_TIMES, DATE_TIME_SET);\r\n\r\nMOVIE.Rule = DATES_AND_TIMES + MISC;\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-19T06:29:11.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]