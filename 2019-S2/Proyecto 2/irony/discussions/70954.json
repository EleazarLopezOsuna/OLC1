[
  {
    "Id": "241894",
    "ThreadId": "70954",
    "Html": "<p>hi there,</p>\r\n<p>I've spent the last few hours with Irony and until now have stuck with the ParseTree, traversing manually and emitting as I go etc.</p>\r\n<p>However I would like to explore creating an AST. Unfortunately all I've found in the way of examples / instructions (CodeProject articles) refer to deprecated versions of the api.</p>\r\n<p>My problem is that I'm unable to properly initialise my custom AstNodes for ParseTreeNodes so that they contain the corresponding child node data.</p>\r\n<p>I have created custom node classed inheriting from AstNode (OrExprNode &amp; AndExprNode in the code below).</p>\r\n<p>My grammar is set to create an Ast when setting things up:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><div style=\"color:Black;background-color:White\"><pre> <span style=\"color:Blue\">var</span> grammar = <span style=\"color:Blue\">new</span> MyGrammar();\r\n grammar.LanguageFlags |= LanguageFlags.CreateAst;\r\n <span style=\"color:Blue\">var</span> languageData = <span style=\"color:Blue\">new</span> LanguageData(grammar);\r\n _parser = <span style=\"color:Blue\">new</span> Parser(languageData);\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>and I've tried both</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">var</span> orExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;orExpression&quot;</span>, typeof(OrExprNode));<br><span style=\"color:Blue\">var</span> andExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;andExpression&quot;</span>, typeof(AndExprNode));<br></pre>\r\n</div>\r\n<p>and</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">var</span> orExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;orExpression&quot;</span>,\r\n                                   (context, parseNode) =&gt;\r\n                                   {\r\n                                       <span style=\"color:Blue\">var</span> astNode = <span style=\"color:Blue\">new</span> OrExprNode();\r\n                                       astNode.Init(context, parseNode);\r\n                                   });\r\n<span style=\"color:Blue\">var</span> andExpression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;andExpression&quot;</span>,\r\n                                    (context, parseNode) =&gt;\r\n                                    {\r\n                                        <span style=\"color:Blue\">var</span> astNode = <span style=\"color:Blue\">new</span> AndExprNode();\r\n                                        astNode.Init(context, parseNode);\r\n                                    });\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>in my grammar constructor yet in both cases, after parsing, the AstNode property of the root ParseTreeNode is set but the AstNode is not initialised with any of the token child nodes from the root.</p>\r\n<p>I've had a look at the SchemeGrammar in the source (as suggested elsewhere) but found the AstNodeCreators' bodies commented out, I assume because they use AstNode constructor overloads which are not in the api anymore.</p>\r\n<p>It would be great if someone could give me a hint on how to create and initialise my custom AstNode subclasses properly so I can dive a little deeper.</p>\r\n<p>Thanks for the great work, I am thoroughly enjoying the project.</p>\r\n<p>crs</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"overflow:hidden;left:-10000px;top:152px;width:1px;height:1px\">var orExpression = new NonTerminal(&quot;orExpression&quot;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (context, parseNode) =&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var astNode = new OrExprNode();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; astNode.Init(context, parseNode);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>var andExpression = new NonTerminal(&quot;andExpression&quot;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (context, parseNode) =&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var astNode = new AndExprNode();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; astNode.Init(context, parseNode);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</div>",
    "PostedDate": "2009-10-04T09:45:27.97-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241895",
    "ThreadId": "70954",
    "Html": "<p>Look at ExpressionEvaluator grammar, it has this stuff fully working. Otherwise, I don't see why it's not working, I would need more info</p>\r\n<p>Roman</p>",
    "PostedDate": "2009-10-04T09:50:29.41-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]