[
  {
    "Id": "1094392",
    "ThreadId": "457401",
    "Html": "Hi,<br />\n<br />\nThis is my first attempt to write a grammar but I have to admit, this is much harder than I thought.<br />\n<br />\nThe objective of the grammar is to be generate an HTML layout based on the grammar + script (as external text file) + data (in XML format).<br />\n<br />\nBefore going that far, I simply wanted to be able to evaluate an &quot;IF expression&quot;.<br />\n<br />\nParsing seems to be OK, however when I try to interpret it, I receive the &quot;Root AST node is null, cannot evaluate&quot; message.<br />\n<br />\nHere is the code (in VB.NET, which is mandatory for me, unfortunately).<br />\n<pre><code>Imports Irony\nImports Irony.Ast\nImports Irony.Parsing\nImports Irony.Parsing.Grammar\n\nPublic Class IF_EXPR_Evaluator\n    Inherits AstNode\n\n    Public Name As String\n    Public Argument As AstNode\n\n    Public Overrides Sub Init(context As Irony.Parsing.ParsingContext, treeNode As Irony.Parsing.ParseTreeNode)\n        MyBase.Init(context, treeNode)\n        Name = treeNode.ChildNodes(0).FindTokenAndGetText()\n        Argument = AddChild(&quot;Arg&quot;, treeNode.ChildNodes(1))\n        AsString = Name\n    End Sub\n\n    Public Overrides Sub Evaluate(context As Irony.Interpreter.EvaluationContext, mode As Irony.Ast.AstMode)\n        Argument.Evaluate(context, AstMode.Read)\n        Dim input As String = Convert.ToString(context.Data(0))\n        Dim result As Double\n        Select Case Name.ToUpper()\n            Case &quot;EXISTS&quot;\n                'TODO\n            Case &quot;IS_NULL&quot;\n                'TODO\n            Case &quot;IS_EMPTY&quot;\n                'TODO\n        End Select\n        context.Data.Replace(1, result)\n    End Sub\nEnd Class\n\nPublic Class Test_Grammar\n    Inherits Irony.Parsing.Grammar\n\n    Public Sub New()\n\n        Me.GrammarComments = &quot;This is my first grammar&quot;\n\n        ' -- Types of &quot;variables&quot; -- \n\n        Dim StringLiteral As StringLiteral = TerminalFactory.CreateCSharpString(&quot;StringLiteral&quot;)\n        Dim Number As NumberLiteral = TerminalFactory.CreateCSharpNumber(&quot;Number&quot;)\n        Number.DefaultIntTypes = New TypeCode() {TypeCode.Int32, TypeCode.Int64}\n\n        ' -- Comments -- \n        Dim DelimitedComment As New CommentTerminal(&quot;DelimitedComment&quot;, &quot;/*&quot;, &quot;*/&quot;)\n        NonGrammarTerminals.Add(DelimitedComment)\n        Dim COMMENT_OPT = New NonTerminal(&quot;COMMENT_OPT&quot;)\n        Dim COMMENTS = New NonTerminal(&quot;COMMENTS&quot;)\n\n        COMMENT_OPT.Rule = DelimitedComment Or Empty\n\n        COMMENTS.Rule = MakePlusRule(COMMENTS, COMMENT_OPT)\n\n        ' -- Symbols -- \n\n        Dim LSBr As KeyTerm = ToTerm(&quot;[&quot;)\n        Dim RSBr As KeyTerm = ToTerm(&quot;]&quot;)\n\n        ' -- Variables -- \n\n        Dim variable = New IdentifierTerminal(&quot;Identifier&quot;)\n        Dim BLOCK = New NonTerminal(&quot;BLOCK&quot;)\n        Dim BLOCKS = New NonTerminal(&quot;BLOCKS&quot;)\n        Dim IF_STMT = New NonTerminal(&quot;IF_STMT&quot;)\n        Dim IF_STMTS = New NonTerminal(&quot;IF_STMT&quot;)\n        Dim IF_EXPR = New NonTerminal(&quot;IF_EXPR&quot;, GetType(IF_EXPR_Evaluator))\n        Dim IF_EXPR_COND = New NonTerminal(&quot;IF_EXPR_COND&quot;)\n        Dim identifier_if_expr As IdentifierTerminal = TerminalFactory.CreateCSharpIdentifier(&quot;identifier_if_expr&quot;)\n        Dim ELSE_STMT = New NonTerminal(&quot;ELSE_STMT&quot;)\n\n        Dim TAB_CONTENT = New NonTerminal(&quot;TAB_CONTENT&quot;)\n        Dim TAB = New NonTerminal(&quot;TAB&quot;)\n        Dim TABS = New NonTerminal(&quot;TAB&quot;)\n        Dim LAYOUT = New NonTerminal(&quot;LAYOUT&quot;)\n        Dim EXPR_KEYWORD = New NonTerminal(&quot;EXPR_KEYWORD&quot;)\n\n        ' -- BLOCK -- \n\n        BLOCK.Rule = Empty Or NewLinePlus Or COMMENTS Or BLOCKS Or IF_STMTS\n        BLOCKS.Rule = MakePlusRule(BLOCKS, BLOCK)\n\n        ' -- IF_STMT -- \n\n        IF_STMT.Rule = &quot;if&quot; + IF_EXPR + NewLine + BLOCK + ELSE_STMT + &quot;end_if&quot; + NewLine\n        IF_STMTS.Rule = MakePlusRule(IF_STMTS, IF_STMT)\n\n        ' -- IF_EXPR -- \n\n        IF_EXPR.Rule = identifier_if_expr + &quot;(&quot; + IF_EXPR_COND + &quot;)&quot;\n        IF_EXPR_COND.Rule = StringLiteral Or StringLiteral + &quot;,&quot; + Number\n\n        ' -- ELSE_STMT -- \n\n        ELSE_STMT.Rule = Empty Or &quot;else&quot; + NewLine + BLOCKS\n\n        ' -- TAB = définition du contenu d'un tab -- \n\n        TAB.Rule = &quot;tab(&quot; + StringLiteral + &quot;)&quot; + TAB_CONTENT + &quot;end_tab&quot;\n        TABS.Rule = MakePlusRule(TABS, TAB)\n\n        ' -- TAB_CONTENT -- \n\n        TAB_CONTENT.Rule = Empty Or COMMENTS Or BLOCKS\n\n        ' -- LAYOUT = ensemble de tout ce qui peut être défini -- \n\n        LAYOUT.Rule = Empty Or COMMENTS Or NewLinePlus Or TABS\n\n        Me.Root = LAYOUT\n        Me.LanguageFlags = Parsing.LanguageFlags.CreateAst Or Parsing.LanguageFlags.CanRunSample\n    End Sub\nEnd Class\n</code></pre>\n\nThe invocation code is:<br />\n<pre><code>Dim script As String = &quot;tab(&quot;&quot;tab_name&quot;&quot;)&quot; + vbCrLf + _\n                                    &quot;if exists(&quot;&quot;t_data/data_1&quot;&quot;)&quot; + vbCrLf + _\n                                    &quot;end_if&quot; + vbCrLf + _\n                                &quot;end_tab&quot;\n\n\n        Dim grammar As Irony.Parsing.Grammar = New Test_Grammar()\n        Dim parser As Irony.Parsing.Parser = New Irony.Parsing.Parser(grammar)\n        Dim parseTree As Irony.Parsing.ParseTree = parser.Parse(script)\n\n        Dim interpret As ScriptInterpreter = New ScriptInterpreter(grammar)\n        interpret.Evaluate(parseTree)</code></pre>\n\nAny help will be appreciated.<br />\n<br />\nThank you<br />\n",
    "PostedDate": "2013-09-19T02:53:31.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1094545",
    "ThreadId": "457401",
    "Html": "First, did you try this in Grammar Explorer? that's the first thing you must do. I'm pretty sure it will show you a bunch of grammar errors. For one thing, your root is LAYOUT nonterminal, and it has no AST node specified. So no surprise here. Try it in GE<br />\n",
    "PostedDate": "2013-09-19T09:35:27.51-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1096792",
    "ThreadId": "457401",
    "Html": "I tried with GE and indeed this says the very same as you: there is no AST node specified.  How do I specify one?<br />\n",
    "PostedDate": "2013-09-20T00:22:32.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1096811",
    "ThreadId": "457401",
    "Html": "you have some other nonterminals that have node specified, ex: IF_EXPR - it is the second parameter for NonTerminal constructor<br />\n",
    "PostedDate": "2013-09-20T01:20:52.523-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]