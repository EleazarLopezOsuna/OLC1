[
  {
    "Id": "907923",
    "ThreadId": "394272",
    "Html": "\r\n<p>Hello</p>\r\n<p>My language needs to be able to understand the letters a-g as terminals. These letters should be able to be written together in any order with or without spaces.</p>\r\n<p>I also have keywords, some of which use these letters. It seems that if i define the letters a-g as terminals, the parser always gives this precendence, so that any keyword containing a letter a-g creates a parse error. What i need to be able to do is tell\r\n the parser to prioritise the keywords.</p>\r\n<p>Please see below a simplified example:</p>\r\n<p><em>example of what i am trying to parse:</em></p>\r\n<p></p>\r\n<pre>abc for( def )for</pre>\r\n<p></p>\r\n<p><em>example code:</em></p>\r\n<p></p>\r\n<pre>var note = new RegexBasedTerminal(&quot;note&quot;,&quot;[a-g]&quot;);\r\n\r\nvar statement = new NonTerminal(&quot;Statement&quot;);           \r\nstatement.Rule = loop | note;\r\nvar statementList = new NonTerminal(&quot;statementList&quot;);\r\nstatementList.Rule = MakePlusRule(statementList, statement);\r\n\r\nvar loop = new NonTerminal(&quot;Loop&quot;);\r\nloop.Rule = ToTerm(&quot;for(&quot;) &#43; statementList &#43; ToTerm(&quot;)for&quot;);\r\n\r\nthis.Root = statementList \r\n</pre>\r\n<p></p>\r\n<p>The above example will create a parse error like &quot;Invalid character: 'o'. &quot; because it interpreted my keyword 'for(' as 'f' followed by 'or(' instead of as the keyword i intended.</p>\r\n<p>I have tried setting priority / precedence on the keywords and terminals but this seems to have no effect.</p>\r\n<p>I hope I have expressed this clearly enough.</p>\r\n<p>Any help on this would be greatly appreciated !</p>\r\n<p>thanks,</p>\r\n<p>Julian</p>\r\n",
    "PostedDate": "2012-09-03T13:03:21.47-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "908485",
    "ThreadId": "394272",
    "Html": "<p>At first look, the problems I see:</p>\r\n<p>do not use RegexTerminal for such a simple case, better directly express note as:</p>\r\n<p>note.Rule = ToTerm(\"a\") | \"b\" | \"c\" | .... | \"g\";</p>\r\n<p>Do not include parenthesis into terminals, use it as a separate symbol, define loop statement as&nbsp;</p>\r\n<p>loop.Rule = ToTerm(\"for\") + \"(\" + statementList + \")\" + for;</p>\r\n<p>One really strange thing, that may be the cause of all troubles - you don't have any explicit delimiter between statements? or statement-end symbol?</p>\r\n<p>It does not look like you are implementing some existing language, are you making up your own? then I would suggest go back and rethink syntax, make structures more explicit - easier to express in BNF and as a side effect, easier to document</p>\r\n<p>Roman</p>",
    "PostedDate": "2012-09-04T22:58:10.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "908604",
    "ThreadId": "394272",
    "Html": "<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">Hi Roman</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">Thanks very much for your reply.</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">The language I am trying to recreate is a music programming language from 1987 called Ample (http://www.colinfraser.com/m5000/ample-nucleus-pg.pdf)</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">You are quite right - there are no explicit delimiters between statements. Whitespace is allowed purely to make the code more humanly readable.</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">I think it works by prioritising what it interprets, the priority being given to 'words' (which can be 'system' words (like the for loop statement) or 'user-defined' words) over musical notes. Notes are expressed with letters a-g, or A-G, (upper/lower case indicating a raising/lowering of pitch) with an optional + or - prefix (indicating flatted or sharpened notes). The example i gave for note was a simplification - the full regex (which works nicely) is [+|-]?[a-gA-G].</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">The following represents the tune 'BA-BA Black Sheep' in Ample (/ represents an empty beat):</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">\r\n<pre>c/c/G/G/ABCag///f/f/e/e/d/d/c///</pre>\r\n</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">This tune could be defined as a user word using the command:</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">\r\n<pre>\"BABA\" NAME MAKE</pre>\r\n</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">Once that word has been created, any further references to BABA will play the tune instead of the notes B A B A</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">\r\n<pre>BABABABA</pre>\r\n</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">would play the tune twice over.</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">\r\n<pre>BABABA</pre>\r\nwould play the tune once, followed by the notes B A.</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">Ample does have a lot of potential for ambiguity by nature. While this is a weakness on one hand, its flexibility makes for great creative possibilities.</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">Is it likely that Irony will not be able to cope with this type of  prioritised approach to parsing, where there are no explicit delimiters  between each component ?</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">Do you have any suggestions for how i could recreate this, or any workarounds (apart from requiring explicit delimiting) ?</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">Thanks again</p>\r\n<p style=\"color: #000000; font-family: 'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px;\">Julian</p>",
    "PostedDate": "2012-09-05T04:01:11.513-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "909258",
    "ThreadId": "394272",
    "Html": "<p>That's a tough case. The problem I see is that you introduce identifiers on the fly, like \"BABA\" - you introduce it using string literal (in quotes), but then expect it appear without quotes anywhere as identifier. I think it is doable, but you have to do some extra work.</p>\r\n<p>I think you should create custom NoteTerminal for your notes and tune names; inherit it from Terminal. It will recognize your \"notes\" or extra names defined like \"BABA\". This NoteTerminal should hold the list of allowed notes/tunes (initially just \"A\"..\"G\" notes). Then extra custom tunes can be added when you parse tune declaration nonterminal:</p>\r\n<p>TuneDecl.Rule = StrLiteralName + \"Name\" + \"Make\";</p>\r\n<p>Hook to TuneDecl.Reduced event - in the event handler, find the parsed tune name (it is first child of parsed node), and add it to the list of names in NoteTerminal. NoteTerminal should scan input using \"longest-first\" order of note/tune names, so it should sort names each time a name is added.&nbsp;</p>\r\n<p>Try this, I think it will work</p>\r\n<p>Roman</p>",
    "PostedDate": "2012-09-06T09:59:28.663-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "909897",
    "ThreadId": "394272",
    "Html": "<p>Maybe do some preprocessing? Since each statement is a unique one, you could create \"one big switch\" state-machine and automatically put spaces between statements.</p>",
    "PostedDate": "2012-09-08T00:50:10.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "915828",
    "ThreadId": "394272",
    "Html": "\r\n<p>Ha! It sounds like you are working on something very similar to the Q-Basic ABC variant that I have just written a parser and synthesizer for.</p>\r\n<p>link: <a href=\"http://en.wikibooks.org/wiki/QBasic/Appendix#PLAY\">http://en.wikibooks.org/wiki/QBasic/Appendix#PLAY</a></p>\r\n<p>This (working) grammar may give you some ideas:</p>\r\n<pre><pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region 1-Terminals<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal modePlay&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;modePlay&quot;,&nbsp;&nbsp; @&quot;M[BF]&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // NO-OP's<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal mode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;mode&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @&quot;M&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal modeStyle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;modeStyle&quot;,&nbsp;&nbsp; @&quot;[NLS]&quot;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal tempo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;tempo&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @&quot;T&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;length&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @&quot;L&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal octave&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;octave&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @&quot;O&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal integer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;integer&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @&quot;[0-9]&#43;&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal shift&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;shift&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @&quot;O*[&lt;&gt;]&quot;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal note&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;note&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @&quot;N&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal rest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;rest&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @&quot;P&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal noteLetter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;noteLetter&quot;, @&quot;[ABCDEFG]&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal sharpFlat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;sharpFlat&quot;,&nbsp;&nbsp; @&quot;[-#&#43;]&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal dots&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new RegexBasedTerminal(&quot;dots&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @&quot;\\.&#43;&quot;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MarkPunctuation(modePlay, NewLine);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion 1-Terminals</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region 2-Nonterminals<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal MusicList&nbsp;&nbsp; = new NonTerminal(&quot;MusicList&quot;,&nbsp;&nbsp; typeof(MusicListNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal Music&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new NonTerminal(&quot;Music&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal Directions&nbsp;&nbsp; = new NonTerminal(&quot;Directions&quot;,&nbsp;&nbsp; typeof(DirectionsNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal Direction&nbsp;&nbsp; = new NonTerminal(&quot;Direction&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal Tempo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new NonTerminal(&quot;Tempo&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(TempoNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal Length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new NonTerminal(&quot;Length&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(LengthNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal ModeStyle&nbsp;&nbsp; = new NonTerminal(&quot;ModeStyle&quot;,&nbsp;&nbsp; typeof(StyleNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal Octave&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new NonTerminal(&quot;Octave&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal OctaveNo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new NonTerminal(&quot;OctaveNo&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(OctaveNoNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal OctaveShift&nbsp;&nbsp; = new NonTerminal(&quot;OctaveShift&quot;,&nbsp;&nbsp; typeof(OctaveShiftNode));</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal Note&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new NonTerminal(&quot;Note&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal Rest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new NonTerminal(&quot;Rest&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(RestNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal NoteMod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new NonTerminal(&quot;NoteMod&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(NoteModNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal LetterNote&nbsp;&nbsp; = new NonTerminal(&quot;Note&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(LetterNoteNode));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal NumberNote&nbsp;&nbsp; = new NonTerminal(&quot;NumberNote&quot;,&nbsp;&nbsp; typeof(NumberNoteNode));</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal SharpFlat&nbsp;&nbsp; = new NonTerminal(&quot;SharpFlat&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal NoteValue&nbsp;&nbsp; = new NonTerminal(&quot;NoteValue&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NonTerminal Dots&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new NonTerminal(&quot;DotExpr&quot;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MarkTransient(Music, Direction, Octave, Note, SharpFlat, NoteValue, Dots);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion 2-Nonterminals</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region 3-Rules<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = MusicList;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MusicList.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = MakeStarRule(MusicList, Music);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Music.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Directions | Note;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Directions.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = MakePlusRule(Directions, Direction);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Direction.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = ModeStyle | Tempo | Length | Octave <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | PreferShiftHere() &#43; modePlay <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | PreferShiftHere() &#43; NewLine;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tempo.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = PreferShiftHere() &#43; tempo &#43; integer;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Length.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = PreferShiftHere() &#43; length &#43; integer;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Octave.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = OctaveNo | OctaveShift;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OctaveNo.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = PreferShiftHere() &#43; octave &#43; integer;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OctaveShift.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = PreferShiftHere() &#43; octave &#43; shift;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModeStyle.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = PreferShiftHere() &#43; mode &#43; modeStyle;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Note.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = NumberNote | Rest | LetterNote;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NumberNote.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = note &#43; integer;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rest.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = rest &#43; NoteValue &#43; Dots;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LetterNote.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = NoteMod &#43; NoteValue &#43; Dots;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NoteMod.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = noteLetter &#43; SharpFlat;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SharpFlat.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Empty | sharpFlat;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NoteValue.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Empty | integer;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dots.Rule&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Empty | dots;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Direction.ErrorRule&nbsp;&nbsp; = SyntaxError &#43; NewLine;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion 3-Rules</p></pre>\n</pre>\r\n",
    "PostedDate": "2012-09-21T10:38:55.157-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]