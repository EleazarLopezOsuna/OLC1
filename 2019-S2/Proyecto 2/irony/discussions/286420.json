[
  {
    "Id": "726438",
    "ThreadId": "286420",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm trying to use Irony to make a <a href=\"http://en.wikipedia.org/wiki/Bbcode\">\r\nBBCode</a> parser, but I don't know much about parsers and such... I looked at the samples provided with Irony, but I didn't find anything that looks like a markup language (except Wiki, but it doesn't have a structure similar to XML or BBCode so it's not very\r\n helpful). How should I go about defining the grammar for such a language?</p>\r\n<p>Here's what I tried so far. It's my first attempt at this kind of thing, so forgive me if it doesn't make any sense...</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    [Language(<span style=\"color:#a31515\">&quot;BBCode&quot;</span>, <span style=\"color:#a31515\">&quot;1.0&quot;</span>, <span style=\"color:#a31515\">&quot;BBCode markup grammar&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> BBCodeGrammar : Grammar\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> KeyTerm _openingBracket;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> KeyTerm _closingBracket;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> KeyTerm _slash;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> KeyTerm _equals;\r\n\r\n        <span style=\"color:blue\">public</span> BBCodeGrammar()\r\n        {\r\n            <span style=\"color:blue\">this</span>.GrammarComments = <span style=\"color:#a31515\">&quot;A grammar to parse BBCode&quot;</span>;\r\n\r\n            _openingBracket = ToTerm(<span style=\"color:#a31515\">&quot;[&quot;</span>);\r\n            _closingBracket = ToTerm(<span style=\"color:#a31515\">&quot;]&quot;</span>);\r\n            _slash = ToTerm(<span style=\"color:#a31515\">&quot;/&quot;</span>);\r\n            _equals = ToTerm(<span style=\"color:#a31515\">&quot;=&quot;</span>);\r\n\r\n            <span style=\"color:blue\">var</span> bbElement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;bbElement&quot;</span>);\r\n            <span style=\"color:blue\">var</span> bbText = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;bbText&quot;</span>);\r\n\r\n            <span style=\"color:green\">// Terminals</span>\r\n            <span style=\"color:blue\">var</span> text = <span style=\"color:blue\">new</span> BBCodeText();\r\n\r\n            <span style=\"color:green\">// Formatting</span>\r\n            <span style=\"color:blue\">var</span> bold = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;b&quot;</span>, <span style=\"color:blue\">false</span>);\r\n            MakeTagRule(bold, bbText, <span style=\"color:blue\">null</span>);\r\n            <span style=\"color:blue\">var</span> italic = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;i&quot;</span>, <span style=\"color:blue\">false</span>);\r\n            MakeTagRule(italic, bbText, <span style=\"color:blue\">null</span>);\r\n            <span style=\"color:blue\">var</span> underlined = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;u&quot;</span>, <span style=\"color:blue\">false</span>);\r\n            MakeTagRule(underlined, bbText, <span style=\"color:blue\">null</span>);\r\n            <span style=\"color:blue\">var</span> striked = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;s&quot;</span>, <span style=\"color:blue\">false</span>);\r\n            MakeTagRule(striked, bbText, <span style=\"color:blue\">null</span>);\r\n            <span style=\"color:blue\">var</span> size = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;size&quot;</span>, <span style=\"color:blue\">true</span>);\r\n            MakeTagRule(size, bbText, text);\r\n            <span style=\"color:blue\">var</span> color = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;color&quot;</span>, <span style=\"color:blue\">true</span>);\r\n            MakeTagRule(color, bbText, text);\r\n            <span style=\"color:blue\">var</span> inlineCode = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;CODEINLINE&quot;</span>, <span style=\"color:blue\">true</span>);\r\n            MakeTagRule(inlineCode, text, text);\r\n            \r\n            <span style=\"color:green\">// Links, images and attachments</span>\r\n            <span style=\"color:blue\">var</span> url = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;url&quot;</span>, <span style=\"color:blue\">null</span>);\r\n            MakeTagRule(url, bbText, text);\r\n            <span style=\"color:blue\">var</span> email = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;email&quot;</span>, <span style=\"color:blue\">true</span>);\r\n            MakeTagRule(email, bbText, text);\r\n            <span style=\"color:blue\">var</span> image = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;img&quot;</span>, <span style=\"color:blue\">false</span>);\r\n            MakeTagRule(image, text, <span style=\"color:blue\">null</span>);\r\n            <span style=\"color:blue\">var</span> attachment = <span style=\"color:blue\">new</span> BBCodeInlineTag(<span style=\"color:#a31515\">&quot;attach&quot;</span>, <span style=\"color:blue\">false</span>);\r\n            MakeTagRule(attachment, text, <span style=\"color:blue\">null</span>);\r\n\r\n            <span style=\"color:green\">// Blocks</span>\r\n            <span style=\"color:blue\">var</span> codeBlock = <span style=\"color:blue\">new</span> BBCodeBlockTag(<span style=\"color:#a31515\">&quot;code&quot;</span>, <span style=\"color:blue\">null</span>);\r\n            MakeTagRule(codeBlock, bbText, text);\r\n            <span style=\"color:blue\">var</span> blockQuote = <span style=\"color:blue\">new</span> BBCodeBlockTag(<span style=\"color:#a31515\">&quot;quote&quot;</span>, <span style=\"color:blue\">null</span>);\r\n            MakeTagRule(blockQuote, bbText, text);\r\n            <span style=\"color:blue\">var</span> preformatted = <span style=\"color:blue\">new</span> BBCodeBlockTag(<span style=\"color:#a31515\">&quot;pre&quot;</span>, <span style=\"color:blue\">false</span>);\r\n            MakeTagRule(preformatted, bbText, <span style=\"color:blue\">null</span>);\r\n\r\n            <span style=\"color:green\">// List</span>\r\n            <span style=\"color:blue\">var</span> list = <span style=\"color:blue\">new</span> BBCodeListTag();\r\n            <span style=\"color:blue\">var</span> listBullet = _openingBracket &#43; ToTerm(<span style=\"color:#a31515\">&quot;*&quot;</span>) &#43; _closingBracket;\r\n            <span style=\"color:blue\">var</span> listItem = listBullet &#43; bbText;\r\n            <span style=\"color:blue\">var</span> listContent = MakeStarRule(list, listItem);\r\n            MakeTagRule(list, listContent, text);\r\n\r\n            <span style=\"color:green\">// Rules</span>\r\n            bbElement.Rule = text | bold | italic | underlined | striked | size | color | inlineCode |\r\n                             url | email | image | attachment |\r\n                             codeBlock | blockQuote | preformatted | list;\r\n            bbText.Rule = MakeStarRule(bbText, bbElement);\r\n\r\n            Root = bbText;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> MakeTagRule(BBCodeTag tag, BnfTerm content, BnfTerm paramContent)\r\n        {\r\n            BnfExpression param = Empty;\r\n            <span style=\"color:blue\">if</span> (paramContent != <span style=\"color:blue\">null</span>)\r\n            {\r\n                <span style=\"color:blue\">if</span> (tag.HasParameter == <span style=\"color:blue\">true</span>)\r\n                    param = _equals &#43; paramContent;\r\n                <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (tag.HasParameter == <span style=\"color:blue\">null</span>)\r\n                    param = Empty | (_equals &#43; paramContent);\r\n            }\r\n            BnfExpression openingTag = _openingBracket &#43; tag.Name &#43; param &#43; _closingBracket;\r\n            BnfExpression closingTag = _openingBracket &#43; _slash &#43; tag.Name &#43; _closingBracket;\r\n            tag.Rule = openingTag &#43; content &#43; closingTag;\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">enum</span> BBTermType\r\n    {\r\n        Text,\r\n        ListItem,\r\n        Inline,\r\n        Block,\r\n        List,\r\n    }\r\n\r\n    <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">class</span> BBCodeTerminalBase : Terminal\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> BBTermType _type;\r\n\r\n        <span style=\"color:blue\">protected</span> BBCodeTerminalBase(<span style=\"color:blue\">string</span> name, BBTermType type) : <span style=\"color:blue\">base</span>(name)\r\n        {\r\n            _type = type;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> BBTermType Type\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _type; }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">class</span> BBCodeText : BBCodeTerminalBase\r\n    {\r\n        <span style=\"color:blue\">public</span> BBCodeText() : <span style=\"color:blue\">base</span>(<span style=\"color:#a31515\">&quot;text&quot;</span>, BBTermType.Text)\r\n        {\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> IList&lt;<span style=\"color:blue\">string</span>&gt; GetFirsts()\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> <span style=\"color:blue\">char</span>[] _stopChars = <span style=\"color:blue\">new</span>[] { <span style=\"color:#a31515\">'\\r'</span>, <span style=\"color:#a31515\">'\\n'</span>, <span style=\"color:#a31515\">'['</span> };\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> Token TryMatch(ParsingContext context, ISourceStream source)\r\n        {\r\n            <span style=\"color:blue\">int</span> stopIndex = source.Text.IndexOfAny(_stopChars, source.Location.Position &#43; 1);\r\n            <span style=\"color:blue\">if</span> (stopIndex == source.Location.Position) <span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:blue\">if</span> (stopIndex &lt; 0) stopIndex = source.Text.Length;\r\n            source.PreviewPosition = stopIndex;\r\n            <span style=\"color:blue\">return</span> source.CreateToken(<span style=\"color:blue\">this</span>.OutputTerminal);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">class</span> BBCodeTag : NonTerminal\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> <span style=\"color:blue\">bool</span>? _hasParameter;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> BBTermType _type;\r\n\r\n        <span style=\"color:blue\">protected</span> BBCodeTag(<span style=\"color:blue\">string</span> name, <span style=\"color:blue\">bool</span>? hasParameter, BBTermType type) : <span style=\"color:blue\">base</span>(name)\r\n        {\r\n            _hasParameter = hasParameter;\r\n            _type = type;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> BBTermType Type\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _type; }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span>? HasParameter\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _hasParameter; }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">class</span> BBCodeInlineTag : BBCodeTag\r\n    {\r\n        <span style=\"color:blue\">public</span> BBCodeInlineTag(<span style=\"color:blue\">string</span> name, <span style=\"color:blue\">bool</span>? hasParameter) : <span style=\"color:blue\">base</span>(name, hasParameter, BBTermType.Inline)\r\n        {\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">class</span> BBCodeBlockTag : BBCodeTag\r\n    {\r\n        <span style=\"color:blue\">public</span> BBCodeBlockTag(<span style=\"color:blue\">string</span> name, <span style=\"color:blue\">bool</span>? hasParameter)\r\n            : <span style=\"color:blue\">base</span>(name, hasParameter, BBTermType.Block)\r\n        {\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">class</span> BBCodeListTag : BBCodeTag\r\n    {\r\n        <span style=\"color:blue\">public</span> BBCodeListTag() : <span style=\"color:blue\">base</span>(<span style=\"color:#a31515\">&quot;list&quot;</span>, <span style=\"color:blue\">null</span>, BBTermType.List)\r\n        {\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Needless to say, it doesn't work... I'm getting a few errors in Grammar Explorer (things like &quot;Shift-reduce conflict. State S2, lookaheads [[]. Selected shift as preferred action.&quot;, which I don't understand at all), and the parser output only gives me a\r\n series of &quot;bbElement&quot; nodes with text terminals.</p>\r\n<p>Could someone tell me what I'm doing wrong (probably many things, I guess)? Am I even going in the right direction?</p>\r\n",
    "PostedDate": "2012-01-17T07:23:44.7-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "746121",
    "ThreadId": "286420",
    "Html": "<p>BBCode sounds familiar, I think somebody mentioned it before, I mean somebody built a parser for this but I'm not sure. Try searching discussions.</p>\r\n<p>Can't help you with your grammar, seems way too complicated and I don't know anything about the target language. And I would suggest first to read a bit about LR/LALR parsing, at least shift-reduce conflict must be a clear thing, before you embark on building parsers. Sorry, Irony makes it easier to build LALR parser, but you have to know what it is.</p>\r\n<p>Roman</p>",
    "PostedDate": "2012-02-07T17:01:41.587-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "746661",
    "ThreadId": "286420",
    "Html": "<p>Hi Roman,</p>\r\n<p>Thanks for your answer. I had searched the discussions before, but there's nothing about BBCode. I guess I should read about parsers in general before trying to do this... but anyway, writing a parser wasn't my final goal, so eventually I used a parser made by someone else.</p>\r\n<p>Regards,<br />Thomas</p>",
    "PostedDate": "2012-02-08T00:16:24.54-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]