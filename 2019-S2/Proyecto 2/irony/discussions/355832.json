[
  {
    "Id": "836624",
    "ThreadId": "355832",
    "Html": "\r\n<p>I have the following BNF</p>\r\n<p><strong>&lt;cause&gt;&nbsp;::=&nbsp;&ldquo;{&ldquo;&lt;text&gt;|[&lt;parameter&gt;]&rdquo;}&rdquo;</strong><br>\r\n<strong>&lt;effect&gt;&nbsp;::=&nbsp;&ldquo;{&ldquo;&lt;text&gt;|[&lt;parameter&gt;]&rdquo;}&rdquo;</strong><br>\r\n<strong>&lt;text&gt;&nbsp;::=&nbsp;[&lt;char&gt;]</strong><br>\r\n<strong>&lt;parameter&gt;&nbsp;::=&nbsp;&ldquo;[&ldquo;&lt;table-parameter-value&gt;|&lt;other-parameter-value&gt;&rdquo;]&rdquo;</strong><br>\r\n<strong>&lt;table-parameter-value&gt;&nbsp;::=&nbsp;[&lt;alphanumeric&gt;].&lt;numeric&gt;&lt;numeric&gt;&lt;numeric&gt;</strong><br>\r\n<strong>&lt;other-parameter-value&gt;&nbsp;::=&nbsp;&lt;text&gt;</strong><br>\r\n<strong>&lt;char&gt;&nbsp;::=&nbsp;&lt;alpha&gt;|&lt;numeric&gt;|&lt;TMSL-symbol&gt;</strong><br>\r\n<strong>&lt;alpha&gt;&nbsp;::=&nbsp;&ldquo;A&rdquo;-&ldquo;Z&rdquo; &ldquo;a&rdquo;-&ldquo;z&rdquo; &ldquo; &ldquo;\r\n</strong><br>\r\n<strong>&lt;numeric&gt;&nbsp;::=&nbsp;&ldquo;0&rdquo;-&ldquo;9&rdquo;</strong></p>\r\n<p>I am having difficulty converting this in Irony. I&nbsp;am currently using a StringLiteral but the problem is that the &quot;parameters&quot; are not get parsed correctly.&nbsp;Sample texts are also given below. Any help is greatly appreciated.</p>\r\n<p><br>\r\n<strong>{His/Her occupation in table [OCCLST01.013] and age is [&gt;] [21]}</strong><br>\r\n<strong>{Modify Volatile field use class to [PH1]}</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>NonTerminal text = <span style=\"color:blue\">new</span> NonTerminal(TXT);\r\nNonTerminal action = <span style=\"color:blue\">new</span> NonTerminal(ACTION);\r\nNonTerminal statement = <span style=\"color:blue\">new</span> NonTerminal(STATEMENT);\r\nNonTerminal for_cover = <span style=\"color:blue\">new</span> NonTerminal(FOR_COVER_TYPES);\r\nNonTerminal for_each_driver = <span style=\"color:blue\">new</span> NonTerminal(FOR_EACH_DRIVER);\r\nNonTerminal cover_list = <span style=\"color:blue\">new</span> NonTerminal(COVER_LIST);\r\nNonTerminal cover_type = <span style=\"color:blue\">new</span> NonTerminal(COVER_TYPE);\r\nNonTerminal if_do_endif = <span style=\"color:blue\">new</span> NonTerminal(IF_DO_ENDIF);\r\nNonTerminal if_else_endif = <span style=\"color:blue\">new</span> NonTerminal(IF_ELSE_ENDIF);\r\nNonTerminal condition = <span style=\"color:blue\">new</span> NonTerminal(CONDITION);\r\nNonTerminal logic_operator = <span style=\"color:blue\">new</span> NonTerminal(LOGIC_OPERATOR);\r\nNonTerminal cause = <span style=\"color:blue\">new</span> NonTerminal(CAUSE);\r\nNonTerminal effect = <span style=\"color:blue\">new</span> NonTerminal(EFFECT);\r\n\r\nNonTerminal not_condition = <span style=\"color:blue\">new</span> NonTerminal(NOT_CONDITION);\r\nNonTerminal logical_condition = <span style=\"color:blue\">new</span> NonTerminal(LOGICAL_CONDITION);\r\nNonTerminal cause_condition = <span style=\"color:blue\">new</span> NonTerminal(CAUSE_CONDITION);\r\n\r\nNumberLiteral numeric = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;numeric&quot;</span>);\r\nStringLiteral alpha = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;alpha&quot;</span>);\r\nNonTerminal alpha_numeric = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;alpha_numeric&quot;</span>);\r\nNonTerminal chars = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;chars&quot;</span>);\r\nNonTerminal parameter = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;parameter&quot;</span>);\r\nNonTerminal other_parameter = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;other_parameter&quot;</span>);\r\nNonTerminal table_parameter = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;table_parameter&quot;</span>);\r\n<span style=\"color:green\">//RegexBasedTerminal alpha = new RegexBasedTerminal(&quot;alpha&quot;, @&quot;[a-zA-Z0-9 ]&quot;);</span>\r\n\r\nalpha.AddStartEnd(<span style=\"color:#a31515\">&quot;{&quot;</span>, <span style=\"color:#a31515\">&quot;}&quot;</span>, StringOptions.NoEscapes);\r\n\r\nalpha_numeric.Rule = alpha;\r\nchars.Rule =  alpha;\r\ntext.Rule = chars;\r\nother_parameter.Rule = text;\r\ntable_parameter.Rule = alpha_numeric &#43; ToTerm(<span style=\"color:#a31515\">&quot;.&quot;</span>) &#43; numeric &#43; numeric &#43; numeric;\r\nparameter.Rule = ToTerm(<span style=\"color:#a31515\">&quot;[&quot;</span>) &#43; other_parameter | table_parameter &#43; ToTerm(<span style=\"color:#a31515\">&quot;]&quot;</span>);\r\n\r\n<span style=\"color:green\">// &lt;statement&gt; ::= &lt;FOR-statement&gt;|&lt;IF-DO-statement&gt;|&lt;IF-ELSE-statement&gt;|&lt;effect&gt;|{}</span>\r\nstatement.Rule = for_cover | for_each_driver | if_do_endif | if_else_endif | effect | Empty;\r\n\r\nfor_cover.Rule = ToTerm(<span style=\"color:#a31515\">&quot;FOR COVER TYPES&quot;</span>) &#43; <span style=\"color:#a31515\">&quot;[&quot;</span> &#43; cover_list &#43; <span style=\"color:#a31515\">&quot;]&quot;</span> &#43; <span style=\"color:#a31515\">&quot;DO&quot;</span> &#43;\r\n                                statement &#43;\r\n                             ToTerm(<span style=\"color:#a31515\">&quot;ENDFOR&quot;</span>);\r\n\r\nfor_each_driver.Rule = ToTerm(<span style=\"color:#a31515\">&quot;FOR EACH DRIVER DO&quot;</span>) &#43;\r\n                                        statement &#43;\r\n                                    ToTerm(<span style=\"color:#a31515\">&quot;ENDFOR&quot;</span>);\r\n\r\n<span style=\"color:green\">//&lt;cover-type&gt; ::= COMP|TPFT|TPO</span>\r\ncover_type.Rule = ToTerm(<span style=\"color:#a31515\">&quot;COMP&quot;</span>) | <span style=\"color:#a31515\">&quot;TPFT&quot;</span> | <span style=\"color:#a31515\">&quot;TPO&quot;</span>;\r\n\r\n<span style=\"color:green\">//&lt;cover-list&gt; ::= {&lt;cover-type&gt;}{;&lt;cover-type&gt;}</span>\r\ncover_list.Rule = MakePlusRule(cover_list, ToTerm(<span style=\"color:#a31515\">&quot;;&quot;</span>), cover_type) | Empty;\r\n\r\n<span style=\"color:green\">// &lt;IF-DO-statement&gt; ::= IF\t&lt;condition&gt;\tDO &lt;action&gt; ENDIF</span>\r\n            if_do_endif.Rule = <span style=\"color:#a31515\">&quot;IF&quot;</span> &#43; condition &#43; <span style=\"color:#a31515\">&quot;DO&quot;</span> &#43; action &#43; <span style=\"color:#a31515\">&quot;ENDIF&quot;</span>;\r\n\r\n<span style=\"color:green\">//&lt;IF-ELSE-statement&gt;\t::= IF &lt;condition&gt; THEN &lt;action&gt; ELSE &lt;action&gt; ENDIF</span>\r\n\r\nif_else_endif.Rule = <span style=\"color:#a31515\">&quot;IF&quot;</span> &#43; condition &#43; <span style=\"color:#a31515\">&quot;THEN&quot;</span> &#43; action &#43; <span style=\"color:#a31515\">&quot;ELSE&quot;</span> &#43; action &#43; <span style=\"color:#a31515\">&quot;ENDIF&quot;</span>;\r\n\r\n<span style=\"color:green\">// &lt;condition&gt; ::= &lt;cause&gt;|( NOT &lt;condition&gt; )|( &lt;condition&gt;&lt;logic-operator&gt; &lt;condition&gt;} )|()</span>\r\nlogical_condition.Rule = <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; condition &#43; logic_operator &#43; condition &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\r\nnot_condition.Rule = <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; ToTerm(<span style=\"color:#a31515\">&quot;NOT&quot;</span>) &#43; condition &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\r\ncause_condition.Rule = cause;\r\ncondition.Rule = cause_condition | not_condition | logical_condition | Empty;\r\n\r\n<span style=\"color:green\">//&lt;logic-operator&gt; ::= AND|OR</span>\r\nlogic_operator.Rule = ToTerm(<span style=\"color:#a31515\">&quot;AND&quot;</span>) | ToTerm(<span style=\"color:#a31515\">&quot;OR&quot;</span>);\r\n\r\n<span style=\"color:green\">//&lt;cause&gt; ::= &quot;{&quot;&lt;text&gt;|[&lt;parameter&gt;]&quot;}&quot;</span>\r\ncause.Rule = (text | parameter);\r\neffect.Rule = (text | parameter);\r\n\r\naction.Rule = MakePlusRule(action, statement);\r\n\r\n<span style=\"color:blue\">this</span>.Root = action;\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"width:1px; height:1px; overflow:hidden; top:0px; left:-10000px\">\r\n&#65279;</div>\r\n<p>Thanks,</p>\r\n<p>Muffadal J.</p>\r\n",
    "PostedDate": "2012-05-15T05:22:15.873-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "837756",
    "ThreadId": "355832",
    "Html": "<p>hi</p>\r\n<p>Parameter is probably defined wrong:</p>\r\n<pre>parameter.Rule = ToTerm(<span>\"[\"</span>) + other_parameter | table_parameter + ToTerm(<span>\"]\"</span>);</pre>\r\n<p>what you meant is probably</p>\r\n<pre>parameter.Rule = ToTerm(<span>\"[\"</span>) + (other_parameter | table_parameter) + ToTerm(<span>\"]\"</span>);</pre>\r\n<pre><br /></pre>\r\n<p>many other things do not seem right. Keep in mind, the source BNF you show specifies lexical rules (how tokens are composed) together with syntax rules - that's the usual case for BNF to mix them together. For ex: &lt;char&gt;, &lt;numeric&gt; are lex definitions.</p>\r\n<p>But in Irony (as in any other parser) these are completely different things. Lexical rules are expressed thru selection of proper Terminals, with appropriate settings. So please read some introductory stuff about lexical analysis and syntax (even Wikipedia will be enough), then try to express the grammar in Irony (its intent, meaning, not symbol-by-symbol blind translation).</p>\r\n<p>Roman</p>",
    "PostedDate": "2012-05-17T09:36:09.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]