[
  {
    "Id": "217083",
    "ThreadId": "63839",
    "Html": "<p>Hello,</p>\r\n<p>I have an old project with a simple basic language.<br>I tried to port the parser under Irony for develop some new feature.<br>My grammar has some ambiguity and I would like to know<br>how can I solve this with Irony.</p>\r\n<p>To demonstrate my problem I cut down my grammar to the minimum.<br>When I parse the basic code snippet below I got SubProgramCall<br>instead of ArrayAssignment. What should I do to got the expected node?<br>We have a lot of old basic sources, so modify the grammar<br>(and modify the sources) is not an option.</p>\r\n<p>The subroutines is predefined. So the parser may know if<br>the given identifier in an expression is subroutine or not.<br>But how can I give this information to the parser?</p>\r\n<p>Thanks,<br>Zoltan</p>\r\n<p>Code snippet:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">for</span> i=1 <span style=\"color:Blue\">to</span> 10\r\n  a(i) = 1\r\n<span style=\"color:Blue\">next</span>\r\n</pre>\r\n</div>\r\n<p>The tree result:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ParseTree</span><span style=\"color:Blue\">&gt;</span>\r\n  <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">BasicFile</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">SequentialStatement</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">ForStatement</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">for</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">SymbolTerminal</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">for</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">identifier</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">IdentifierTerminal</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">i</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">SymbolTerminal</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">number</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">NumberLiteral</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">1</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">to</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">SymbolTerminal</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">number</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">NumberLiteral</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">10</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">SequentialStatementList</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">SequentialStatement</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">SubprogramCallWithParameters</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n              <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">identifier</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">IdentifierTerminal</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">a</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n              <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">ExpressionList</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">BinExpr</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                  <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">ParExpr</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">identifier</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">IdentifierTerminal</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">i</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                  <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Node</span><span style=\"color:Blue\">&gt;</span>\r\n                  <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">SymbolTerminal</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                  <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">number</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">NumberLiteral</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">1</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Node</span><span style=\"color:Blue\">&gt;</span>\r\n              <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Node</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Node</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Node</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Node</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Node</span> <span style=\"color:Red\">Term</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">next</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Terminal</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">SymbolTerminal</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">next</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n      <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Node</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Node</span><span style=\"color:Blue\">&gt;</span>\r\n  <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Node</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">ParseTree</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>The Grammar:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> BasicGrammar : Grammar\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> BasicGrammar()\r\n            : <span style=\"color:Blue\">base</span>(<span style=\"color:Blue\">false</span>)\r\n        {\r\n            <span style=\"color:Green\">// 1. Terminals</span>\r\n            <span style=\"color:Blue\">var</span> number = <span style=\"color:Blue\">new</span> NumberLiteral(<span style=\"color:#A31515\">&quot;number&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> Identifier = <span style=\"color:Blue\">new</span> IdentifierTerminal(<span style=\"color:#A31515\">&quot;identifier&quot;</span>);\r\n            <span style=\"color:Green\">// 2. Keywords</span>\r\n            SymbolTerminal _for_ = Symbol(<span style=\"color:#A31515\">&quot;for&quot;</span>);\r\n            SymbolTerminal _to_ = Symbol(<span style=\"color:#A31515\">&quot;to&quot;</span>);\r\n            SymbolTerminal _step_ = Symbol(<span style=\"color:#A31515\">&quot;step&quot;</span>);\r\n            SymbolTerminal _next_ = Symbol(<span style=\"color:#A31515\">&quot;next&quot;</span>);\r\n            SymbolTerminal _equal_ = Symbol(<span style=\"color:#A31515\">&quot;=&quot;</span>);\r\n            SymbolTerminal _left_ = Symbol(<span style=\"color:#A31515\">&quot;(&quot;</span>);\r\n            SymbolTerminal _right_ = Symbol(<span style=\"color:#A31515\">&quot;)&quot;</span>);\r\n            SymbolTerminal _comma_ = Symbol(<span style=\"color:#A31515\">&quot;,&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> BasicFile = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;BasicFile&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> AssignmentOrCall = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;AssignmentOrCall&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> ArrayAssignment = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ArrayAssignment&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> Array = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ArrayVariable&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> BinExpr = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;BinExpr&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> ForStatement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ForStatement&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> ParExpr = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ParExpr&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> Expression = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Expression&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> BasicLine = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;BasicLine&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> BasicItem = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;BasicItem&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> SequentialItem = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;SequentialItem&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> SequentialStatementList = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;SequentialStatementList&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> SequentialStatement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;SequentialStatement&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> SimpleStatement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;SimpleStatement&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> Assignment = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Assignment&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> SubprogramCallWithParameters = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;SubprogramCallWithParameters&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> ExpressionList = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ExpressionList&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> Term = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Term&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> BinOp = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;BinOp&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> ExpressionOpt = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;ExpressionOpt&quot;</span>);\r\n            <span style=\"color:Green\">// 4. The Grammar</span>\r\n            BasicFile.Rule = MakeStarRule(BasicFile, SequentialStatement);\r\n            <span style=\"color:Blue\">this</span>.Root = BasicFile;       <span style=\"color:Green\">// Set grammar root</span>\r\n            <span style=\"color:Green\">// 5. Rules</span>\r\n            SequentialStatement.Rule =\r\n                SimpleStatement + NewLine\r\n                | ForStatement\r\n                ;\r\n            SimpleStatement.Rule =\r\n                Identifier  <span style=\"color:Green\">// subprogram call without parameters</span>\r\n                | ArrayAssignment\r\n                | SubprogramCallWithParameters\r\n                ;\r\n            ForStatement.Rule =\r\n                _for_ + Identifier + _equal_ + Expression + _to_ + Expression\r\n                + NewLine\r\n                + SequentialStatementList\r\n                + _next_\r\n                + NewLine\r\n                ;\r\n            SequentialStatementList.Rule = MakeStarRule(SequentialStatementList, SequentialStatement);\r\n            SubprogramCallWithParameters.Rule =\r\n                Identifier + ExpressionList\r\n                ;\r\n            ArrayAssignment.Rule = Identifier + _left_ + Expression + _right_ + _equal_ + Expression;\r\n            ExpressionList.Rule = MakePlusRule(ExpressionList, _comma_, Expression);\r\n            Expression.Rule = Term | BinExpr;\r\n            ParExpr.Rule = _left_ + Expression + _right_;\r\n            BinExpr.Rule = Expression + BinOp + Expression;\r\n            Term.Rule = number| ParExpr | Identifier | Array;\r\n            BinOp.Rule = Symbol(<span style=\"color:#A31515\">&quot;+&quot;</span>) | <span style=\"color:#A31515\">&quot;-&quot;</span> | <span style=\"color:#A31515\">&quot;*&quot;</span> | <span style=\"color:#A31515\">&quot;/&quot;</span> | <span style=\"color:#A31515\">&quot;=&quot;</span>;\r\n            Array.Rule = Identifier + _left_ + Expression + _right_;\r\n            ExpressionOpt.Rule = Empty | _comma_ + Expression;\r\n            Delimiters = <span style=\"color:#A31515\">&quot;#(),:+-*/%&amp;|^!~&lt;&gt;=&quot;</span>;\r\n            RegisterOperators(70, <span style=\"color:#A31515\">&quot;*&quot;</span>, <span style=\"color:#A31515\">&quot;/&quot;</span>);\r\n            RegisterOperators(60, <span style=\"color:#A31515\">&quot;+&quot;</span>, <span style=\"color:#A31515\">&quot;-&quot;</span>);\r\n            RegisterOperators(40, <span style=\"color:#A31515\">&quot;=&quot;</span>);\r\n            RegisterPunctuation(<span style=\"color:#A31515\">&quot;,&quot;</span>, <span style=\"color:#A31515\">&quot;(&quot;</span>, <span style=\"color:#A31515\">&quot;)&quot;</span>, <span style=\"color:#A31515\">&quot;:&quot;</span>, <span style=\"color:#A31515\">&quot;#&quot;</span>);\r\n            LineTerminators = <span style=\"color:#A31515\">&quot;\\r\\n&quot;</span>;\r\n            WhitespaceChars = <span style=\"color:#A31515\">&quot; \\t\\r\\n\\v&quot;</span>;\r\n            MarkTransient(Term, Expression);\r\n            <span style=\"color:Blue\">this</span>.SetLanguageFlags(LanguageFlags.NewLineBeforeEOF | LanguageFlags.AutoDetectTransient | LanguageFlags.CreateAst | LanguageFlags.AutoDetectKeywords);\r\n        }\r\n    }\r\n</pre>\r\n</div>",
    "PostedDate": "2009-07-29T00:51:20.937-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "217254",
    "ThreadId": "63839",
    "Html": "<p>Obviously, you cannot do it - I mean, resolve ambiguity at parsing stage. Because array element access and function call look identical in Basic, it is clearly a SEMANTIC difference, not syntactic. Therefore, parser cannot do this.</p>\r\n<p>In your code snippet, you have array element on the left side of the assignment, so theoretically very advanced parser could detect that this is array, not function call.</p>\r\n<p>But for code like</p>\r\n<p>x = a(b,c)</p>\r\n<p>you cannot decide what it is until you know all surrounding semantic context. The disambiguation can be done only at code analysis phase, after parsing, or even directly at runtime by the interpreter.</p>\r\n<p>The solution is to merge array and function call into one non-terminal, and leave it to later stage to make a decision</p>\r\n<p>Roman</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-29T09:55:29.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]