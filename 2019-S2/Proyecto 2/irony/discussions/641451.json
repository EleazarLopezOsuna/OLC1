[
  {
    "Id": "1434615",
    "ThreadId": "641451",
    "Html": "Hi,\r<br />\n<br />\nI have a simple grammar that works as a parse tree but when I try to build it as an AST tree I get the error:\r<br />\n<br />\nSystem.NullReferenceException: Object reference not set to an instance of the object\r<br />\n<br />\nI have followed the advice to derive from AstNode for all non-terminals.\r<br />\n<br />\nBelow is the source code:<br />\n<pre><code>[Language(&quot;Calc&quot;, &quot;1.0&quot;, &quot;Calc 1.0 grammar&quot;)]\n    public class CalcExpr : Grammar\n    {\n        public CalcExpr() : base(false)\n        {\n            LanguageFlags = LanguageFlags.CreateAst;\n            \n            //Terminals\n            var number = new NumberLiteral(&quot;Number&quot;);\n            //number.AstConfig.NodeType = typeof(Number);\n\n            //Non-terminals\n            var exprline = new NonTerminal(&quot;Statement&quot;, typeof(Exprline));\n            var expr = new NonTerminal(&quot;Expression&quot;, typeof(Expr));\n            var binexpr = new NonTerminal(&quot;BinaryExpression&quot;, typeof(BinExpr));\n            var oper = new NonTerminal(&quot;Operator&quot;, typeof(Oper));\n            var plus = new NonTerminal(&quot;Operator +&quot;, typeof(Plus));\n            var minus = new NonTerminal(&quot;Operator -&quot;, typeof(Minus));\n\n            //BNF Rules\n            this.Root = exprline;\n            exprline.Rule = MakePlusRule(exprline, expr);\n            expr.Rule = number | binexpr;\n            binexpr.Rule = expr + oper + expr;\n            oper.Rule = plus | minus;\n            plus.Rule = ToTerm(&quot;+&quot;);\n            minus.Rule = ToTerm(&quot;-&quot;);\n\n            //Operators\n            RegisterOperators(1, &quot;+&quot;, &quot;-&quot;);\n\n            //Punctuations\n            MarkPunctuation(&quot;+&quot;, &quot;-&quot;);\n            base.MarkTransient(expr, oper);\n\n        }//Constructor\n    }//Class</code></pre>\n\n<pre><code>class Exprline : AstNode\n    {\n        public AstNode ChildNode;\n\n        public override void Init(AstContext context, ParseTreeNode treeNode)\n        {\n            base.Init(context, treeNode);\n\n            var token = treeNode.Token;\n            var term = treeNode.Term;\n            var nodes = treeNode.GetMappedChildNodes();\n\n            foreach (var node in nodes)\n            {\n                AddChild(string.Empty, node);\n            }\n        }\n    }\n\n    class Expr : AstNode\n    {\n        public AstNode ChildNode;\n\n        public override void Init(AstContext context, ParseTreeNode treeNode)\n        {\n            base.Init(context, treeNode);\n\n            var token = treeNode.Token;\n            var term = treeNode.Term;\n            var nodes = treeNode.GetMappedChildNodes();\n\n            foreach (var node in nodes)\n            {\n                AddChild(string.Empty, node);\n            }\n        }\n    }\n\n    class BinExpr : AstNode\n    {\n        public AstNode ChildNode;\n\n        public override void Init(AstContext context, ParseTreeNode treeNode)\n        {\n            base.Init(context, treeNode);\n\n            var token = treeNode.Token;\n            var term = treeNode.Term;\n            var nodes = treeNode.GetMappedChildNodes();\n\n            foreach (var node in nodes)\n            {\n                AddChild(string.Empty, node);\n            }\n        }\n    }\n\n    class Oper : AstNode\n    {\n        public AstNode ChildNode;\n\n        public override void Init(AstContext context, ParseTreeNode treeNode)\n        {\n            base.Init(context, treeNode);\n\n            var token = treeNode.Token;\n            var term = treeNode.Term;\n            var nodes = treeNode.GetMappedChildNodes();\n\n            foreach (var node in nodes)\n            {\n                AddChild(string.Empty, node);\n            }\n        }\n    }\n\n    class Plus : AstNode\n    {\n        public AstNode ChildNode;\n\n        public override void Init(AstContext context, ParseTreeNode treeNode)\n        {\n            base.Init(context, treeNode);\n\n            var token = treeNode.Token;\n            var term = treeNode.Term;\n            var nodes = treeNode.GetMappedChildNodes();\n\n            AsString = &quot;Operator: &quot; + token.Text;\n            foreach (var node in nodes)\n            {\n                AddChild(string.Empty, node);\n            }\n        }\n    }\n\n    class Minus : AstNode\n    {\n        public AstNode ChildNode;\n\n        public override void Init(AstContext context, ParseTreeNode treeNode)\n        {\n            base.Init(context, treeNode);\n\n            var token = treeNode.Token;\n            var term = treeNode.Term;\n            var nodes = treeNode.GetMappedChildNodes();\n\n            AsString = &quot;Operator: &quot; + token.Text;\n            foreach (var node in nodes)\n            {\n                AddChild(string.Empty, node);\n            }\n        }\n    }</code></pre>\n\nWhat am I doing wrong?\r<br />\n<br />\nThank you.<br />\n",
    "PostedDate": "2015-07-16T06:51:16.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1436799",
    "ThreadId": "641451",
    "Html": "I think your definition of 'plus' and 'minus' is quite wrong. You declare non-terminal with a Rule = ToTerm(&quot;+&quot;) - this does not make sense. Look at sample expression evaluator grammar as a guidance<br />\n",
    "PostedDate": "2015-07-31T14:39:23.007-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]