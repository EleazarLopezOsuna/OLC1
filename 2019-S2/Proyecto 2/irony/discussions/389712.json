[
  {
    "Id": "893602",
    "ThreadId": "389712",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I'm trying to create a grammar for Dynamics NAV C/AL. I'm almost done, but with only one problem left: The CASE OF part.</p>\r\n<p>A switch/case in C/AL looks like this:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">CASE</span> ABO_Reference.Type OF\r\n  <span style=\"color:green\">'I','U':</span>\r\n      SetField(ABO_Reference);\r\n  <span style=\"color:green\">'D': </span>\r\n      SetBoo(<span style=\"color:green\">'Argh');</span>\r\n<span style=\"color:blue\">ELSE</span>\r\n  <span style=\"color:blue\">ERROR</span>(<span style=\"color:green\">'Gnarrr);</span>\r\n<span style=\"color:blue\">END</span>;\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>I've created a simple expression to fetch it:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>case_stmt.Rule = case_expr &#43; expression &#43; of_expr &#43; case_list &#43; else_clause_opt_stmt &#43; end;\r\n\r\ncase_list.Rule = MakeListRule(case_list, <span style=\"color:blue\">null</span>, case_list_stmt, TermListOptions.StarList &amp; TermListOptions.AllowTrailingDelimiter);\r\n\r\ncase_list_stmt.Rule = case_identifier_list &#43; colon &#43; procedure_code_stmt;\r\n\r\ncase_identifier_list.Rule = MakeListRule(case_identifier_list,comma,literal,TermListOptions.StarList &amp; TermListOptions.AllowTrailingDelimiter);\r\n             \r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Everything works almost fine, as long as I'm having only one &quot;procedure_code_stmt&quot;.</p>\r\n<p>When I put the list in it &quot;procedure_code_stmt_list&quot;, irony tries to convert the 'D' identifier into a part of the procedure_code_stmt_list. As I'm allowing string_literals in the procedure_code_stmt_list Irony is fetching the 'D' as one string and then\r\n wondering what the colon has to do there.</p>\r\n<p>I thought irony would see that the colon is wrong on that place inside of the procedure_code_stmt_list and then go back trying to use the case_list_stmt (which allows the colon).</p>\r\n<p>In code:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">CASE</span> ABO_Reference.Type OF\r\n  <span style=\"color:green\">'I','U':</span>\r\n      SetField(ABO_Reference);\r\n  <span style=\"color:green\">'D': // &lt;&lt;&lt;&lt;&lt; error here, because the 'D' is a string_literal </span>\r\n       // &lt;&lt;&lt;&lt;&lt; <span style=\"color:blue\">is</span> being allowed <span style=\"color:blue\">in</span> the procedure_code_stmt_list\r\n      SetBoo(<span style=\"color:green\">'Argh');</span>\r\n<span style=\"color:blue\">ELSE</span>\r\n  <span style=\"color:blue\">ERROR</span>(<span style=\"color:green\">'Gnarrr);</span>\r\n<span style=\"color:blue\">END</span>;\r\n\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Parser Trace</p>\r\n<p></p>\r\n<pre>S53    procedure_code_stmt&#43;    D (Text)     Popped state from stack, pushing literal\r\nS74    D (Text)         Reduce on 'code_expression_stmt -&gt; literal '\r\nS53    procedure_code_stmt&#43;    D (Text)    Popped state from stack, pushing code_expression_stmt\r\nS61    D (Text)    : \r\n (objectname)    Syntax error, expected: ;, &lt;, &gt;, &lt;=, &gt;=, &#43;, &#43;=, -=, *=, /=, -, *, /, MOD, =, &lt;&gt;, AND, OR\r\nS61    D (Text)    :\r\n (objectname)    RECOVERING: popping stack, looking for state with error shift    \r\nS0    (S0)     FAILED TO RECOVER</pre>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>Any idea how to make Irony do what I want?</p>\r\n",
    "PostedDate": "2012-07-31T05:43:05.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "893811",
    "ThreadId": "389712",
    "Html": "<p>first thing I see - you use TermListOptions wrong way; it is a flag set, so combination of flags should be using \"|\", not &amp;</p>\r\n<p>secondly, and the main question - when you load the grammar, are there any errors/conflicts listed on Grammar Errors page in grammar explorer? I bet there are some, from your explanations.&nbsp;</p>\r\n<p>Finally, you seem to assume that Irony has GLR parser (with backtracking and retrying alternatives) - this is not the case. It is a classic LALR parser, so you MUST fix all conflicts before you start parsing.&nbsp;</p>\r\n<p>Roman</p>",
    "PostedDate": "2012-07-31T10:33:52.27-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "894041",
    "ThreadId": "389712",
    "Html": "<p>Hello Roman,</p>\r\n<p>wow thank you for your quick reply. I didn't expect such a fast and good support from the creator of the project :)</p>\r\n<p>I assume you can see, that my knowledge around creating a compiler/parser by myself is limited. I'm trying to use your project just for something relatively simple, therefore I started to create the grammar without reading through many books about that topic. That leads to the problem, that I don't even know what these conflicts mean. I tried to figure it out, but I didn't find a good explanation anywhere. Do you have maybe somehwere a source for some explaination what these conflicts are?</p>\r\n<p>Ironically Irony does already everything I want - it parses almost all files correctly, but the \"case of\"'s :\\</p>\r\n<p>So, to answer your question: I have a lot of conflicts (24 of them) and I'd like to solve them now. I'd appreciate if you (or someone else) had some good sources with information about what I'm really doing right now :D</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-08-01T01:24:53.817-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "894106",
    "ThreadId": "389712",
    "Html": "\r\n<p>Trying to learn the way how Irony works I stole the code for the Pascal implementation in Irony (found in this forum here):</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">#region</span> Useful Links\n<span style=\"color:green\">/* **********************************************************************************\n * \n * http://standardpascal.org/iso7185rules.html  (Summary)\n * http://www.pascal-central.com/docs/iso7185.pdf  (Full Doc)\n * \n * http://www.moorecad.com/standardpascal/pascal.y  (YACC)\n * http://www.moorecad.com/standardpascal/pascal.l  (LEXER)\n * \n * **********************************************************************************/</span>\n<span style=\"color:blue\">#endregion</span>\n\n<span style=\"color:blue\">using</span> System;\n<span style=\"color:blue\">using</span> System.Collections.Generic;\n<span style=\"color:blue\">using</span> System.Text;\n<span style=\"color:blue\">using</span> Irony.Parsing;\n<span style=\"color:blue\">using</span> Irony.Ast;\n\n<span style=\"color:blue\">namespace</span> Irony.Samples\n{\n\n    [Language(<span style=\"color:#a31515\">&quot;Standard Pascal&quot;</span>, <span style=\"color:#a31515\">&quot;1990&quot;</span>, <span style=\"color:#a31515\">&quot;ISO-7185:1990 Standard Pascal&quot;</span>)]\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> CALPascalGrammar : Grammar\n    {\n\n        <span style=\"color:blue\">public</span> CALPascalGrammar()\n            : <span style=\"color:blue\">base</span>(<span style=\"color:blue\">false</span>)\n        {\n            <span style=\"color:blue\">this</span>.GrammarComments = <span style=\"color:#a31515\">@&quot;Sample implementation of ISO-7185 Standard Pascal&quot;</span>;\n\n            <span style=\"color:blue\">this</span>.MarkReservedWords(<span style=\"color:#a31515\">&quot;and&quot;</span>, <span style=\"color:#a31515\">&quot;array&quot;</span>, <span style=\"color:#a31515\">&quot;begin&quot;</span>, <span style=\"color:#a31515\">&quot;case&quot;</span>, <span style=\"color:#a31515\">&quot;const&quot;</span>, <span style=\"color:#a31515\">&quot;div&quot;</span>, <span style=\"color:#a31515\">&quot;do&quot;</span>);\n            <span style=\"color:blue\">this</span>.MarkReservedWords(<span style=\"color:#a31515\">&quot;downto&quot;</span>, <span style=\"color:#a31515\">&quot;else&quot;</span>, <span style=\"color:#a31515\">&quot;end&quot;</span>, <span style=\"color:#a31515\">&quot;file&quot;</span>, <span style=\"color:#a31515\">&quot;for&quot;</span>, <span style=\"color:#a31515\">&quot;function&quot;</span>);\n            <span style=\"color:blue\">this</span>.MarkReservedWords(<span style=\"color:#a31515\">&quot;goto&quot;</span>, <span style=\"color:#a31515\">&quot;if&quot;</span>, <span style=\"color:#a31515\">&quot;in&quot;</span>, <span style=\"color:#a31515\">&quot;label&quot;</span>, <span style=\"color:#a31515\">&quot;mod&quot;</span>, <span style=\"color:#a31515\">&quot;nil&quot;</span>, <span style=\"color:#a31515\">&quot;not&quot;</span>, <span style=\"color:#a31515\">&quot;of&quot;</span>);\n            <span style=\"color:blue\">this</span>.MarkReservedWords(<span style=\"color:#a31515\">&quot;or&quot;</span>, <span style=\"color:#a31515\">&quot;packed&quot;</span>, <span style=\"color:#a31515\">&quot;procedure&quot;</span>, <span style=\"color:#a31515\">&quot;program&quot;</span>, <span style=\"color:#a31515\">&quot;record&quot;</span>);\n            <span style=\"color:blue\">this</span>.MarkReservedWords(<span style=\"color:#a31515\">&quot;repeat&quot;</span>, <span style=\"color:#a31515\">&quot;set&quot;</span>, <span style=\"color:#a31515\">&quot;then&quot;</span>, <span style=\"color:#a31515\">&quot;to&quot;</span>, <span style=\"color:#a31515\">&quot;type&quot;</span>, <span style=\"color:#a31515\">&quot;until&quot;</span>, <span style=\"color:#a31515\">&quot;var&quot;</span>);\n            <span style=\"color:blue\">this</span>.MarkReservedWords(<span style=\"color:#a31515\">&quot;while&quot;</span>, <span style=\"color:#a31515\">&quot;with&quot;</span>);\n\n            <span style=\"color:blue\">#region</span> 1. Terminals\n\n            <span style=\"color:blue\">var</span> identifier = <span style=\"color:blue\">new</span> IdentifierTerminal(<span style=\"color:#a31515\">&quot;Identifier&quot;</span>, IdOptions.NameIncludesPrefix);\n            identifier.AddPrefix(Strings.AllLatinLetters, IdOptions.None);   <span style=\"color:green\">//[a-zA-Z]([a-zA-Z0-9])</span>\n            <span style=\"color:blue\">var</span> identifier_with = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;Identifier_With&quot;</span>, <span style=\"color:#a31515\">&quot;\\&quot;&quot;</span>, StringOptions.AllowsLineBreak);\n            \n            <span style=\"color:blue\">var</span> charcode = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;CharacterCode&quot;</span>, NumberOptions.IntOnly);\n            charcode.AddPrefix(<span style=\"color:#a31515\">&quot;#&quot;</span>, NumberOptions.None); <span style=\"color:green\">// \\#[0-9]&#43;</span>\n\n            <span style=\"color:blue\">var</span> character_string = <span style=\"color:blue\">new</span> StringLiteral(<span style=\"color:#a31515\">&quot;CharacterString&quot;</span>, <span style=\"color:#a31515\">@&quot;'&quot;</span>, StringOptions.AllowsLineBreak &amp; StringOptions.NoEscapes); <span style=\"color:green\">//'({NQUOTE}|'')&#43;'</span>\n            \n\n            <span style=\"color:blue\">var</span> digit_sequence = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;DigitSequence&quot;</span>, NumberOptions.IntOnly); <span style=\"color:green\">// [0-9]&#43;</span>\n\n            <span style=\"color:blue\">var</span> real_number = <span style=\"color:blue\">new</span> NumberLiteral(<span style=\"color:#a31515\">&quot;RealNumber&quot;</span><span style=\"color:green\">/*, NumberOptions.HasDot*/</span>); <span style=\"color:green\">//[0-9]&#43;&quot;.&quot;[0-9]&#43;</span>\n                        \n            <span style=\"color:blue\">var</span> line_comment = <span style=\"color:blue\">new</span> CommentTerminal(<span style=\"color:#a31515\">&quot;Comment&quot;</span>, <span style=\"color:#a31515\">&quot;//&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>, <span style=\"color:#a31515\">&quot;\\r\\n&quot;</span>);\n            NonGrammarTerminals.Add(line_comment);\n            \n            <span style=\"color:blue\">var</span> object_name = <span style=\"color:blue\">new</span> FreeTextLiteral(<span style=\"color:#a31515\">&quot;ObjectName&quot;</span>, <span style=\"color:#a31515\">&quot;\\n&quot;</span>);\n\n            <span style=\"color:green\">/*var comment2 = new CommentTerminal(&quot;Comment&quot;, &quot;{&quot;, &quot;}&quot;);\n            NonGrammarTerminals.Add(comment2);*/</span>\n\n            <span style=\"color:blue\">#endregion</span>\n\n            <span style=\"color:blue\">#region</span> 2. Non-terminal\n\n            <span style=\"color:blue\">var</span> file = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FILE&quot;</span>);\n            <span style=\"color:blue\">var</span> comment = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;COMMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> program = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROGRAM&quot;</span>);\n            <span style=\"color:blue\">var</span> program_heading = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROGRAM_HEADING&quot;</span>);\n            <span style=\"color:blue\">var</span> identifier_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;IDENTIFIER_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> block = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;BLOCK&quot;</span>);\n            <span style=\"color:blue\">var</span> module = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;MODULE&quot;</span>);\n            <span style=\"color:blue\">var</span> label_declaration_part = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;LABEL_DECLARATION_PART&quot;</span>);\n            <span style=\"color:blue\">var</span> label_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;LABEL_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> label = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;LABEL&quot;</span>);\n            <span style=\"color:blue\">var</span> constant_definition_part = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CONSTANT_DEFINITION_PART&quot;</span>);\n            <span style=\"color:blue\">var</span> constant_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CONSTANT_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> constant_definition = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CONSTANT_DEFINITION&quot;</span>);\n            <span style=\"color:blue\">var</span> cexpression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;C_EXPRESSION&quot;</span>);\n            <span style=\"color:blue\">var</span> csimple_expression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;C_SIMPLE_EXPRESSION&quot;</span>);\n            <span style=\"color:blue\">var</span> cterm = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;C_TERM&quot;</span>);\n            <span style=\"color:blue\">var</span> cfactor = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;C_FACTOR&quot;</span>);\n            <span style=\"color:blue\">var</span> cexponentiation = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;C_EXPONENTIATION&quot;</span>);\n            <span style=\"color:blue\">var</span> cprimary = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;C_PRIMARY&quot;</span>);\n            <span style=\"color:blue\">var</span> constant = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CONSTANT&quot;</span>);\n            <span style=\"color:blue\">var</span> non_string = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;NON_STRING&quot;</span>);\n            <span style=\"color:blue\">var</span> type_definition_part = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;TYPE_DEFINITION_PART&quot;</span>);\n            <span style=\"color:blue\">var</span> type_definition_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;TYPE_DEFINITION_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> type_definition = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;TYPE_DEFINITION&quot;</span>);\n            <span style=\"color:blue\">var</span> type_denoter = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;TYPE_DENOTER&quot;</span>);\n            <span style=\"color:blue\">var</span> new_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;NEW_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> new_ordinal_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;NEW_ORDINAL_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> enumerated_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ENUMERATED_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> subrange_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;SUBRANGE_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> new_structured_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;NEW_STRUCTURED_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> structured_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;STRUCTURED_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> array_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ARRAY_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> index_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;INDEX_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> index_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;INDEX_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> ordinal_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ORDINAL_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> component_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;COMPONENT_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> record_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;RECORD_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> record_section_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;RECORD_SELECTION_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> record_section = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;RECORD_SELECTION&quot;</span>);\n            <span style=\"color:blue\">var</span> variant_part = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;VARIANT_PART&quot;</span>);\n            <span style=\"color:blue\">var</span> variant_selector = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;VARIANT_SELECTOR&quot;</span>);\n            <span style=\"color:blue\">var</span> variant_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;VARIANT_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> variant = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;VARIANT&quot;</span>);\n            <span style=\"color:blue\">var</span> case_constant_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CASE_CONSTANT_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> case_constant = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CASE_CONSTANT&quot;</span>);\n            <span style=\"color:blue\">var</span> tag_field = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;TAG_FIELD&quot;</span>);\n            <span style=\"color:blue\">var</span> tag_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;TAG_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> set_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;SET_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> base_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;BASE_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> file_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FILE_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> new_pointer_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;NEW_POINTER_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> domain_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;DOMAIN_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> variable_declaration_part = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;VARIABLE_DECLARATION_PART&quot;</span>);\n            <span style=\"color:blue\">var</span> variable_declaration_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;VARIABLE_DECLARATION_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> variable_declaration = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;VARIABLE_DECLARATION&quot;</span>);\n            <span style=\"color:blue\">var</span> procedure_and_function_declaration_part = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROCEDURE_AND_FUNCTION_DECLARATION_PART&quot;</span>);\n            <span style=\"color:blue\">var</span> proc_or_func_declaration_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROC_OR_FUNC_DECLARATION_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> proc_or_func_declaration = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROC_OR_FUNC_DECLARATION&quot;</span>);\n            <span style=\"color:blue\">var</span> procedure_declaration = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROCEDURE_DECLARATION&quot;</span>);\n            <span style=\"color:blue\">var</span> procedure_heading = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROCEDURE_HEADING&quot;</span>);\n            <span style=\"color:blue\">var</span> directive = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;DIRECTIVE&quot;</span>);\n            <span style=\"color:blue\">var</span> formal_parameter_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FORMAL_PARAMETER_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> formal_parameter_section_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FORMAL_PARAMETER_SECTION_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> formal_parameter_section = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FORMAL_PARAMETER_SECTION&quot;</span>);\n            <span style=\"color:blue\">var</span> value_parameter_specification = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;VALUE_PARAMETER_SPECIFICATION&quot;</span>);\n            <span style=\"color:blue\">var</span> variable_parameter_specification = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;VARIABLE_PARAMETER_SPECIFICATION&quot;</span>);\n            <span style=\"color:blue\">var</span> procedural_parameter_specification = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROCEDURAL_PARAMETER_SPECIFICATION&quot;</span>);\n            <span style=\"color:blue\">var</span> functional_parameter_specification = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FUNCTIONAL_PARAMETER_SPECIFICATION&quot;</span>);\n            <span style=\"color:blue\">var</span> procedure_identification = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROCEDURE_IDENTIFICATION&quot;</span>);\n            <span style=\"color:blue\">var</span> procedure_block = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROCEDURE_BLOCK&quot;</span>);\n            <span style=\"color:blue\">var</span> function_declaration = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FUNCTION_DECLARATION&quot;</span>);\n            <span style=\"color:blue\">var</span> function_heading = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FUNCTION_HEADING&quot;</span>);\n            <span style=\"color:blue\">var</span> result_type = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;RESULT_TYPE&quot;</span>);\n            <span style=\"color:blue\">var</span> function_identification = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FUNCTION_IDENTIFICATION&quot;</span>);\n            <span style=\"color:blue\">var</span> function_block = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FUNCTION_BLOCK&quot;</span>);\n            <span style=\"color:blue\">var</span> statement_part = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;STATEMENT_PART&quot;</span>);\n            <span style=\"color:blue\">var</span> compound_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;COMPOUND_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> statement_sequence = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;STATEMENT_SEQUENCE&quot;</span>);\n            <span style=\"color:blue\">var</span> statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> open_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;OPEN_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> closed_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CLOSED_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> non_labeled_closed_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;NON_LABELED_CLOSED_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> non_labeled_open_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;NON_LABELED_OPEN_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> repeat_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;REPEAT_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> open_while_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;OPEN_WHILE_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> closed_while_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CLOSED_WHILE_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> open_for_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;OPEN_FOR_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> closed_for_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CLOSED_FOR_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> open_with_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;OPEN_WITH_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> closed_with_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CLOSED_WITH_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> open_if_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;OPEN_IF_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> closed_if_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CLOSED_IF_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> assignment_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ASSIGNMENT_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> variable_access = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;VARIABLE_ACCESS&quot;</span>);\n            <span style=\"color:blue\">var</span> indexed_variable = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;INDEXED_VARIABLE&quot;</span>);\n            <span style=\"color:blue\">var</span> index_expression_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;INDEX_EXPRESSION_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> index_expression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;INDEX_EXPRESSION&quot;</span>);\n            <span style=\"color:blue\">var</span> field_designator = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FIELD_DESIGNATOR&quot;</span>);\n            <span style=\"color:blue\">var</span> procedure_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROCEDURE_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> parms = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PARAMETERS&quot;</span>);\n            <span style=\"color:blue\">var</span> actual_parameter_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ACTUAL_PARAMETER_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> actual_parameter = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ACTUAL_PARAMETER&quot;</span>);\n            <span style=\"color:blue\">var</span> goto_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;GOTO_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> case_statement = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CASE_STATEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> case_index = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CASE_INDEX&quot;</span>);\n            <span style=\"color:blue\">var</span> case_list_element_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CASE_LIST_ELEMENT_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> case_list_element = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CASE_LIST_ELEMENT&quot;</span>);\n            <span style=\"color:blue\">var</span> otherwise_part = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;OTHERWISE_PART&quot;</span>);\n            <span style=\"color:blue\">var</span> control_variable = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CONTROL_VARIABLE&quot;</span>);\n            <span style=\"color:blue\">var</span> initial_value = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;INITIAL_VALUE&quot;</span>);\n            <span style=\"color:blue\">var</span> direction = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;DIRECTION&quot;</span>);\n            <span style=\"color:blue\">var</span> final_value = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FINAL_VALUE&quot;</span>);\n            <span style=\"color:blue\">var</span> record_variable_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;RECORD_VARIABLE_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> boolean_expression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;BOOLEAN_EXPRESSION&quot;</span>);\n            <span style=\"color:blue\">var</span> expression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;EXPRESSION&quot;</span>);\n            <span style=\"color:blue\">var</span> simple_expression = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;SIMPLE_EXPRESSION&quot;</span>);\n            <span style=\"color:blue\">var</span> term = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;TERM&quot;</span>);\n            <span style=\"color:blue\">var</span> factor = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FACTOR&quot;</span>);\n            <span style=\"color:blue\">var</span> exponentiation = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;EXPONENTIATION&quot;</span>);\n            <span style=\"color:blue\">var</span> primary = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PRIMARY&quot;</span>);\n            <span style=\"color:blue\">var</span> unsigned_constant = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;UNSIGNED_CONSTANT&quot;</span>);\n            <span style=\"color:blue\">var</span> unsigned_number = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;UNSIGNED_NUMBER&quot;</span>);\n            <span style=\"color:blue\">var</span> unsigned_integer = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;UNSIGNED_INTEGER&quot;</span>);\n            <span style=\"color:blue\">var</span> unsigned_real = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;UNSIGNED_REAL&quot;</span>);\n            <span style=\"color:blue\">var</span> function_designator = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;FUNCTION_DESIGNATOR&quot;</span>);\n            <span style=\"color:blue\">var</span> set_constructor = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;SET_CONSTRUCTOR&quot;</span>);\n            <span style=\"color:blue\">var</span> member_designator_list = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;MEMBER_DESIGNATOR_LIST&quot;</span>);\n            <span style=\"color:blue\">var</span> member_designator = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;MEMBER_DESIGNATOR&quot;</span>);\n            <span style=\"color:blue\">var</span> adding_operator = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;ADD_OP&quot;</span>);\n            <span style=\"color:blue\">var</span> multiplying_operator = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;MUL_OP&quot;</span>);\n            <span style=\"color:blue\">var</span> relational_operator = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;REL_OP&quot;</span>);\n            <span style=\"color:blue\">var</span> sign = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;SIGN&quot;</span>);\n            <span style=\"color:blue\">var</span> object_declaration = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;OBJECT_DECLARATION&quot;</span>);\n            <span style=\"color:blue\">var</span> code = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;CODE&quot;</span>);\n            <span style=\"color:blue\">var</span> procedure = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;PROCEDURE&quot;</span>);\n\n\n            <span style=\"color:blue\">#endregion</span>\n\n            <span style=\"color:blue\">#region</span> 3. BNF Rules\n\n            sign.Rule = ToTerm(<span style=\"color:#a31515\">&quot;&#43;&quot;</span>) | <span style=\"color:#a31515\">&quot;-&quot;</span>;\n\n            relational_operator.Rule = ToTerm(<span style=\"color:#a31515\">&quot;=&quot;</span>) | <span style=\"color:#a31515\">&quot;&lt;&gt;&quot;</span> | <span style=\"color:#a31515\">&quot;&lt;&quot;</span> | <span style=\"color:#a31515\">&quot;&gt;&quot;</span> | <span style=\"color:#a31515\">&quot;&lt;=&quot;</span> | <span style=\"color:#a31515\">&quot;&gt;=&quot;</span> | <span style=\"color:#a31515\">&quot;in&quot;</span>;\n\n            multiplying_operator.Rule = ToTerm(<span style=\"color:#a31515\">&quot;*&quot;</span>) | <span style=\"color:#a31515\">&quot;/&quot;</span> | <span style=\"color:#a31515\">&quot;div&quot;</span> | <span style=\"color:#a31515\">&quot;mod&quot;</span> | <span style=\"color:#a31515\">&quot;and&quot;</span>;\n\n            adding_operator.Rule = ToTerm(<span style=\"color:#a31515\">&quot;&#43;&quot;</span>) | <span style=\"color:#a31515\">&quot;-&quot;</span> | <span style=\"color:#a31515\">&quot;or&quot;</span>;\n\n            member_designator.Rule =\n              member_designator &#43; <span style=\"color:#a31515\">&quot;..&quot;</span> &#43; expression | expression;\n\n            member_designator_list.Rule =\n              MakePlusRule(member_designator_list, ToTerm(<span style=\"color:#a31515\">&quot;,&quot;</span>), member_designator);\n\n            set_constructor.Rule =\n                <span style=\"color:#a31515\">&quot;[&quot;</span> &#43; member_designator_list &#43; <span style=\"color:#a31515\">&quot;]&quot;</span> | <span style=\"color:#a31515\">&quot;[&quot;</span> &#43; <span style=\"color:#a31515\">&quot;]&quot;</span> |\n                <span style=\"color:#a31515\">&quot;(.&quot;</span> &#43; member_designator_list &#43; <span style=\"color:#a31515\">&quot;.)&quot;</span> | <span style=\"color:#a31515\">&quot;(.&quot;</span> &#43; <span style=\"color:#a31515\">&quot;.)&quot;</span>;\n\n            <span style=\"color:green\">/* functions with no params will be handled by plain identifier */</span>\n            function_designator.Rule = identifier &#43; parms;\n\n            unsigned_real.Rule = real_number;\n\n            unsigned_integer.Rule = digit_sequence;\n\n            unsigned_number.Rule = unsigned_integer | unsigned_real;\n\n            unsigned_constant.Rule =\n              unsigned_number | character_string | charcode | <span style=\"color:#a31515\">&quot;nil&quot;</span>;\n\n            primary.Rule =\n              variable_access |\n              unsigned_constant |\n              function_designator |\n              set_constructor |\n              <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; expression &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> |\n              <span style=\"color:#a31515\">&quot;not&quot;</span> &#43; primary;\n\n            exponentiation.Rule = primary | primary &#43; <span style=\"color:#a31515\">&quot;**&quot;</span> &#43; exponentiation;\n\n            factor.Rule = sign &#43; factor | exponentiation;\n\n            term.Rule = factor | term &#43; multiplying_operator &#43; factor;\n\n            simple_expression.Rule = term | simple_expression &#43; adding_operator &#43; term;\n\n            expression.Rule =\n              simple_expression | simple_expression &#43; relational_operator &#43; simple_expression;\n\n            boolean_expression.Rule = expression;\n\n            record_variable_list.Rule =\n              MakePlusRule(record_variable_list, ToTerm(<span style=\"color:#a31515\">&quot;,&quot;</span>), variable_access);\n\n            final_value.Rule = expression;\n\n            direction.Rule = ToTerm(<span style=\"color:#a31515\">&quot;to&quot;</span>) | <span style=\"color:#a31515\">&quot;downto&quot;</span>;\n\n            initial_value.Rule = expression;\n\n            control_variable.Rule = identifier;\n\n            otherwise_part.Rule = ToTerm(<span style=\"color:#a31515\">&quot;otherwise&quot;</span>) | <span style=\"color:#a31515\">&quot;otherwise&quot;</span> &#43; <span style=\"color:#a31515\">&quot;:&quot;</span>;\n\n            case_list_element.Rule = case_constant_list &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; statement;\n\n            case_list_element_list.Rule =\n              MakePlusRule(case_list_element_list, ToTerm(<span style=\"color:#a31515\">&quot;;&quot;</span>), case_list_element);\n\n            case_index.Rule = expression;\n\n            case_statement.Rule =\n                <span style=\"color:#a31515\">&quot;case&quot;</span> &#43; case_index &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; case_list_element_list &#43; <span style=\"color:#a31515\">&quot;end&quot;</span> |\n                <span style=\"color:#a31515\">&quot;case&quot;</span> &#43; case_index &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; case_list_element_list &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; <span style=\"color:#a31515\">&quot;end&quot;</span> |\n                <span style=\"color:#a31515\">&quot;case&quot;</span> &#43; case_index &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; case_list_element_list &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; otherwise_part &#43; statement &#43; <span style=\"color:#a31515\">&quot;end&quot;</span> |\n                <span style=\"color:#a31515\">&quot;case&quot;</span> &#43; case_index &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; case_list_element_list &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; otherwise_part &#43; statement &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; <span style=\"color:#a31515\">&quot;end&quot;</span>;\n\n            goto_statement.Rule = <span style=\"color:#a31515\">&quot;goto&quot;</span> &#43; label;\n\n            <span style=\"color:green\">/*\n             * this forces you to check all this to be sure that only write and\n             * writeln use the 2nd and 3rd forms, you really can't do it easily in\n             * the grammar, especially since write and writeln aren't reserved\n             */</span>\n            actual_parameter.Rule =\n                expression |\n                expression &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; expression |\n                expression &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; expression &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; expression;\n\n            actual_parameter_list.Rule =\n              MakePlusRule(actual_parameter_list, ToTerm(<span style=\"color:#a31515\">&quot;,&quot;</span>), actual_parameter);\n\n            parms.Rule = <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; actual_parameter_list &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n\n            procedure_statement.Rule = identifier &#43; parms | identifier;\n\n            field_designator.Rule = variable_access &#43; <span style=\"color:#a31515\">&quot;.&quot;</span> &#43; identifier | variable_access &#43; <span style=\"color:#a31515\">&quot;.&quot;</span> &#43; identifier_with;\n\n            index_expression.Rule = expression;\n\n            index_expression_list.Rule =\n              MakePlusRule(index_expression_list, ToTerm(<span style=\"color:#a31515\">&quot;,&quot;</span>), index_expression);\n\n            indexed_variable.Rule =\n                variable_access &#43; <span style=\"color:#a31515\">&quot;[&quot;</span> &#43; index_expression_list &#43; <span style=\"color:#a31515\">&quot;]&quot;</span> |\n                variable_access &#43; <span style=\"color:#a31515\">&quot;(.&quot;</span> &#43; index_expression_list &#43; <span style=\"color:#a31515\">&quot;.)&quot;</span>;\n\n            variable_access.Rule =\n                identifier |\n                identifier_with |\n                indexed_variable |\n                field_designator |\n                variable_access &#43; (ToTerm(<span style=\"color:#a31515\">&quot;^&quot;</span>) | <span style=\"color:#a31515\">&quot;-&gt;&quot;</span> | <span style=\"color:#a31515\">&quot;@&quot;</span>);\n\n            assignment_statement.Rule =\n              variable_access &#43; <span style=\"color:#a31515\">&quot;:=&quot;</span> &#43; expression;\n\n            closed_if_statement.Rule =\n              <span style=\"color:#a31515\">&quot;if&quot;</span> &#43; boolean_expression &#43; <span style=\"color:#a31515\">&quot;then&quot;</span> &#43; closed_statement &#43; PreferShiftHere() &#43; <span style=\"color:#a31515\">&quot;else&quot;</span> &#43; closed_statement;\n\n            open_if_statement.Rule =\n              <span style=\"color:#a31515\">&quot;if&quot;</span> &#43; boolean_expression &#43; <span style=\"color:#a31515\">&quot;then&quot;</span> &#43; statement |\n              <span style=\"color:#a31515\">&quot;if&quot;</span> &#43; boolean_expression &#43; <span style=\"color:#a31515\">&quot;then&quot;</span> &#43; closed_statement &#43; PreferShiftHere() &#43; <span style=\"color:#a31515\">&quot;else&quot;</span> &#43; open_statement;\n\n            closed_with_statement.Rule =\n              <span style=\"color:#a31515\">&quot;with&quot;</span> &#43; record_variable_list &#43; <span style=\"color:#a31515\">&quot;do&quot;</span> &#43; closed_statement;\n\n            open_with_statement.Rule =\n              <span style=\"color:#a31515\">&quot;with&quot;</span> &#43; record_variable_list &#43; <span style=\"color:#a31515\">&quot;do&quot;</span> &#43; open_statement;\n\n            closed_for_statement.Rule =\n              <span style=\"color:#a31515\">&quot;for&quot;</span> &#43; control_variable &#43; <span style=\"color:#a31515\">&quot;:=&quot;</span> &#43; initial_value &#43; direction &#43; final_value &#43; <span style=\"color:#a31515\">&quot;do&quot;</span> &#43; closed_statement;\n\n            open_for_statement.Rule =\n              <span style=\"color:#a31515\">&quot;for&quot;</span> &#43; control_variable &#43; <span style=\"color:#a31515\">&quot;:=&quot;</span> &#43; initial_value &#43; direction &#43; final_value &#43; <span style=\"color:#a31515\">&quot;do&quot;</span> &#43; open_statement;\n\n            closed_while_statement.Rule =\n              <span style=\"color:#a31515\">&quot;while&quot;</span> &#43; boolean_expression &#43; <span style=\"color:#a31515\">&quot;do&quot;</span> &#43; closed_statement;\n\n            open_while_statement.Rule =\n              <span style=\"color:#a31515\">&quot;while&quot;</span> &#43; boolean_expression &#43; <span style=\"color:#a31515\">&quot;do&quot;</span> &#43; open_statement;\n\n            repeat_statement.Rule =\n              <span style=\"color:#a31515\">&quot;repeat&quot;</span> &#43; statement_sequence &#43; <span style=\"color:#a31515\">&quot;until&quot;</span> &#43; boolean_expression;\n\n            non_labeled_open_statement.Rule =\n                open_with_statement |\n                open_if_statement |\n                open_while_statement |\n                open_for_statement;\n\n            non_labeled_closed_statement.Rule =\n                assignment_statement |\n                procedure_statement |\n                goto_statement |\n                compound_statement |\n                case_statement |\n                repeat_statement |\n                closed_with_statement |\n                closed_if_statement |\n                closed_while_statement |\n                closed_for_statement |\n                Empty;\n\n            closed_statement.Rule =\n              label &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; non_labeled_closed_statement |\n              non_labeled_closed_statement;\n\n            open_statement.Rule =\n              label &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; non_labeled_open_statement |\n              non_labeled_open_statement;\n\n            statement.Rule = open_statement | closed_statement;\n\n            statement_sequence.Rule =\n              statement_sequence &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; statement | statement;\n\n            compound_statement.Rule = <span style=\"color:#a31515\">&quot;begin&quot;</span> &#43; statement_sequence &#43; <span style=\"color:#a31515\">&quot;end&quot;</span>;\n\n            statement_part.Rule = compound_statement;\n\n            function_block.Rule = block;\n\n            function_identification.Rule = <span style=\"color:#a31515\">&quot;function&quot;</span> &#43; identifier;\n\n            result_type.Rule = identifier;\n\n            function_heading.Rule =\n                <span style=\"color:#a31515\">&quot;function&quot;</span> &#43; identifier &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; result_type |\n                <span style=\"color:#a31515\">&quot;function&quot;</span> &#43; identifier &#43; formal_parameter_list &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; result_type;\n\n            function_declaration.Rule =\n                function_heading &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; directive |\n                function_identification &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; function_block |\n                function_heading &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; function_block;\n\n            procedure_block.Rule = block;\n\n            procedure_identification.Rule = <span style=\"color:#a31515\">&quot;procedure&quot;</span> &#43; identifier;\n\n            functional_parameter_specification.Rule = function_heading;\n\n            procedural_parameter_specification.Rule = procedure_heading;\n\n            variable_parameter_specification.Rule =\n              <span style=\"color:#a31515\">&quot;var&quot;</span> &#43; identifier_list &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; identifier;\n\n            value_parameter_specification.Rule =\n              identifier_list &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; identifier;\n\n            formal_parameter_section.Rule =\n                  value_parameter_specification |\n                  variable_parameter_specification |\n                  procedural_parameter_specification |\n                  functional_parameter_specification;\n\n            formal_parameter_section_list.Rule =\n              MakePlusRule(formal_parameter_section_list, ToTerm(<span style=\"color:#a31515\">&quot;;&quot;</span>), formal_parameter_section);\n\n            formal_parameter_list.Rule =\n              <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; formal_parameter_section_list &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n\n            directive.Rule = ToTerm(<span style=\"color:#a31515\">&quot;forward&quot;</span>) | <span style=\"color:#a31515\">&quot;extern&quot;</span> | <span style=\"color:#a31515\">&quot;external&quot;</span>;\n\n            procedure_heading.Rule =\n              procedure_identification |\n              procedure_identification &#43; formal_parameter_list;\n\n            procedure_declaration.Rule =\n              procedure_heading &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; directive |\n              procedure_heading &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; procedure_block;\n\n            proc_or_func_declaration.Rule =\n              procedure_declaration | function_declaration;\n\n            proc_or_func_declaration_list.Rule =\n              MakePlusRule(proc_or_func_declaration_list, ToTerm(<span style=\"color:#a31515\">&quot;;&quot;</span>), proc_or_func_declaration);\n\n            procedure_and_function_declaration_part.Rule =\n              proc_or_func_declaration_list &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> | Empty;\n\n            variable_declaration.Rule =\n              identifier_list &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; type_denoter;\n\n            variable_declaration_list.Rule =\n              MakePlusRule(variable_declaration_list, ToTerm(<span style=\"color:#a31515\">&quot;;&quot;</span>), variable_declaration);\n\n            variable_declaration_part.Rule =\n              <span style=\"color:#a31515\">&quot;var&quot;</span> &#43; variable_declaration_list &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> | Empty;\n\n            domain_type.Rule = identifier;\n\n            new_pointer_type.Rule = (ToTerm(<span style=\"color:#a31515\">&quot;^&quot;</span>) | <span style=\"color:#a31515\">&quot;-&gt;&quot;</span> | <span style=\"color:#a31515\">&quot;@&quot;</span>) &#43; domain_type;\n\n            file_type.Rule = <span style=\"color:#a31515\">&quot;file&quot;</span> &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; component_type;\n\n            base_type.Rule = ordinal_type;\n\n            set_type.Rule = <span style=\"color:#a31515\">&quot;set&quot;</span> &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; base_type;\n\n            tag_type.Rule = identifier;\n\n            tag_field.Rule = identifier;\n\n            case_constant.Rule =\n              constant | constant &#43; <span style=\"color:#a31515\">&quot;..&quot;</span> &#43; constant;\n\n            case_constant_list.Rule =\n              MakePlusRule(case_constant_list, ToTerm(<span style=\"color:#a31515\">&quot;,&quot;</span>), case_constant);\n\n            variant.Rule =\n              case_constant_list &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; record_section_list &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> |\n              case_constant_list &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; record_section_list &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; variant_part &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> |\n              case_constant_list &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; variant_part &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n\n            variant_list.Rule =\n              MakePlusRule(variant_list, ToTerm(<span style=\"color:#a31515\">&quot;;&quot;</span>), variant);\n\n            variant_selector.Rule =\n              tag_field &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; tag_type | tag_type;\n\n            variant_part.Rule =\n              <span style=\"color:#a31515\">&quot;case&quot;</span> &#43; variant_selector &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; variant_list &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> |\n              <span style=\"color:#a31515\">&quot;case&quot;</span> &#43; variant_selector &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; variant_list |\n              Empty;\n\n            record_section.Rule =\n              identifier_list &#43; <span style=\"color:#a31515\">&quot;:&quot;</span> &#43; type_denoter;\n\n            record_section_list.Rule =\n              MakePlusRule(record_section_list, ToTerm(<span style=\"color:#a31515\">&quot;;&quot;</span>), record_section);\n\n            record_type.Rule =\n              <span style=\"color:#a31515\">&quot;record&quot;</span> &#43; record_section_list &#43; <span style=\"color:#a31515\">&quot;end&quot;</span> |\n              <span style=\"color:#a31515\">&quot;record&quot;</span> &#43; record_section_list &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; variant_part &#43; <span style=\"color:#a31515\">&quot;end&quot;</span> |\n              <span style=\"color:#a31515\">&quot;record&quot;</span> &#43; variant_part &#43; <span style=\"color:#a31515\">&quot;end&quot;</span>;\n\n            component_type.Rule = type_denoter;\n\n            ordinal_type.Rule = new_ordinal_type | identifier;\n\n            index_type.Rule = ordinal_type;\n\n            index_list.Rule =\n              MakePlusRule(index_list, ToTerm(<span style=\"color:#a31515\">&quot;;&quot;</span>), index_type);\n\n            array_type.Rule =\n              <span style=\"color:#a31515\">&quot;array&quot;</span> &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; index_list &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> &#43; <span style=\"color:#a31515\">&quot;of&quot;</span> &#43; component_type;\n\n            structured_type.Rule =\n              array_type |\n              record_type |\n              set_type |\n              file_type;\n\n            new_structured_type.Rule =\n              structured_type | <span style=\"color:#a31515\">&quot;packed&quot;</span> &#43; structured_type;\n\n            subrange_type.Rule = constant &#43; <span style=\"color:#a31515\">&quot;..&quot;</span> &#43; constant;\n\n            enumerated_type.Rule = <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; identifier_list &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n\n            new_ordinal_type.Rule =\n              enumerated_type |\n              subrange_type;\n\n            new_type.Rule =\n              new_ordinal_type |\n              new_structured_type |\n              new_pointer_type;\n\n            type_denoter.Rule = identifier | new_type;\n\n            type_definition.Rule = identifier &#43; <span style=\"color:#a31515\">&quot;=&quot;</span> &#43; type_denoter &#43; <span style=\"color:#a31515\">&quot;;&quot;</span>;\n\n            type_definition_list.Rule =\n              MakePlusRule(type_definition_list, type_definition);\n\n            type_definition_part.Rule =\n              <span style=\"color:#a31515\">&quot;type&quot;</span> &#43; type_definition_list | Empty;\n\n            non_string.Rule =\n              digit_sequence |\n              identifier |\n              real_number;\n\n            constant.Rule =\n              non_string |\n              sign &#43; non_string |\n              character_string;\n\n            cprimary.Rule =\n              identifier |\n              <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; cexpression &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> |\n              unsigned_constant |\n              <span style=\"color:#a31515\">&quot;not&quot;</span> &#43; cprimary;\n\n            cexponentiation.Rule =\n              cprimary | cprimary &#43; <span style=\"color:#a31515\">&quot;**&quot;</span> &#43; cexponentiation;\n\n            cfactor.Rule =\n              sign &#43; cfactor | cexponentiation;\n\n            cterm.Rule =\n              cfactor | cterm &#43; multiplying_operator &#43; cfactor;\n\n            csimple_expression.Rule =\n              cterm | csimple_expression &#43; adding_operator &#43; cterm;\n\n            cexpression.Rule =\n              csimple_expression |\n              csimple_expression &#43; relational_operator &#43; csimple_expression;\n\n            constant_definition.Rule =\n              identifier &#43; <span style=\"color:#a31515\">&quot;=&quot;</span> &#43; cexpression &#43; <span style=\"color:#a31515\">&quot;;&quot;</span>;\n\n            constant_list.Rule =\n              MakePlusRule(constant_list, constant_definition);\n\n            constant_definition_part.Rule =\n              <span style=\"color:#a31515\">&quot;const&quot;</span> &#43; constant_list | Empty;\n\n            label.Rule = digit_sequence;\n\n            label_list.Rule =\n              MakePlusRule(label_list, ToTerm(<span style=\"color:#a31515\">&quot;,&quot;</span>), label);\n\n            label_declaration_part.Rule =\n              <span style=\"color:#a31515\">&quot;label&quot;</span> &#43; label_list &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> | Empty;\n\n            module.Rule =\n              constant_definition_part &#43;\n              type_definition_part &#43;\n              variable_declaration_part &#43;\n              procedure_and_function_declaration_part;\n\n            block.Rule =\n              label_declaration_part &#43;\n              constant_definition_part &#43;\n              type_definition_part &#43;\n              variable_declaration_part &#43;\n              procedure_and_function_declaration_part &#43;\n              statement_part;\n\n            identifier_list.Rule =\n              MakePlusRule(identifier_list, ToTerm(<span style=\"color:#a31515\">&quot;,&quot;</span>), identifier);\n\n            program_heading.Rule =\n              <span style=\"color:#a31515\">&quot;program&quot;</span> &#43; identifier |\n              <span style=\"color:#a31515\">&quot;program&quot;</span> &#43; identifier &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; identifier_list &#43; <span style=\"color:#a31515\">&quot;)&quot;</span>;\n\n            program.Rule = program_heading &#43; <span style=\"color:#a31515\">&quot;;&quot;</span> &#43; block &#43; <span style=\"color:#a31515\">&quot;.&quot;</span>;\n\n            file.Rule = program | module;\n\n\n            object_declaration.Rule = ToTerm(<span style=\"color:#a31515\">&quot;OBJECT&quot;</span>) &#43; identifier &#43;\n                   unsigned_integer &#43; object_name &#43; \n            <span style=\"color:#a31515\">&quot;{&quot;</span> &#43; \n                   <span style=\"color:green\">/*object_properties_stmt &#43;\n                   properties_stmt &#43;\n                   fields_stmt &#43;\n                   keys_stmt &#43;*/</span>\n                   code &#43;\n            <span style=\"color:#a31515\">&quot;}&quot;</span>;\n\n\n            code.Rule = ToTerm(<span style=\"color:#a31515\">&quot;CODE&quot;</span>) &#43; <span style=\"color:#a31515\">&quot;{&quot;</span> &#43; ToTerm(<span style=\"color:#a31515\">&quot;VAR&quot;</span>) &#43; <span style=\"color:green\">/*variable_list_stmt &#43; */</span> procedure &#43; <span style=\"color:#a31515\">&quot;}&quot;</span>;\n            procedure.Rule = ToTerm(<span style=\"color:#a31515\">&quot;PROCEDURE&quot;</span>) &#43; <span style=\"color:green\">/*object_with_id_stmt &#43; parameters_stmt &#43; */</span>ToTerm(<span style=\"color:#a31515\">&quot;;&quot;</span>) &#43; ToTerm(<span style=\"color:#a31515\">&quot;VAR&quot;</span>) <span style=\"color:green\">/*&#43; variable_list_stmt*/</span> &#43; block;\n            \n\n            <span style=\"color:blue\">#endregion</span>\n\n            <span style=\"color:blue\">#region</span> 4. Set starting symbol\n\n            <span style=\"color:blue\">this</span>.Root = object_declaration;\n\n            <span style=\"color:blue\">#endregion</span>\n\n            <span style=\"color:blue\">#region</span> 5. Operators precedence\n\n            <span style=\"color:blue\">this</span>.RegisterOperators(1, <span style=\"color:#a31515\">&quot;&#43;&quot;</span>, <span style=\"color:#a31515\">&quot;-&quot;</span>, <span style=\"color:#a31515\">&quot;or&quot;</span>);\n            <span style=\"color:blue\">this</span>.RegisterOperators(2, <span style=\"color:#a31515\">&quot;*&quot;</span>, <span style=\"color:#a31515\">&quot;/&quot;</span>, <span style=\"color:#a31515\">&quot;div&quot;</span>, <span style=\"color:#a31515\">&quot;mod&quot;</span>, <span style=\"color:#a31515\">&quot;and&quot;</span>);\n            <span style=\"color:blue\">this</span>.RegisterOperators(3, Associativity.Right, <span style=\"color:#a31515\">&quot;**&quot;</span>);\n            <span style=\"color:blue\">this</span>.RegisterOperators(4, <span style=\"color:#a31515\">&quot;=&quot;</span>, <span style=\"color:#a31515\">&quot;&lt;&gt;&quot;</span>, <span style=\"color:#a31515\">&quot;&gt;&quot;</span>, <span style=\"color:#a31515\">&quot;&lt;&quot;</span>, <span style=\"color:#a31515\">&quot;&gt;=&quot;</span>, <span style=\"color:#a31515\">&quot;&lt;=&quot;</span>, <span style=\"color:#a31515\">&quot;in&quot;</span>);\n\n            <span style=\"color:blue\">#endregion</span>\n\n            <span style=\"color:blue\">#region</span> 6. Punctuation symbols\n\n            <span style=\"color:blue\">this</span>.MarkPunctuation(<span style=\"color:#a31515\">&quot;;&quot;</span>, <span style=\"color:#a31515\">&quot;,&quot;</span>, <span style=\"color:#a31515\">&quot;.&quot;</span>, <span style=\"color:#a31515\">&quot;..&quot;</span>, <span style=\"color:#a31515\">&quot;(&quot;</span>, <span style=\"color:#a31515\">&quot;)&quot;</span>, <span style=\"color:#a31515\">&quot;{&quot;</span>, <span style=\"color:#a31515\">&quot;}&quot;</span>, <span style=\"color:#a31515\">&quot;[&quot;</span>, <span style=\"color:#a31515\">&quot;]&quot;</span>, <span style=\"color:#a31515\">&quot;:&quot;</span>);\n\n            <span style=\"color:blue\">this</span>.RegisterBracePair(<span style=\"color:#a31515\">&quot;[&quot;</span>, <span style=\"color:#a31515\">&quot;]&quot;</span>);\n            <span style=\"color:blue\">this</span>.RegisterBracePair(<span style=\"color:#a31515\">&quot;{&quot;</span>, <span style=\"color:#a31515\">&quot;}&quot;</span>);\n\n            <span style=\"color:blue\">#endregion</span>\n        }\n    }\n}\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p><span lang=\"EN-US\" style=\"font-size:10pt; color:black\">&nbsp;</span></p>\r\n<p>This code works wonderful with normal Pascal Code (C/AL is based on Pascal). That code has zero Conflicts, therefore I hope it's a good start. Now I tried to just add one feature to that code:</p>\r\n<p>This grammar does allow a function being called in one line: &ldquo;MYFUNC(&lsquo;test&rsquo;,0);&rdquo;. And this code allows to access fields of a object, separated with a dot. &ldquo;myobject.myfield&rdquo;. What I wanted to add: &ldquo;myobject.myfunc(&lsquo;test&rsquo;,0)&rdquo;.</p>\r\n<p>I went through this code and found this line: &ldquo;<span lang=\"EN-US\" style=\"font-size:9.5pt\">function_designator.Rule = identifier &#43; parms;&rdquo;</span></p>\r\n<p>I thought &ldquo;ok, let&rsquo;s just add the dot in this&rdquo;: &ldquo;<span lang=\"EN-US\" style=\"font-size:9.5pt\">function_designator.Rule = identifier &#43; parms | identifier &#43;\r\n<span style=\"color:#a31515\">&quot;.&quot;</span> &#43; identifier &#43; parms;&ldquo;</span></p>\r\n<p>Adding this line leads to a conflict: &ldquo;<span lang=\"EN-US\" style=\"font-size:12pt\">Shift-reduce conflict. State S247, lookaheads [.]. Selected shift as preferred action.&rdquo;</span></p>\r\n<p>As I&rsquo;m trying to learn, could you maybe tell me with this example what it means, and how to avoid it? I don&rsquo;t really understand how to avoid it :\\</p>\r\n<p>&nbsp;</p>\r\n<p>It's funny, this code with the conflict works - kind of:</p>\r\n<p></p>\r\n<pre>eimer := ABO_Config.Company('eimer');\nflugzeug := ABO_Config.TableName;</pre>\r\n<p></p>\r\n<p><span lang=\"EN-US\" style=\"color:#5e5e5e\">&nbsp;</span></p>\r\n<p>The first line works, but the second line now tells me, that it wants a &quot;(&quot;.</p>\r\n<p>Now, taking a look at the Rule where the function_designator is implemented:</p>\r\n<p><span lang=\"EN-US\" style=\"color:#5e5e5e\"></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>primary.Rule =\n             variable_access |\n             unsigned_constant |\n              function_designator |\n             set_constructor |\n             <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; expression &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> |\n             <span style=\"color:#a31515\">&quot;not&quot;</span> &#43; primary;\n</pre>\r\n</div>\r\n<br>\r\n</span>\r\n<p></p>\r\n<p>The rule first checks if it&rsquo;s a &ldquo;variable_access&rdquo; &ndash; checking that Rule leads to this:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>variable_access.Rule =\n               identifier |\n               identifier_with |\n               indexed_variable |\n               field_designator |\n               variable_access &#43; (ToTerm(<span style=\"color:#a31515\">&quot;^&quot;</span>) | <span style=\"color:#a31515\">&quot;-&gt;&quot;</span> | <span style=\"color:#a31515\">&quot;@&quot;</span>);\n</pre>\r\n</div>\r\n<p></p>\r\n<p>And that variable_access Rule is checking for field_designator:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    field_designator.Rule = variable_access &#43; <span style=\"color:#a31515\">&quot;.&quot;</span> &#43; identifier | variable_access &#43; <span style=\"color:#a31515\">&quot;.&quot;</span> &#43; identifier_with;\n</pre>\r\n</div>\r\n&nbsp;\r\n<p>As far as I&rsquo;ve learned Irony works from left to right, so I thought it would first check (in the primary rule) for the variable access, there for field_designator and then see &ldquo;oh the second line is in fact a field_designator&rdquo;. Why does\r\n it instead want a function_designator? It has something to do with that conflict, but I don&rsquo;t understand the concept completely&hellip;</p>\r\n",
    "PostedDate": "2012-08-01T04:50:23.963-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "894271",
    "ThreadId": "389712",
    "Html": "<p>Read some introductory stuff about LALR parsing. For explanation of a conflict - read here:</p>\r\n<p><a href=\"http://en.wikipedia.org/wiki/LR_parser#Conflicts_in_the_constructed_tables\">http://en.wikipedia.org/wiki/LR_parser#Conflicts_in_the_constructed_tables</a></p>\r\n<p>If you double-click on conflict error row in the grid in Grammar explorer, it will bring you to the conflict state. Look at the state, and try to understand what's going on. You should see why Irony is complaining. The way to fix conflicts is most often to rearrange the grammar rules slightly (most often - get rid of some extra non-terminals, especially optional/nullable non-terminals)</p>",
    "PostedDate": "2012-08-01T11:14:58.297-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]