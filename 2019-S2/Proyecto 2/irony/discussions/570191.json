[
  {
    "Id": "1314755",
    "ThreadId": "570191",
    "Html": "I'm trying to make a grammar but I keep getting shift-reduce conflicts and I'm struggling to interpret the output to work out why.  I've looked at samples provided with Irony and other examples online and I'm still stuck.  Some valid examples of the strings that I'm trying to parse are:<br />\n<ul>\n<li>A</li>\n<li>A_B</li>\n<li>A_B_C_D_E</li>\n<li>A(true)_B</li>\n<li>A_B(1)_C</li>\n<li>A_B(C=1)_D</li>\n<li>\nA(B=1&amp;C=2)_D<br />\n</li>\n</ul>\nMy grammar is currently defined as:<br />\n<pre><code>             // Terminals\n            var integer = new NumberLiteral(&quot;integer&quot;, NumberOptions.IntOnly);\n            var constant = new ConstantTerminal(&quot;constant&quot;, typeof(bool));\n            constant.Add(&quot;true&quot;, true);\n            constant.Add(&quot;false&quot;, false);\n            var identifier = new IdentifierTerminal(&quot;identifier&quot;);\n\n            // Non-Terminals\n            var documentParameter = new NonTerminal(&quot;documentParameter&quot;);\n            var root = new NonTerminal(&quot;root&quot;);\n            var intermediate = new NonTerminal(&quot;intermediate&quot;);\n            var terminator = new NonTerminal(&quot;terminator&quot;);\n            var intermediateList = new NonTerminal(&quot;intermediateList&quot;);\n            var rootRestriction = new NonTerminal(&quot;rootRestriction&quot;);\n            var intermediateRestriction = new NonTerminal(&quot;intermediateRestriction&quot;);\n            var expression = new NonTerminal(&quot;expression&quot;);\n            var expressionList = new NonTerminal(&quot;expressionList&quot;);\n            var relationalOperator = new NonTerminal(&quot;relationalOperator&quot;);\n            var logicalOperator = new NonTerminal(&quot;logicalOperator&quot;);\n\n            // Keywords\n            KeyTerm underscore = ToTerm(&quot;_&quot;, &quot;underscore&quot;);\n\n            // Rules\n            relationalOperator.Rule = &quot;=&quot;;\n            logicalOperator.Rule = &quot;&amp;&quot;;\n            expression.Rule = identifier + relationalOperator + integer;\n            expressionList.Rule = MakePlusRule(expressionList, logicalOperator, expression);\n\n            rootRestriction.Rule = &quot;(&quot; + (integer | expressionList | constant) + &quot;)&quot;;\n            intermediateRestriction.Rule = &quot;(&quot; + (integer | expressionList) + &quot;)&quot;;\n\n            root.Rule = identifier + rootRestriction.Q() + underscore;\n            intermediate.Rule = identifier + intermediateRestriction.Q() + underscore;\n            intermediateList.Rule = MakeStarRule(intermediateList, intermediate);\n            terminator.Rule = identifier;\n\n            documentParameter.Rule = (root + intermediateList).Q() + terminator;\n\n            RegisterOperators(80, relationalOperator);\n            RegisterOperators(70, logicalOperator);\n            MarkPunctuation(&quot;_&quot;, &quot;(&quot;, &quot;)&quot;);\n            Root = documentParameter;</code></pre>\n\nThis produces 3 shift-reduce conflicts.  If I try to parse the simplest example &quot;A&quot; then I get an error saying it expects &quot;(&quot; or &quot;_&quot; but shouldn't the (root + intermediateList).Q() mean they're optional?  Any help on what I'm misunderstanding and where I'm going wrong would be much appreciated. <br />\n",
    "PostedDate": "2014-10-19T07:45:44.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1314763",
    "ThreadId": "570191",
    "Html": "After playing a bit more I've realised that IdentifierTerminal allows underscores (which I should have known immediately) by default and I can remove them.  Still getting some shift-reduce conflicts but I'm making progress now at least.<br />\n",
    "PostedDate": "2014-10-19T08:34:47.407-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]