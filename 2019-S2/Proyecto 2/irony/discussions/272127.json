[
  {
    "Id": "669968",
    "ThreadId": "272127",
    "Html": "\r\n<p>Hi!</p>\r\n<p>I'm having a problem with a ambiguous grammar but I think that it can be solved with ReduceIf/ShiftIf, however I don't know how to use it. I hope you guys can help me out.</p>\r\n<p>Here is my sample grammar</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> expr = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;expr&quot;</span>);\r\n<span style=\"color:blue\">var</span> amount = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;amount&quot;</span>);\r\n<span style=\"color:blue\">var</span> itemsLeft = <span style=\"color:blue\">new</span> NonTerminal(<span style=\"color:#a31515\">&quot;itemsLeft&quot;</span>);\r\n\r\n<span style=\"color:blue\">var</span> money = <span style=\"color:blue\">new</span> RegexBasedTerminal(<span style=\"color:#a31515\">&quot;money&quot;</span>, <span style=\"color:#a31515\">@&quot;(\\d*((\\,*)\\d*)*\\.?\\d{1,2})&quot;</span>);\r\n<span style=\"color:blue\">var</span> moneyIdentifier = <span style=\"color:blue\">new</span> RegexBasedTerminal(<span style=\"color:#a31515\">&quot;identifier&quot;</span>, <span style=\"color:#a31515\"><span style=\"color:#a31515\">@&quot;USD|dollar|dollars&quot;</span></span>);\r\n\r\n<span style=\"color:blue\">var</span> numericValue = <span style=\"color:blue\">new</span> RegexBasedTerminal(<span style=\"color:#a31515\">&quot;numericValue&quot;</span>, <span style=\"color:#a31515\">@&quot;\\d{1,3}&quot;</span>);\r\n<span style=\"color:blue\">var</span> separator = <span style=\"color:blue\">new</span> RegexBasedTerminal(<span style=\"color:#a31515\">&quot;separator&quot;</span>, <span style=\"color:#a31515\">@&quot;out of|left from&quot;</span>);\r\n\r\nexpr.Rule =\r\n\tamount\r\n\t| itemsLeft;\r\n\r\namount.Rule =\r\n\tmoney\r\n\t| money &#43; moneyIdentifier;\r\n\r\nitemsLeft.Rule =\r\n\tnumericValue &#43; separator &#43; numericValue;\r\n\r\n<span style=\"color:blue\">this</span>.Root = expr;\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>When you try the following two inputs you get the same parsing strategy even though they should yield a different expression as a result.&nbsp;</p>\r\n<p>Input 1: <strong>1 USD</strong></p>\r\n<p>Input 2: <strong>1 out of 3</strong></p>\r\n<p>In input 1 it correctly parses the string as a money (<strong>1</strong>) &#43; identifier (<strong>USD</strong>), but in input 2 it tries to do the same finding\r\n<strong>1</strong> as money and&nbsp;failing&nbsp;by not finding and identifier when the correct would be a numericValue (<strong>1</strong>) &#43; separator (<strong>out of</strong>) &#43; another numericValue (<strong>3</strong> should also be numericValue).</p>\r\n<p>By reading the code and some docs and discussions here I was led to think that if we could make it look for the next token before taking a decision or starting all over when it finds a mistake it would work. In this case it should look for the second token\r\n before take the first one as money. If it finds that the second token is a separator and not an identifier then it can select the correct path.</p>\r\n<p>I tried using ReduceIf() and ShiftIf() in&nbsp;numerous&nbsp;combinations but my knowledge failed me and I couldn't make it work :(</p>\r\n<p>Hope you guys can help.</p>\r\n<p>Thanks a lot!</p>\r\n",
    "PostedDate": "2011-09-09T20:37:52.523-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "670098",
    "ThreadId": "272127",
    "Html": "<p>There is no ambiguity in your grammar and It is normal that It is only able to parse the amount rule, because the parser is unable to make the difference between the money and numericvalue (they can both accept 1, and the parser doesn't know anything about what they can accept, as they are regex terminal), so basically, the parser will try to first match the money terminal and it will work every time there is a number.</p>\r\n<p>But if you use the same terminal for both money and numericValue, then you will be able to parse it:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>            <span style=\"color: blue;\">var</span> expr = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"expr\"</span>);\r\n            <span style=\"color: blue;\">var</span> amount = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"amount\"</span>);\r\n            <span style=\"color: blue;\">var</span> itemsLeft = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"itemsLeft\"</span>);\r\n\r\n            <span style=\"color: blue;\">var</span> money = TerminalFactory.CreateCSharpNumber(<span style=\"color: #a31515;\">\"number\"</span>);\r\n            <span style=\"color: blue;\">var</span> moneyIdentifier = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"identifier\"</span>, <span style=\"color: #a31515;\">@\"USD|dollar|dollars\"</span>);\r\n\r\n            <span style=\"color: blue;\">var</span> numericValue = money;\r\n            <span style=\"color: blue;\">var</span> separator = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"separator\"</span>, <span style=\"color: #a31515;\">@\"out of|left from\"</span>);\r\n\r\n            expr.Rule =\r\n                amount\r\n                | itemsLeft;\r\n\r\n            amount.Rule =\r\n                money\r\n                | money + moneyIdentifier;\r\n\r\n            itemsLeft.Rule =\r\n                numericValue + separator + numericValue;\r\n\r\n            <span style=\"color: blue;\">this</span>.Root = expr;\r\n</pre>\r\n</div>\r\nThen you could plug on the itemsLeft rule a validator to verify the numbers.</p>",
    "PostedDate": "2011-09-10T09:16:58.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "672516",
    "ThreadId": "272127",
    "Html": "<p>Great Alexandre!</p>\r\n<p>It worked like a charm. And I even didn't have to use validation to make it work in my case. Also, this sugestion helped me with some other cases that I was resolving with a more complex solution.</p>\r\n<p>Even though I didn't have to use validation, I think I could use some info about it.</p>\r\n<p>Should I plug it into the&nbsp;ValidateToken event of a Terminal? If yes, how to tell the parser that a token is not valid and should be ignored to make it try other terminals?</p>\r\n<p>Thanks a lot!</p>",
    "PostedDate": "2011-09-15T19:24:03.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "672813",
    "ThreadId": "272127",
    "Html": "<p>ValidateToken event - this is a bit obscure, I will refactor this event to expose these methods more explicitly in eventArgs object. For now, to report error (invalid token) you should replace Contex.CurrentToken with Error token (containing an error message) - find examples in samples, there are some I\"m sure.&nbsp;</p>\r\n<p>I want to point out that use of RegexBasedTerminal should be really discouraged and it should be used ONLY when there's no other option. The moneyIdentifier is not this case - you could instead define non-terminal and set its rule to:</p>\r\n<p>currToken.Rule = ToTerm(\"USD\") | \"dollar\" | \"dollars\";&nbsp;</p>\r\n<p>this def is much easier for scanner/parser to digest and optimize - unlike regex which is a blackbox.</p>\r\n<p>Roman</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-09-16T09:34:35.543-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "672853",
    "ThreadId": "272127",
    "Html": "<p>Hi Roman,</p>\r\n<p>Thanks for your reply :)</p>\r\n<p>I ended up needing validation and tried to use the&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>e.Context.AddParserError\r\n</pre>\r\n</div>\r\n</p>\r\n<p>but with it the parser would stop and I would get an error which wasn't what I needed. After poking around a bit I ended up doing&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>e.Context.CurrentToken = <span style=\"color: blue;\">null</span></pre>\r\n</div>\r\n</p>\r\n<p>which worked out fine because if the current token is null than Scanner keeps trying.&nbsp;</p>\r\n<p>I will try what you suggested.</p>\r\n<p>Also, to follow your advice I would like to ask u what's the best way to deal with this cases like the following. I'm using only RegexTerminals all over. My DSL needs to parse regular phrases (in portuguese) so I can have prepositions, substantives, etc. That's why I thought that RegexTerminal was the right fit. Here is the sample:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">var</span> preposicao = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"preposicao\"</span>, <span style=\"color: #a31515;\">@\"\\b(n[ao]|numa)\\b\"</span>); <span style=\"color: green;\">//some prepositions in portuguese</span>\r\n\r\n<span style=\"color: blue;\">var</span> data1 = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"data\"</span>, <span style=\"color: #a31515;\">@\"\\b\\d{1,2}\\/\\d{1,2}(\\/(\\d{4}|\\d{2}))?\\b\"</span>); <span style=\"color: green;\">//date format</span>\r\n\r\n<span style=\"color: blue;\">var</span> data3 = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"data\"</span>, <span style=\"color: #a31515;\">@\"\\b(hoje|amanh[a�]|ontem|s[a�]bado|domingo|(segunda|ter[c�]a|quarta|quinta|sexta)((\\-feira)|(\\s?feira))?)\\b\"</span>); <span style=\"color: green;\">//also date, but based on day of week names, like monday, thursday, etc</span>\r\n\r\n<span style=\"color: blue;\">var</span> data4 = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"data\"</span>, <span style=\"color: #a31515;\">@\"\\b\\d{1,2}\\b de \\b\\w+\\b( de \\b(\\d{2}|\\d{4})\\b)?\"</span>); <span style=\"color: green;\">//and finally a date described with full string like \"September 1 of 2011\"</span>\r\n\r\n<span style=\"color: green;\">//And some NonTerminals using them</span>\r\n\r\ndatas.Rule =\r\n                data1 | data2 | data3 | data4;\r\n\r\nlocal.Rule =\r\n                preposicao + localToken\r\n                | prefixoGenerico + localToken\r\n                | localToken;\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Thanks a lot for your close support!</p>",
    "PostedDate": "2011-09-16T11:17:37.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "673333",
    "ThreadId": "272127",
    "Html": "<p>about these regex terminals - hard to say, if there's a way to replace them with more \"direct\" terminals. Generally, I would say that Irony and similar DFA-based parsers are not quite fit for parsing natural language-lke texts. LALR method which Irony uses expects strict unambigous rules language constructs, with certain restrictions.</p>\r\n<p>Other parsing techologies and tools (Grammatica?) &nbsp;might be more appropriate in this case</p>\r\n<p>Roman</p>",
    "PostedDate": "2011-09-18T09:17:15.533-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]