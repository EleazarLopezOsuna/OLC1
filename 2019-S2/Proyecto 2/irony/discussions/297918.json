[
  {
    "Id": "746069",
    "ThreadId": "297918",
    "Html": "<p>OK, I am going to narrow down the problem to one line of code:</p>\n<p>The following code works on this expression:&nbsp;<strong><span style=\"font-size: 10pt;\">Code</span><span style=\"font-size: 10pt;\"> &gt;= <span style=\"color: #2f4f4f;\">\"000000000\"</span> <span style=\"color: blue;\">AND</span> ContainerCode &lt;&nbsp; fn(<span style=\"color: #8b0000;\">200000000</span>)</span></strong></p>\n<p><span style=\"font-size: 9.5pt;\"><span style=\"color: blue;\">&nbsp; &nbsp; &nbsp;public</span> <span style=\"color: blue;\">class</span> <span style=\"color: #2b91af;\"> CSharpGrammar</span> : <span style=\"color: #2b91af;\">InterpretedLanguageGrammar</span></span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;      {</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">public</span> CSharpGrammar()</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     : <span style=\"color: blue;\">base</span>(caseSensitive:     <span style=\"color: blue;\">false</span>)</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     {</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> number = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NumberLiteral</span>(<span style=\"color: #a31515;\">\"number\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> stringLiteral =     <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">StringLiteral</span>(<span style=\"color: #a31515;\">\"string\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     stringLiteral.AddStartEnd(<span style=\"color: #a31515;\">\"\\\"\"</span>,     <span style=\"color: #2b91af;\">StringOptions</span>.NoEscapes);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> identifier = <span style=\"color: blue;\"> new</span> <span style=\"color: #2b91af;\">IdentifierTerminal</span>(<span style=\"color: #a31515;\">\"identifier\"</span>);</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> Expr = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"expression\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> Column = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"column\"</span>,     <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">IdentifierNode</span>));</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> BinExpr = <span style=\"color: blue;\"> new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"binexpr\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">BinaryOperationNode</span>));</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> ParExpr = <span style=\"color: blue;\"> new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"parexpr\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> FunctionCall =     <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"FunctionCall\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">FunctionCallNode</span>));</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> Constant = <span style=\"color: blue;\"> new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"Constant\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">LiteralValueNode</span>));</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> BinOp = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"binop\"</span>,     <span style=\"color: #a31515;\">\"operator\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> UnExpr = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"UnExpr\"</span>,     <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">UnaryOperationNode</span>));</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> ArgList = <span style=\"color: blue;\"> new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"ArgList\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">ExpressionListNode</span>));</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> UnOp = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"UnOp\"</span>,     <span style=\"color: #a31515;\">\"operator\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> comma = ToTerm(<span style=\"color: #a31515;\">\",\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">var</span> caret = ToTerm(<span style=\"color: #a31515;\">\"^\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: green;\">// BNF rules</span></span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">this</span>.Root = BinExpr;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: green;\">// components of an expressions</span></span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     Constant.Rule = number | stringLiteral;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     Column.Rule = identifier; <span style=\"color: green;\">//      MakePlusRule(Column, caret, identifier);</span></span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     FunctionCall.Rule = identifier + <span style=\"color: #a31515;\">\"(\"</span> +      ArgList + <span style=\"color: #a31515;\">\")\"</span>;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     FunctionCall.NodeCaptionTemplate = <span style=\"color: #a31515;\">\"call      #{0}(...)\"</span>;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      &nbsp;&nbsp;&nbsp;ArgList.Rule = MakeStarRule(ArgList, comma, Expr);</span></p>\n<p><span style=\"font-size: 9.5pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: green;\">// Expression</span></span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     Expr.Rule = UnExpr | BinExpr | Column | Constant | FunctionCall |      ParExpr;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: green;\">// composit expressions</span></span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     UnExpr.Rule = UnOp + Expr;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      &nbsp;&nbsp;&nbsp;&nbsp;BinExpr.Rule = Expr + BinOp + Expr;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     ParExpr.Rule = <span style=\"color: #a31515;\">\"(\"</span> + Expr +     <span style=\"color: #a31515;\">\")\"</span>;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     UnOp.Rule = ToTerm(<span style=\"color: #a31515;\">\"+\"</span>) |     <span style=\"color: #a31515;\">\"-\"</span>; </span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     BinOp.Rule = ToTerm(<span style=\"color: #a31515;\">\"+\"</span>) |     <span style=\"color: #a31515;\">\"-\"</span> | <span style=\"color: #a31515;\">\"*\"</span> | <span style=\"color: #a31515;\">\"/\"</span> | <span style=\"color: #a31515;\">\"%\"</span> | <span style=\"color: #a31515;\">\"=\"</span> | <span style=\"color: #a31515;\">\"&gt;\"</span> | <span style=\"color: #a31515;\">\"&lt;\"</span> | <span style=\"color: #a31515;\">\"&gt;=\"</span> | <span style=\"color: #a31515;\">\"&lt;=\"</span> | <span style=\"color: #a31515;\">\"&lt;&gt;\"</span> | <span style=\"color: #a31515;\">\"!=\"</span> | <span style=\"color: #a31515;\">\"!&lt;\"</span> | <span style=\"color: #a31515;\">\"!&gt;\"</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     RegisterOperators(10, <span style=\"color: #a31515;\">\"*\"</span>,     <span style=\"color: #a31515;\">\"/\"</span>, <span style=\"color: #a31515;\">\"%\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     RegisterOperators(9, <span style=\"color: #a31515;\">\"+\"</span>,     <span style=\"color: #a31515;\">\"-\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     RegisterOperators(8, <span style=\"color: #a31515;\">\"=\"</span>,     <span style=\"color: #a31515;\">\"&gt;\"</span>, <span style=\"color: #a31515;\">\"&lt;\"</span>,     <span style=\"color: #a31515;\">\"&gt;=\"</span>, <span style=\"color: #a31515;\">\"&lt;=\"</span>,     <span style=\"color: #a31515;\">\"&lt;&gt;\"</span>, <span style=\"color: #a31515;\">\"!=\"</span>,     <span style=\"color: #a31515;\">\"!&lt;\"</span>, <span style=\"color: #a31515;\">\"!&gt;\"</span>,     <span style=\"color: #a31515;\">\"LIKE\"</span>, <span style=\"color: #a31515;\">\"IN\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     RegisterOperators(7, <span style=\"color: #a31515;\">\"AND\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     RegisterOperators(6, <span style=\"color: #a31515;\">\"OR\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     MarkPunctuation(<span style=\"color: #a31515;\">\"^\"</span>,     <span style=\"color: #a31515;\">\",\"</span>, <span style=\"color: #a31515;\">\"(\"</span>,     <span style=\"color: #a31515;\">\")\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     RegisterBracePair(<span style=\"color: #a31515;\">\"(\"</span>,     <span style=\"color: #a31515;\">\")\"</span>);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     MarkTransient(Expr, Constant, Column, UnOp, BinOp);</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     <span style=\"color: blue;\">this</span>.LanguageFlags =     <span style=\"color: #2b91af;\">LanguageFlags</span>.CreateAst;</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     }</span></p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;      }</span></p>\n<p>But I want it to work on this expression:&nbsp;<strong><span style=\"font-size: 10pt;\">Code</span><span style=\"font-size: 10pt;\"> &gt;= <span style=\"color: #2f4f4f;\">\"000000000\"</span> <span style=\"color: blue;\">AND</span> Container^Code &lt;&nbsp; fn(<span style=\"color: #8b0000;\">200000000</span>)</span></strong></p>\n<p>so I convert this:</p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;Column.Rule = identifier; <span style=\"color: green;\">// MakePlusRule(Column, caret, identifier);</span></span></p>\n<p>to this:</p>\n<p><span style=\"font-size: 9.5pt;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;Column.Rule = MakePlusRule(Column, caret, identifier);</span></p>\n<p><span style=\"font-size: 9.5pt;\">But that does not work, as it gives me an Error:&nbsp;<span style=\"color: #ff0000;\">List non-terminals cannot be marked transient; list: (column)</span></span></p>\n<p><strong>What can I do??</strong></p>\n<p>&nbsp;</p>\n<p>Thanks!</p>",
    "PostedDate": "2012-02-07T16:24:35.633-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "746097",
    "ThreadId": "297918",
    "Html": "<p>If you are doing this to translate the expression into SQL, then you do NOT need AST tree, you can use the parse tree. AST tree (especially standard nodes from interpreter that you reference) should be used for interpreting the script as a scripting program. Look at SearchGrammar demo - it converts input expression into FTS query without AST, by directly working with parse tree.&nbsp;</p>",
    "PostedDate": "2012-02-07T16:44:51.01-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "746142",
    "ThreadId": "297918",
    "Html": "<p>You are correct rivantsov, and thanks for your quick response, but I actually need to do a bit more than that, including possible optimizing and then converting the AST into an expression tree.</p>",
    "PostedDate": "2012-02-07T17:13:45.073-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "747959",
    "ThreadId": "297918",
    "Html": "<p>rivantsov, I have changed the question to allow for an easier answer, I would appreciate your input.</p>\r\n<p>Thank!</p>",
    "PostedDate": "2012-02-08T14:54:09.027-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "747980",
    "ThreadId": "297918",
    "Html": "<p>Remove the \"Column\" from MarkTransient call at the end. Since you do this, you have to provide an AST node type to Column non-terminal.</p>\r\n<p>Also, I see you register \"AND\" and \"OR\" as operator, but I do not see them listed in BinOp.Rule - should be there I guess.&nbsp;</p>",
    "PostedDate": "2012-02-08T15:10:09.803-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "747986",
    "ThreadId": "297918",
    "Html": "<p>Thanks again, the \"AND\" and \"OR\" were omitted accidentally during copy/paste.</p>\n<p>I understood \"<span>provide an AST node type to Column non-terminal\" to mean the following code change:</span></p>\n<p><span style=\"font-size: 9.5pt; color: blue;\">var</span><span style=\"font-size: 9.5pt;\"> Column = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"column\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">AstNode</span>));</span></p>\n<p>This worked!!</p>\n<p>&nbsp;</p>\n<p>Thanks!</p>\n<p>&nbsp;</p>\n<p><span><br /></span></p>",
    "PostedDate": "2012-02-08T15:13:25.743-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "747991",
    "ThreadId": "297918",
    "Html": "<p>Well, it actually should be \"IdentifierNode type is no longer fit for your Column non-terminal\". You should create your own AST node type, that knows how to \"interpret\" the column definition parsed in code. Now this column definition will be a list of identifiers separated by caret. AST node for interpreter should \"know\" how to evaluate particular language constructs - like identifier, or function call. Naturally, Irony has no node that can interpret your column expression - you have to create it, and specify its type in the declaration of the Column non-terminal. Just look at other AST node classes, and follow the pattern.</p>\r\n<p>CSharpGrammar- is it really c#?!&nbsp;</p>",
    "PostedDate": "2012-02-08T15:18:20.29-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "748021",
    "ThreadId": "297918",
    "Html": "<p>AstNode is a base class, it would allow you to build AST tree in GrammarExplorer, but would not work in interpreter</p>",
    "PostedDate": "2012-02-08T15:38:44.563-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "748027",
    "ThreadId": "297918",
    "Html": "<p>I am currently examining the&nbsp;ExpressionListNode, as it seems to be the closest, but each item would not be evaluated separately... still getting my head wrapped around it.</p>",
    "PostedDate": "2012-02-08T15:41:24.257-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "748033",
    "ThreadId": "297918",
    "Html": "<p>I think MemberAccessNode is better. ExpressionList is a list of independent evaluations; what you have here I guess is smth similar to \"obj.Prop\" access</p>",
    "PostedDate": "2012-02-08T15:44:44.313-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "748038",
    "ThreadId": "297918",
    "Html": "<p>actually MemberAccessNode is perfect!</p>\r\n<p>now I'm having some issues when I expand my expression to something like this:&nbsp;</p>\r\n<p><strong><span style=\"font-size: 10pt; color: #30332d;\">( Code</span></strong><span><strong><span style=\"font-size: 10pt; color: #30332d;\">&nbsp;</span></strong></span><strong><span style=\"font-size: 10pt; color: #30332d;\">&gt;=</span></strong><span><strong><span style=\"font-size: 10pt; color: #30332d;\">&nbsp;</span></strong></span><strong><span style=\"font-size: 10pt; color: #2f4f4f;\">\"000000000\"</span></strong><span><strong><span style=\"font-size: 10pt; color: #30332d;\">&nbsp;</span></strong></span><strong><span style=\"font-size: 10pt; color: blue;\">AND</span></strong><span><strong><span style=\"font-size: 10pt; color: #30332d;\">&nbsp;</span></strong></span><strong><span style=\"font-size: 10pt; color: #30332d;\">Container^Code &lt;&nbsp; fn(</span></strong><strong><span style=\"font-size: 10pt; color: #8b0000;\">200000000</span></strong><strong><span style=\"font-size: 10pt; color: #30332d;\">) ) OR Value &lt; 3</span></strong></p>",
    "PostedDate": "2012-02-08T15:49:55.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "748039",
    "ThreadId": "297918",
    "Html": "<p>what issues?</p>",
    "PostedDate": "2012-02-08T15:52:18.763-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "748044",
    "ThreadId": "297918",
    "Html": "<p>I get a \"Root AST node is null, cannot evaluate script. Create AST tree first.\"&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>BTW I really appreciate your help with this, this is saving me hours...</p>",
    "PostedDate": "2012-02-08T15:55:16.617-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "748049",
    "ThreadId": "297918",
    "Html": "<p>this.Root = Expr;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-02-08T15:58:42.73-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "748067",
    "ThreadId": "297918",
    "Html": "<p>now I get a null reference exception in&nbsp;<span style=\"font-size: 9.5pt; color: #2b91af;\">fmGrammarExplorer&nbsp;</span>at:&nbsp;</p>\r\n<p><span style=\"font-size: 9.5pt; color: blue;\">private</span><span style=\"font-size: 9.5pt;\"> <span style=\"color: blue;\">void</span> ParseSample() {</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ClearParserOutput();</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">if</span> (_parser == <span style=\"color: blue;\">null</span> || !_parser.Language.CanParse()) <span style=\"color: blue;\">return</span>; </span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _parseTree = <span style=\"color: blue;\">null</span>;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: #2b91af;\">GC</span>.Collect(); <span style=\"color: green;\">//to avoid disruption of perf times with occasional collections</span></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _parser.Context.TracingEnabled = chkParserTrace.Checked;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">try</span> {</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _parser.Parse(txtSource.Text, <span style=\"color: #a31515;\">\"&lt;source&gt;\"</span>) <span style=\"color: #ff0000;\">&nbsp;&lt;-- HERE</span></span></p>\r\n<p>&nbsp;</p>\r\n<p>---</p>\r\n<p>here's my full code if you like to try it:</p>\r\n<p><span style=\"font-size: 9.5pt; color: blue;\">public</span><span style=\"font-size: 9.5pt;\"> <span style=\"color: blue;\">class</span> <span style=\"color: #2b91af;\">ORSQLGrammar</span> : <span style=\"color: #2b91af;\">InterpretedLanguageGrammar</span></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">public</span> ORSQLGrammar()</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <span style=\"color: blue;\">base</span>(caseSensitive: <span style=\"color: blue;\">false</span>)</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> number = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NumberLiteral</span>(<span style=\"color: #a31515;\">\"number\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> stringLiteral = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">StringLiteral</span>(<span style=\"color: #a31515;\">\"string\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stringLiteral.AddStartEnd(<span style=\"color: #a31515;\">\"\\\"\"</span>, <span style=\"color: #2b91af;\">StringOptions</span>.NoEscapes);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> identifier = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">IdentifierTerminal</span>(<span style=\"color: #a31515;\">\"identifier\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: green;\">//var column = CreateColumnIdentifier(\"Column\");</span></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> Expr = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"expression\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: green;\">//var Term = new NonTerminal(\"Term\");</span></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<span style=\"color: blue;\">var</span> Column = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"column\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">MemberAccessNode</span>));</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> BinExpr = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"binexpr\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">BinaryOperationNode</span>));</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> ParExpr = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"parexpr\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> FunctionCall = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"FunctionCall\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">FunctionCallNode</span>));</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> Constant = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"Constant\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">LiteralValueNode</span>));</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> BinOp = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"binop\"</span>, <span style=\"color: #a31515;\">\"operator\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> UnExpr = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"UnExpr\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">UnaryOperationNode</span>));</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> ArgList = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"ArgList\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: #2b91af;\">ExpressionListNode</span>));</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> UnOp = <span style=\"color: blue;\">new</span> <span style=\"color: #2b91af;\">NonTerminal</span>(<span style=\"color: #a31515;\">\"UnOp\"</span>, <span style=\"color: #a31515;\">\"operator\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> comma = ToTerm(<span style=\"color: #a31515;\">\",\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">var</span> caret = ToTerm(<span style=\"color: #a31515;\">\"^\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: green;\">// BNF rules</span></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">this</span>.Root = Expr;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: green;\">// components of an expressions</span></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Constant.Rule = number | stringLiteral;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column.Rule = MakePlusRule(Column, caret, identifier);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FunctionCall.Rule = identifier + <span style=\"color: #a31515;\">\"(\"</span> + ArgList + <span style=\"color: #a31515;\">\")\"</span>;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FunctionCall.NodeCaptionTemplate = <span style=\"color: #a31515;\">\"call #{0}(...)\"</span>;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArgList.Rule = MakeStarRule(ArgList, comma, Expr);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Expr.Rule = UnExpr | BinExpr | Column | Constant | FunctionCall | ParExpr;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: green;\">// composit expressions</span></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UnExpr.Rule = UnOp + Expr;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BinExpr.Rule = Expr + BinOp + Expr;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ParExpr.Rule = <span style=\"color: #a31515;\">\"(\"</span> + Expr + <span style=\"color: #a31515;\">\")\"</span>;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UnOp.Rule = ToTerm(<span style=\"color: #a31515;\">\"+\"</span>) | <span style=\"color: #a31515;\">\"-\"</span>; </span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BinOp.Rule = ToTerm(<span style=\"color: #a31515;\">\"+\"</span>) | <span style=\"color: #a31515;\">\"-\"</span> | <span style=\"color: #a31515;\">\"*\"</span> | <span style=\"color: #a31515;\">\"/\"</span> | <span style=\"color: #a31515;\">\"%\"</span> <span style=\"color: green;\">//arithmetic</span></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | <span style=\"color: #a31515;\">\"=\"</span> | <span style=\"color: #a31515;\">\"&gt;\"</span> | <span style=\"color: #a31515;\">\"&lt;\"</span> | <span style=\"color: #a31515;\">\"&gt;=\"</span> | <span style=\"color: #a31515;\">\"&lt;=\"</span> | <span style=\"color: #a31515;\">\"&lt;&gt;\"</span> | <span style=\"color: #a31515;\">\"!=\"</span> | <span style=\"color: #a31515;\">\"!&lt;\"</span> | <span style=\"color: #a31515;\">\"!&gt;\"</span></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | <span style=\"color: #a31515;\">\"AND\"</span> | <span style=\"color: #a31515;\">\"OR\"</span> | <span style=\"color: #a31515;\">\"LIKE\"</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(10, <span style=\"color: #a31515;\">\"*\"</span>, <span style=\"color: #a31515;\">\"/\"</span>, <span style=\"color: #a31515;\">\"%\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(9, <span style=\"color: #a31515;\">\"+\"</span>, <span style=\"color: #a31515;\">\"-\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(8, <span style=\"color: #a31515;\">\"=\"</span>, <span style=\"color: #a31515;\">\"&gt;\"</span>, <span style=\"color: #a31515;\">\"&lt;\"</span>, <span style=\"color: #a31515;\">\"&gt;=\"</span>, <span style=\"color: #a31515;\">\"&lt;=\"</span>, <span style=\"color: #a31515;\">\"&lt;&gt;\"</span>, <span style=\"color: #a31515;\">\"!=\"</span>, <span style=\"color: #a31515;\">\"!&lt;\"</span>, <span style=\"color: #a31515;\">\"!&gt;\"</span>, <span style=\"color: #a31515;\">\"LIKE\"</span>, <span style=\"color: #a31515;\">\"IN\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(7, <span style=\"color: #a31515;\">\"AND\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterOperators(6, <span style=\"color: #a31515;\">\"OR\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MarkPunctuation(<span style=\"color: #a31515;\">\"^\"</span>, <span style=\"color: #a31515;\">\",\"</span>, <span style=\"color: #a31515;\">\"(\"</span>, <span style=\"color: #a31515;\">\")\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterBracePair(<span style=\"color: #a31515;\">\"(\"</span>, <span style=\"color: #a31515;\">\")\"</span>);</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MarkTransient(Expr, Constant, UnOp, BinOp);<span style=\"color: green;\">//, UnOp, BinOp);</span></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">this</span>.LanguageFlags = <span style=\"color: #2b91af;\">LanguageFlags</span>.CreateAst;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-02-08T16:24:55.83-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "748068",
    "ThreadId": "297918",
    "Html": "<p>yeah, that's probably a manifestation of an error that have been already reported. Somewhere during refactorings a verification method had been lost. It used to verify the following - that any NonTerminal or terminal, either have AstNode type specified,  or AstNodeCreator set, or are marked transient. Now with this check gone, the AST builder blows up when there's under-specified term. Try to stop on error and see what TreeNode and its Term (name of it) causes the failure. This term likely has missing AstNode  type.</p>\n<p>Edit: I will be fixing it soon, I promise</p>",
    "PostedDate": "2012-02-08T16:34:11.44-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "748069",
    "ThreadId": "297918",
    "Html": "<p>Excellent tip. I was able to find out that I was missing the ParExpr from the transient list.</p>\r\n<p>putting that in there got things working again.</p>\r\n<p>pure magic! lol</p>",
    "PostedDate": "2012-02-08T16:41:05.53-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]