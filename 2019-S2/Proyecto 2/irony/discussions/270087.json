[
  {
    "Id": "662080",
    "ThreadId": "270087",
    "Html": "<p>Hi!</p>\n<p>I'm trying to resolve a simple grammar conflict without having to resolve it once the ast is created.</p>\n<p>I have the following sequence:&nbsp;&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre>modifier1 = <span style=\"color: #a31515;\">\":\"</span> + identifier\n\nmodifier2 = <span style=\"color: #a31515;\">\":\"</span> + keyword1 + \"(\" identifier + \")\"\n\nmodifier3 = <span style=\"color: #a31515;\">\":\"</span> + keyword2 + \"(\" + identifier+ \")\"\n\ninitialValue = <span style=\"color: #a31515;\">\"=\"</span> + value\n</pre>\n</div>\n<div style=\"color: black; background-color: white;\">\n<pre>type  + identifier  + modifier1? + modifier2? + modifier3* + initialValue?\n</pre>\n</div>\n<p>It is obvious that the \":\" is conflicting with modifier1, modifier2, modifier3. The easy way is to create a</p>\n<pre> modifier = \":\" + (identifier | keyword1 + \"(\" identifier + \")\" | keyword2 + \"(\" + identifier + \")\")</pre>\n<p>and use it like this:</p>\n<pre>type  + identifier  + modifier* + initialValue?</pre>\n<p>But It requires to post-validate the ast and verify that there is only (0,1) modifier1&nbsp; (0,1) modifier2 (*) modifier3</p>\n<p>What is the best way to resolve this kind of conflicts with Irony?</p>\n<p>Thanks for your help!</p>",
    "PostedDate": "2011-08-23T06:26:47.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "662221",
    "ThreadId": "270087",
    "Html": "<p>I don't quite understand the phrase \":\" is conflicting with ...&nbsp;</p>\r\n<p>and i do not see where's the conflict. It seems, there should be no conflict - provided you marked keyword1 and keyword2 as reserved word (using MarkReservedWords method). Please provide more info.&nbsp;</p>\r\n<p>As for solution with Post-validate, I actually do not see anything wrong with, and in fact it is better in one respect: it allows you to provide much more clear error message if input is invalid. Like:</p>\r\n<p>\"No more than 2 modifiers are allowed\"</p>\r\n<p>\"Modifier X is not allowed with construct Y\"</p>\r\n<p>&nbsp;- instead of simply \"unexpected symbol, identifier expected\" that Irony parser would give by default.&nbsp;</p>\r\n<p>The best way - I would say there's no best way, it all depends....</p>\r\n<p>Roman</p>",
    "PostedDate": "2011-08-23T10:53:55.193-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "662368",
    "ThreadId": "270087",
    "Html": "<p>Thanks for your response. If solution 2 is fine, I will probably go for 2.</p>\r\n<p>Though I would like to understand how to resolve those conflicts. Here is the grammar:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> Irony.Parsing;\r\n<span style=\"color: blue;\">namespace</span> TestGrammar\r\n{\r\n    [Language(<span style=\"color: #a31515;\">\"test\"</span>, <span style=\"color: #a31515;\">\"1.0\"</span>, <span style=\"color: #a31515;\">\"Test grammar\"</span>)]\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> TestGrammar : Grammar\r\n    {\r\n        <span style=\"color: blue;\">public</span> TestGrammar()\r\n        {\r\n            <span style=\"color: blue;\">var</span> identifier = TerminalFactory.CreateCSharpIdentifier(<span style=\"color: #a31515;\">\"Identifier\"</span>);\r\n\r\n            <span style=\"color: green;\">// scalars</span>\r\n            <span style=\"color: blue;\">var</span> type = ToTerm(<span style=\"color: #a31515;\">\"type\"</span>);\r\n            <span style=\"color: blue;\">var</span> modifier1 = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Modifier1\"</span>) { Rule = <span style=\"color: #a31515;\">\":\"</span> + identifier };\r\n            <span style=\"color: blue;\">var</span> modifier2 = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Modifier2\"</span>) { Rule = ToTerm(<span style=\"color: #a31515;\">\":\"</span>) + <span style=\"color: #a31515;\">\"keyword1\"</span> + <span style=\"color: #a31515;\">\"(\"</span> + identifier + <span style=\"color: #a31515;\">\")\"</span> };\r\n            <span style=\"color: blue;\">var</span> modifier3 = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Modifier3\"</span>) { Rule = ToTerm(<span style=\"color: #a31515;\">\":\"</span>) + <span style=\"color: #a31515;\">\"keyword2\"</span> + <span style=\"color: #a31515;\">\"(\"</span> + identifier + <span style=\"color: #a31515;\">\")\"</span> };\r\n\r\n            <span style=\"color: blue;\">var</span> modifier1Opt = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Modifier1Opt\"</span>) { Rule = Empty | modifier1 };\r\n            <span style=\"color: blue;\">var</span> modifier2Opt = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Modifier2Opt\"</span>) { Rule = Empty | modifier2 };\r\n            <span style=\"color: blue;\">var</span> modifier3List = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Modifer3List\"</span>);\r\n            MakeStarRule(modifier3List, <span style=\"color: blue;\">null</span>, modifier3);\r\n\r\n            <span style=\"color: blue;\">var</span> variable = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Variable\"</span>) { Rule = type + identifier + modifier1Opt + modifier2Opt + modifier3List + <span style=\"color: #a31515;\">\";\"</span> };\r\n\r\n            MarkReservedWords(<span style=\"color: #a31515;\">\"keyword1\"</span>, <span style=\"color: #a31515;\">\"keyword2\"</span>);\r\n            MarkTransient(modifier1Opt, modifier2Opt);\r\n            Delimiters = <span style=\"color: #a31515;\">\"():;\"</span>;\r\n            MarkPunctuation(<span style=\"color: #a31515;\">\";\"</span>, <span style=\"color: #a31515;\">\",\"</span>, <span style=\"color: #a31515;\">\"(\"</span>, <span style=\"color: #a31515;\">\")\"</span>, <span style=\"color: #a31515;\">\"{\"</span>, <span style=\"color: #a31515;\">\"}\"</span>, <span style=\"color: #a31515;\">\"[\"</span>, <span style=\"color: #a31515;\">\"]\"</span>, <span style=\"color: #a31515;\">\":\"</span>);\r\n            LineTerminators = <span style=\"color: #a31515;\">\"\\r\\n\"</span>; \r\n            WhitespaceChars = <span style=\"color: #a31515;\">\" \\t\\r\\n\\v\"</span>;\r\n\r\n            Root = variable.Star();\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>In the tabs Grammar Errors of the Grammar Explorer, It complains about:</p>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td><em>Shift-reduce conflict. State S5, lookaheads [:]. Selected shift as preferred action.</em></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>&nbsp;</p>\r\n<pre>State S5 (Inadequate)\r\n  Shift items:\r\n    Variable -&gt; type Identifier �Modifier1Opt Modifier2Opt Modifer3List ; \r\n    Modifier1Opt -&gt; �Modifier1 \r\n    Modifier1 -&gt; �: Identifier \r\n  Reduce items:\r\n    Modifier1Opt -&gt; � [: ;]\r\n  Transitions: Modifier1Opt-&gt;S6, Modifier1-&gt;S7, :-&gt;S8</pre>\r\n<p>Same for S6:</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<pre>State S6 (Inadequate)\r\n  Shift items:\r\n    Variable -&gt; type Identifier Modifier1Opt �Modifier2Opt Modifer3List ; \r\n    Modifier2Opt -&gt; �Modifier2 \r\n    Modifier2 -&gt; �: keyword1 ( Identifier ) \r\n  Reduce items:\r\n    Modifier2Opt -&gt; � [; :]\r\n  Transitions: Modifier2Opt-&gt;S9, Modifier2-&gt;S10, :-&gt;S11</pre>\r\nI don't see why there are shift-reduce conflicts here.</p>",
    "PostedDate": "2011-08-23T15:13:13.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "662409",
    "ThreadId": "270087",
    "Html": "<p>I managed it by making an explicit declaration of the different combinations:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>            <span style=\"color: blue;\">var</span> modifiers = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Modifiers\"</span>)\r\n            {\r\n                Rule =\r\n                    Empty\r\n                    | modifier1\r\n                    | modifier1 + modifier2 \r\n                    | modifier1 + modifier2 + modifier3List \r\n                    | modifier2\r\n                    | modifier2 + modifier3List\r\n                    | modifier3List\r\n            };\r\n\r\n            <span style=\"color: blue;\">var</span> variable = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Variable\"</span>)\r\n            {\r\n                Rule = type + identifier + modifiers + <span style=\"color: #a31515;\">\";\"</span>\r\n            };\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-08-23T17:54:19.94-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "664161",
    "ThreadId": "270087",
    "Html": "<p>yep, you've got it right, that's one way to get rid of conflicts like this - explicitly list the sequences, without optional elements. There's a thread somewhere there, we discuss this approach, and its obvious disadvantages. Another approach, to add conflict resolution based on token preview (problem #32 from suggested list of task to work on, here's discussion:&nbsp;<a href=\"http://irony.codeplex.com/discussions/267217\">http://irony.codeplex.com/discussions/267217</a>). This is a solution for this kind of conflict, first version is already in sources (not in zip), have a look.</p>",
    "PostedDate": "2011-08-26T20:36:12.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]