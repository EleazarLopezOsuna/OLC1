[
  {
    "Id": "812111",
    "ThreadId": "349073",
    "Html": "<p>Yeah, what's wrong with this code?:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">using</span> System;\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\n<span style=\"color: blue;\">using</span> System.Linq;\n<span style=\"color: blue;\">using</span> System.Text;\n<span style=\"color: blue;\">using</span> Irony;\n<span style=\"color: blue;\">using</span> Irony.Ast;\n<span style=\"color: blue;\">using</span> Irony.Parsing;\n\n<span style=\"color: blue;\">namespace</span> SollarScript\n{\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> SollarScriptGrammar : Grammar\n    {\n        <span style=\"color: blue;\">public</span> SollarScriptGrammar()\n        {\n            NonTerminal Program = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Program\"</span>);\n            NonTerminal ClassDeclaration = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"ClassDeclaration\"</span>);\n            NonTerminal CodeBlock = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"CodeBlock\"</span>);\n            NonTerminal Statement = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Statement\"</span>);\n            NonTerminal Expression = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Expression\"</span>);\n            NonTerminal VariableDeclaration = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"VariableDeclaration\"</span>);\n            NonTerminal FunctionDeclaration = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionDeclaration\"</span>);\n            NonTerminal BinaryOp = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"BinaryOp\"</span>);\n            NonTerminal ModifierList = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"ModifierList\"</span>);\n            NonTerminal StatementList = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"StatementList\"</span>);\n            NonTerminal Type = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Type\"</span>);\n            NonTerminal FunctionCall = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionCall\"</span>);\n            NonTerminal FunctionCallParamList = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionCallParamList\"</span>);\n            NonTerminal FunctionCallParam = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionCallParam\"</span>);\n            NonTerminal FunctionDeclarationParamList = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"FunctionDeclarationParamList\"</span>);\n            NonTerminal Return = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Return\"</span>);\n            NonTerminal Assignment = <span style=\"color: blue;\">new</span> NonTerminal(<span style=\"color: #a31515;\">\"Assignment\"</span>);\n\n            Terminal Comment = <span style=\"color: blue;\">new</span> CommentTerminal(<span style=\"color: #a31515;\">\"Comment\"</span>, <span style=\"color: #a31515;\">\"//\"</span>, <span style=\"color: #a31515;\">\"\\n\"</span>);\n            Terminal Identifier = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"Identifier\"</span>, <span style=\"color: #a31515;\">\"[a-zA-Z_][a-zA-Z0-9_]*\"</span>);\n            Terminal Number = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"Number\"</span>, <span style=\"color: #a31515;\">@\"\\b[1-9][0-9]*\\b\"</span>);\n            Terminal DoubleNumber = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"DoubleNumber\"</span>, <span style=\"color: #a31515;\">@\"\\b[1-9][0-9]*\\.[0-9]+\\b\"</span>);\n            Terminal String = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"String\"</span>, <span style=\"color: blue;\">string</span>.Format(<span style=\"color: #a31515;\">@\"\\{0}[^\\{0}]*\\{0}\"</span>, <span style=\"color: #a31515;\">\"\\\"\"</span>));\n            Terminal Modifier = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"Modifier\"</span>, <span style=\"color: #a31515;\">@\"\\b(public|private|placeable)\\b\"</span>);\n            Terminal BuiltinType = <span style=\"color: blue;\">new</span> RegexBasedTerminal(<span style=\"color: #a31515;\">\"BuiltinType\"</span>, <span style=\"color: #a31515;\">@\"\\b(string|int|double|void|short|byte)\\b\"</span>);\n\n            Program.Rule = ClassDeclaration;\n            ClassDeclaration.Rule = ModifierList + <span style=\"color: #a31515;\">\"class\"</span> + Identifier + CodeBlock;\n            CodeBlock.Rule = <span style=\"color: #a31515;\">\"{\"</span> + StatementList + <span style=\"color: #a31515;\">\"}\"</span>;\n            Statement.Rule = VariableDeclaration | FunctionDeclaration | FunctionCall | Return | Assignment;\n            Expression.Rule = String | Number | Identifier | DoubleNumber | Expression + BinaryOp + Expression;\n            VariableDeclaration.Rule = Type + Identifier + <span style=\"color: #a31515;\">\";\"</span> | Type + Identifier + <span style=\"color: #a31515;\">\"=\"</span> + Expression + <span style=\"color: #a31515;\">\";\"</span>;\n            FunctionDeclaration.Rule = ModifierList + Type + Identifier + <span style=\"color: #a31515;\">\"(\"</span> + FunctionDeclarationParamList + <span style=\"color: #a31515;\">\")\"</span> + CodeBlock;\n            BinaryOp.Rule = ToTerm(<span style=\"color: #a31515;\">\"+\"</span>) | ToTerm(<span style=\"color: #a31515;\">\"-\"</span>) | ToTerm(<span style=\"color: #a31515;\">\"*\"</span>) | ToTerm(<span style=\"color: #a31515;\">\"/\"</span>);\n            ModifierList.Rule = MakeStarRule(ModifierList, <span style=\"color: blue;\">null</span>, Modifier);\n            StatementList.Rule = MakeStarRule(StatementList, <span style=\"color: blue;\">null</span>, Statement);\n            Type.Rule = BuiltinType | Identifier;\n            FunctionCall.Rule = Identifier + <span style=\"color: #a31515;\">\"(\"</span> + FunctionCallParamList + <span style=\"color: #a31515;\">\")\"</span> + <span style=\"color: #a31515;\">\";\"</span>;\n            FunctionCallParam.Rule = Expression;\n            FunctionCallParamList.Rule = MakeListRule(FunctionCallParamList, ToTerm(<span style=\"color: #a31515;\">\",\"</span>), FunctionCallParam);\n            FunctionDeclarationParamList.Rule = MakeListRule(FunctionDeclarationParamList, ToTerm(<span style=\"color: #a31515;\">\",\"</span>), VariableDeclaration);\n            Return.Rule = <span style=\"color: #a31515;\">\"return\"</span> + Expression + <span style=\"color: #a31515;\">\";\"</span>;\n            Assignment.Rule = Identifier + <span style=\"color: #a31515;\">\"=\"</span> + Expression + <span style=\"color: #a31515;\">\";\"</span>;\n\n            <span style=\"color: blue;\">this</span>.Root = Program;\n            <span style=\"color: blue;\">base</span>.NonGrammarTerminals.Add(Comment);\n        }\n    }\n}\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>I analyzed this code line by line, I don't see any errors in it.</p>\n<p>This is why it doesn't work:</p>\n<p>I can declare class like that:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">class</span> test\n{\n\n}\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>And it works. But when I want to add some modifiers:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre>placeable <span style=\"color: blue;\">class</span> test\n{\n\n}\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>It gives me errors :(</p>\n<p>Almost everything is not working lol.</p>\n<p>It's my first grammar, so, you know.</p>",
    "PostedDate": "2012-03-18T05:54:57.55-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "812122",
    "ThreadId": "349073",
    "Html": "<p>Hi, two comments if they help.</p>\r\n<p>1. I think you would do well to lose all of the RegexBasedTerminals.&nbsp; Use things like IdentifierTerminal, NumberLiteral and StringLiteral.&nbsp; Dont forget you can specify additional options to make these operate the way you need them to, such as using additional characters. I have not had to use a RegexTerminal yet and I have 6 or so grammars with all their quirks running now.&nbsp; For example I would personally prefer to use something like:</p>\r\n<pre>NonTerminal Modifier = new NonTerminal(\"Modifier\");\r\n\r\nModifier.Rule = ToTerm(\"public\") | \"private\" | \"placeable\";</pre>\r\n<p>2. I think you might have a prioritisation issue.&nbsp; I seem to remember tackling something similar recently where I had a MakeStar list followed by additional stuff that I wasnt bothered about and simply wanted to lose into a FreeTextLiteral.&nbsp; The FreeTextLiteral consumed my list and the MakeStar rule was always empty.&nbsp; I think \"class\" might be doing the same here, except \"class\" is not the same as \"placeable\" and so it fails.&nbsp; Looking at the pattern I used to solve this problem, you&nbsp;might&nbsp;make \"class\" a&nbsp;lower priority. So I imagine that would be something like this:</p>\r\n<pre><pre>Terminal ClassTerm = ToTerm(\"class\");\r\n\r\nClassTerm.Priority = Terminal.LowestPriority;\r\n\r\nClassDeclaration.Rule = ModifierList + ClassTerm + Identifier + CodeBlock;\r\n</pre>\r\n</pre>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-03-18T07:10:00.227-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]