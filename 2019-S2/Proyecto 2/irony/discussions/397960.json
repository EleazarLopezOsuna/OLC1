[
  {
    "Id": "921565",
    "ThreadId": "397960",
    "Html": "\r\n<p>How can I parse a group of items that can be in any order, but only allow 1 of each rule?</p>\r\n<p>With the sql grammar in code for create table there is the 'null/not null' rule. A new rule for something such as 'character set utf8' would be easy to add if it always comes either before or after the 'null/not null' rule. How to handle when it can be in\r\n either place though?</p>\r\n<p>&nbsp;</p>\r\n<p>I tried modifying the sql grammar code slightly like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>createTableStmt.Rule = CREATE &#43; TABLE &#43; Id &#43; <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; fieldDefList &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> &#43; constraintListOpt;\r\n\r\nfieldDefList.Rule = MakePlusRule(fieldDefList, comma, fieldDef);\r\nfieldDef.Rule = Id &#43; typeName &#43; typeParamsOpt &#43; typeOptList;\r\ntypeParamsOpt.Rule = <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; number &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> | <span style=\"color:#a31515\">&quot;(&quot;</span> &#43; number &#43; comma &#43; number &#43; <span style=\"color:#a31515\">&quot;)&quot;</span> | Empty;\r\n\r\ntypeOptList.Rule = MakeStarRule(typeOptList, typeOpt);\r\ntypeOpt.Rule = nullSpecOpt | charsetOpt;\r\nnullSpecOpt.Rule = NULL | <span style=\"color:blue\">NOT</span> &#43; NULL;\r\ncharsetOpt.Rule = <span style=\"color:blue\">CHARACTER <span style=\"color:#000000\">&#43;</span> SET</span> &#43; charset_type;\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>But then something like this parses successfully allowing two nullSpecOpt rules:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">create</span> <span style=\"color:blue\">table</span> test (\r\n charCol <span style=\"color:blue\">VARCHAR</span>(10) <span style=\"color:blue\">NOT</span> <span style=\"color:blue\">NULL</span> <span style=\"color:blue\">CHARACTER</span> <span style=\"color:blue\">SET</span> utf8 <span style=\"color:blue\">NOT</span> <span style=\"color:blue\">NULL</span>\r\n)\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>What is the right way to only allow 1 of each rule in a list and in any order?</p>\r\n",
    "PostedDate": "2012-10-03T15:55:49.563-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921629",
    "ThreadId": "397960",
    "Html": "<p>I would use a simple Set object, in AstNode creation, rather than trying too use the parser explicitly. This is a semantic check more than a gramatical one.</p>\r\n<p>That said, there are circumstances where checks like this are easily done in the parser; but twisting the parser around to achieve this just complicates matters unnecessarily, in my experience.</p>",
    "PostedDate": "2012-10-03T20:32:22.15-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921949",
    "ThreadId": "397960",
    "Html": "<p>yes, things like these - items in any order but 0 or 1 of any kind - these should be handled after parsing, not expressed in grammar rules. In fact, it known that context-free grammars and BNF are really bad at describing/handling \"counting\". The easiest way to handle this is to define the grammar rule as \"list of items\" without restriction on repetition, then hook to Reduced event, and verify in code that there's no more than one instance of any item type in the list</p>\r\n<p>Roman</p>",
    "PostedDate": "2012-10-04T09:19:21.967-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "929076",
    "ThreadId": "397960",
    "Html": "<p>I found I could identify duplicates in the Reduced event. There's probably a better way but this works:</p>\r\n<p>\r\n<pre>var something = new NonTerminal(\"something\");\r\nsomething.Reduced += something_Reduced;</pre>\r\n</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">void</span> something_Reduced(<span style=\"color: blue;\">object</span> sender, ReducedEventArgs e)\r\n{\r\n\tList&lt;<span style=\"color: blue;\">string</span>&gt; items = <span style=\"color: blue;\">new</span> List&lt;<span style=\"color: blue;\">string</span>&gt;();\r\n\t<span style=\"color: blue;\">foreach</span>(<span style=\"color: blue;\">var</span> child <span style=\"color: blue;\">in</span> e.ResultNode.ChildNodes) {\r\n\t\t<span style=\"color: blue;\">if</span>(items.Contains(child.ToString()))\r\n\t\t\te.Context.AddParserError(<span style=\"color: #a31515;\">\"Duplicate option \"</span> + ((child.Term <span style=\"color: blue;\">is</span> NonTerminal &amp;&amp; !String.IsNullOrEmpty(child.Term.ErrorAlias)) ? child.Term.ErrorAlias : child.ToString());\r\n\t\t<span style=\"color: blue;\">else</span>\r\n\t\t\titems.Add(child.ToString());\r\n\t}\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-18T15:56:44.863-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]