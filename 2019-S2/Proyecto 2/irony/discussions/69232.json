[
  {
    "Id": "235547",
    "ThreadId": "69232",
    "Html": "<p>I'm a newbie to Irony, but so far I am very impressed.&nbsp; One thing that seems to be missing however are Date Literals.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>In languages such as Visual Basic (VBA, VB6, and VB.NET), you can enter a date as #12/25/2009# and this would be equivalent to new DateTime(2009, 12, 25).&nbsp; Here is some information from the MSDN concerning Literal Dates in Visual Basic - <a title=\"http://msdn.microsoft.com/en-us/library/3eaydw6e%28VS.100%29.aspx\" href=\"http://msdn.microsoft.com/en-us/library/3eaydw6e(VS.100).aspx\">http://msdn.microsoft.com/en-us/library/3eaydw6e%28VS.100%29.aspx</a>.</p>\r\n<p>If someone already has this functionality and doesn't mind sharing with the rest of the Irony community, I'm sure it would be greatly appreciated.</p>\r\n<p>Thanks,</p>\r\n<p>Kevin</p>",
    "PostedDate": "2009-09-17T05:47:06.753-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "235681",
    "ThreadId": "69232",
    "Html": "<p>Yeah, you're right, it's not there. I will try to add such a terminal in the next code drop.</p>\r\n<p>For now you can just create it yourself. Create DateLiteral class inherited from Terminal. Follow the same pattern as in RegexLiteral, it is very similar, it contains predefined start/end symbols (# instead of /); as the last step convert the string value to DateTime and put it into Token.Value.</p>",
    "PostedDate": "2009-09-17T10:19:17.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "238377",
    "ThreadId": "69232",
    "Html": "<p>Here is my implementation of a DateTimeLiteral. I added the ability to have differing start and end symbols as the project I am working on uses a { to start and a } to end.&nbsp; Feedback would be greatly appreciated.</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>  <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> DateTimeLiteral : Terminal\r\n  </span>{\r\n    <span style=\"color:Blue\">public</span> DateTimeStyles Styles = DateTimeStyles.None;\r\n    <span style=\"color:Blue\">public</span> IFormatProvider Format = CultureInfo.InvariantCulture;\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">char</span> StartSymbol = <span style=\"color:#A31515\">'#'</span>;\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">char</span> EndSymbol = <span style=\"color:#A31515\">'#'</span>;\r\n\r\n    <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">char</span>[] _stopChars;\r\n\r\n    <span style=\"color:Blue\">public</span> DateTimeLiteral(<span style=\"color:Blue\">string</span> name)\r\n      : <span style=\"color:Blue\">base</span>(name, TokenCategory.Literal) { }\r\n\r\n    <span style=\"color:Blue\">public</span> DateTimeLiteral(<span style=\"color:Blue\">string</span> name, <span style=\"color:Blue\">char</span> startSymbol, <span style=\"color:Blue\">char</span> endSymbol)\r\n      : <span style=\"color:Blue\">base</span>(name, TokenCategory.Literal)\r\n    {\r\n      StartSymbol = startSymbol;\r\n      EndSymbol = endSymbol;\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> DateTimeLiteral(<span style=\"color:Blue\">string</span> name, <span style=\"color:Blue\">char</span> symbol)\r\n      : <span style=\"color:Blue\">this</span>(name, symbol, symbol) { }\r\n\r\n    <span style=\"color:Blue\">public</span> DateTimeLiteral(<span style=\"color:Blue\">string</span> name, <span style=\"color:Blue\">char</span> startSymbol, <span style=\"color:Blue\">char</span> endSymbol, IFormatProvider format, DateTimeStyles styles)\r\n      : <span style=\"color:Blue\">base</span>(name, TokenCategory.Literal)\r\n    {\r\n      StartSymbol = startSymbol;\r\n      EndSymbol = endSymbol;\r\n      Format = format;\r\n      Styles = styles;\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> DateTimeLiteral(<span style=\"color:Blue\">string</span> name, <span style=\"color:Blue\">char</span> startSymbol, <span style=\"color:Blue\">char</span> endSymbol, DateTimeStyles styles)\r\n      : <span style=\"color:Blue\">this</span>(name, startSymbol, endSymbol, CultureInfo.InvariantCulture, styles) { }\r\n\r\n    <span style=\"color:Blue\">public</span> DateTimeLiteral(<span style=\"color:Blue\">string</span> name, <span style=\"color:Blue\">char</span> startSymbol, <span style=\"color:Blue\">char</span> endSymbol, IFormatProvider format)\r\n      : <span style=\"color:Blue\">this</span>(name, startSymbol, endSymbol, format, DateTimeStyles.None) { }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> Init(GrammarData grammarData)\r\n    {\r\n      <span style=\"color:Blue\">base</span>.Init(grammarData);\r\n      _stopChars = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">char</span>[] { EndSymbol, <span style=\"color:#A31515\">'\\r'</span>, <span style=\"color:#A31515\">'\\n'</span> };\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> IList&lt;<span style=\"color:Blue\">string</span>&gt; GetFirsts()\r\n    {\r\n      <span style=\"color:Blue\">var</span> result = <span style=\"color:Blue\">new</span> StringList();\r\n      result.Add(StartSymbol.ToString());\r\n      <span style=\"color:Blue\">return</span> result;\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> Token TryMatch(ParsingContext context, ISourceStream source)\r\n    {\r\n      <span style=\"color:Green\">//Find next position</span>\r\n      <span style=\"color:Blue\">var</span> newPos = source.Text.IndexOfAny(_stopChars, source.PreviewPosition + 1);\r\n\r\n      <span style=\"color:Blue\">if</span> (newPos == -1)\r\n        <span style=\"color:Blue\">return</span> source.CreateErrorToken(String.Format(<span style=\"color:#A31515\">&quot;A DateTime Literal must end with a '{0}'.&quot;</span>, EndSymbol.ToString()));\r\n\r\n      source.PreviewPosition = newPos;\r\n      <span style=\"color:Blue\">if</span> (source.PreviewChar != EndSymbol)\r\n        <span style=\"color:Green\">//we hit CR or LF before the end symbol, this is an error</span>\r\n        <span style=\"color:Blue\">return</span> source.CreateErrorToken(String.Format(<span style=\"color:#A31515\">&quot;A DateTime Literal must end with a '{0}'.&quot;</span>, EndSymbol.ToString()));\r\n\r\n      source.PreviewPosition++; <span style=\"color:Green\">//move after end symbol</span>\r\n\r\n      <span style=\"color:Green\">// we will need the length of the DateTime string</span>\r\n      <span style=\"color:Blue\">var</span> lngth = source.PreviewPosition - source.Location.Position - 2; <span style=\"color:Green\">//exclude end symbol</span>\r\n\r\n      <span style=\"color:Blue\">var</span> token = source.CreateToken(<span style=\"color:Blue\">this</span>);\r\n\r\n      <span style=\"color:Green\">//we have token, now what's left is to set its Value field.</span>\r\n      <span style=\"color:Blue\">string</span> str = token.Text.Substring(1, lngth); <span style=\"color:Green\">//exclude start symbol</span>\r\n      DateTime value = DateTime.MinValue;\r\n\r\n      <span style=\"color:Blue\">if</span> (!DateTime.TryParse(str, Format, Styles, <span style=\"color:Blue\">out</span> value))\r\n      {\r\n        <span style=\"color:Blue\">return</span> source.CreateErrorToken(<span style=\"color:#A31515\">&quot;Can not convert '{0}' into a DateTime value&quot;</span>, str);\r\n      }\r\n\r\n      token.Value = value;\r\n      <span style=\"color:Blue\">return</span> token;\r\n    }\r\n\r\n  }\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-09-24T09:37:59.307-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "238420",
    "ThreadId": "69232",
    "Html": "<p>There may be one problem. The token.Text property should include all symbols &quot;covered&quot; by token, so start/end symbol should be included; otherwise scanner may be confused and get an error when it&nbsp;incorrectly advances the current position after you return the token to it. The token.Value on the other hand might contain whatever you want or need it to contain. Have a close look&nbsp;at RegExLiteral implementation.</p>\r\n<p>Roman</p>",
    "PostedDate": "2009-09-24T10:43:21.463-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]