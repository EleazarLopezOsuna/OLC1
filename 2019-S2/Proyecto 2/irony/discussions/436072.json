[
  {
    "Id": "1012990",
    "ThreadId": "436072",
    "Html": "I've run into a very strange problem with a grammer I'm working on:\r<br />\n<br />\nThe grammer is:<br />\n<pre><code>    public class MyGrammar : Grammar\n    {\n        public MyGrammar()\n        {\n            var expr = new NonTerminal(&quot;expr&quot;); \n            var exp0 = new NonTerminal(&quot;exp0&quot;);\n            var exp = new NonTerminal(&quot;exp&quot;);\n\n            var ID = new IdentifierTerminal(&quot;id&quot;);\n            var NUMBER = new NumberLiteral(&quot;number&quot;, NumberOptions.AllowSign);\n            var COMMA = ToTerm(&quot;,&quot;);\n            var ASSIGN = ToTerm(&quot;=&quot;);\n            var PLUS = ToTerm(&quot;+&quot;);\n            var MINUS = ToTerm(&quot;-&quot;);\n            var TIMES = ToTerm(&quot;*&quot;);\n            var DIV = ToTerm(&quot;/&quot;);\n\n            RegisterOperators(1, ASSIGN);\n            RegisterOperators(30, PLUS, MINUS);\n            RegisterOperators(40, TIMES, DIV);\n\n            var assign = new NonTerminal(&quot;assign&quot;);\n            assign.Rule = ID + ASSIGN + expr;\n\n            var exps = new NonTerminal(&quot;exps&quot;);\n            exps.Rule = MakeStarRule(exps, COMMA, expr);\n\n            var apply = new NonTerminal(&quot;apply&quot;);\n            apply.Rule = (exp0 + &quot;(&quot; + exps + &quot;)&quot;);\n\n            exp0.Rule = \n                &quot;(&quot; + expr + &quot;)&quot;\n                | ID\n                | apply;\n\n            var binOp = new NonTerminal(&quot;binop&quot;);\n            binOp.Rule = TIMES | DIV | PLUS | MINUS;\n\n            var infixOp = new NonTerminal(&quot;infix&quot;);\n            infixOp.Rule = exp + binOp + exp;\n            exp.Rule = exp0 \n                | infixOp\n                | assign\n                |NUMBER;\n            expr.Rule = exp;\n\n            MarkPunctuation(&quot;(&quot;, &quot;)&quot;);\n            RegisterBracePair(&quot;(&quot;, &quot;)&quot;);\n            MarkPunctuation(COMMA);\n            this.MarkTransient(binOp);\n\n            this.Root = expr;\n        }\n   }</code></pre>\n\nAnd it fails on this expression:<br />\n<pre><code>f(a-1)+f(a-1)</code></pre>\n\nwith error: Syntax error, expected: ,, )\r<br />\n(the error happens on the second '-')<br />\n<ul>\n<li>If I remove the <strong>MarkTransient(binOp)</strong> statement I don't get an error on the expression, but then the operator precedence does not work.</li>\n<li>\nIf I change the Rule of infixOp to  <strong>expr + binOp + expr</strong> then I don't get the error, but I can't use this solution because in the actual grammer the rule of expr is more complicated.<br />\n</li>\n</ul>\nCan some body help me with this problem?\r<br />\n<br />\nThanks,\r<br />\n<br />\nNadav<br />\n",
    "PostedDate": "2013-03-10T12:56:49.603-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013002",
    "ThreadId": "436072",
    "Html": "shouldn't infixOp be:\r<br />\n   plusMinus + expr\r<br />\n?\r<br />\nwhere plusMinus is &quot;+&quot; | &quot;-&quot;\r<br />\n<br />\nNext, if you treat '-5' as infix op applied to 5, then remove AllowSign from NumberLiteral. It's either one or another. That's most likely what happens, parser recognizes -1 as signed number.\r<br />\nfinally give better names to variables (exp, expr, exp0) are not very descriptive. \r<br />\nOnce you finished, run Grammar explorer and check grammar errors- do you have any conflicts?<br />\n",
    "PostedDate": "2013-03-10T13:25:39.803-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013029",
    "ThreadId": "436072",
    "Html": "Hi Rivantsov,<br />\nThanks for your reply.<br />\n<br />\na. I have run Grammer explorer on my grammer and there are no conflicts (that was the first thing I did)<br />\nb. the problem is not the minus sign before the number. <br />\nMy grammer correctly parses a-1 as infixOp with left operand a, operator '-' and right operand 1.<br />\nAlso I get the same error if I try to parse <strong>a*f(b*c)</strong><br />\n<br />\nThe problem seems to happen when the operator before the function has the same precedence or a higher precedence than the operator inside the ( ).<br />\ni.e. <strong>a*f(b*c)</strong> fails, <strong>a*f(b+c)</strong> fails, <strong>a+f(b*c)</strong> parses correctly.<br />\n<br />\nAlso when I look at the parser trace I see that when the parsing succeeds the parser reduces the '*' between b &amp; c to binOp.<br />\nWhen the parsing fails the parser performs a precedence comparison, which returns TRUE and the parser reduce to expr which does not look right to me...<br />\n<br />\nNadav<br />\n",
    "PostedDate": "2013-03-10T16:09:14.653-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013062",
    "ThreadId": "436072",
    "Html": "sorry, was wrong about infix op, confused with prefix op.\r<br />\nyes, it looks like it is related to precedence, it is being invoked in wrong place. Surprisingly similar arrangement works well in ExpressionEvaluator grammar. \r<br />\nTry \r<br />\n 2 * abs(5-1)\r<br />\nparses/executes successfully in sampleExprEvaluator, but fails to parse in your grammar\r<br />\ntrying to understand what is so different. \r<br />\nBy the way, I think I found a bug while investigating this. In PrecedenceBasedParserAction.CheckMustReduce, the method should not look at entire stack, but only at the length of reduce production. Fixing this would most likely fix your problem (but it requires making method non-static), but then again - why it works ok in expr evaluator? \r<br />\n<br />\nRoman <br />\n",
    "PostedDate": "2013-03-10T20:03:37.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013064",
    "ThreadId": "436072",
    "Html": "Ok, it's a bug, here's quick fix. Replace PrecedenceBasedParserAction.CheckMustReduce with the folllowing:<br />\n<pre><code>    private bool CheckMustReduce(ParsingContext context) {\n      var input = context.CurrentParserInput;\n      var stackCount = context.ParserStack.Count;\n      var prodLength = _reduceAction.Production.RValues.Count;\n      for (int i = 1; i &lt;= prodLength; i++) {\n        var prevNode = context.ParserStack[stackCount - i];\n        if (prevNode == null) continue;\n        if (prevNode.Precedence == BnfTerm.NoPrecedence) continue;\n        //if previous operator has the same precedence then use associativity\n        if (prevNode.Precedence == input.Precedence)\n          return (input.Associativity == Associativity.Left); //if true then Reduce\n        else\n          return (prevNode.Precedence &gt; input.Precedence); //if true then Reduce\n      }\n      //If no operators found on the stack, do shift\n      return false;\n    }\n</code></pre>\n\nI'm still trying to see why it worked ok in expr evaluator. I will push the fix later\r<br />\nthank you\r<br />\nRoman<br />\n",
    "PostedDate": "2013-03-10T20:32:19.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013087",
    "ThreadId": "436072",
    "Html": "\r\n<div>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Hi </span><span style=\"font-size:9.0pt; font-family:\">Rivantsov,</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Thanks for the quick response, I'll try it tonight and see if it solves the problem.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">I have to say, I've only been using Irony for 2 days, but so far it looks great!</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">The grammar explorer is brilliant!</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">I've been porting a grammar I've implemented using another tool to Irony and after 1 day of work it's practically finished (including building the AST).</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Thanks,</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Nadav</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<div>\r\n<div style=\"border:none; border-top:solid #B5C4DF 1.0pt; padding:3.0pt 0cm 0cm 0cm\">\r\n<p><b><span style=\"font-size:10.0pt; font-family:\">From:</span></b><span style=\"font-size:10.0pt; font-family:\"> rivantsov [email removed]\r\n<br>\r\n<b>Sent:</b> Monday, March 11, 2013 5:32 AM<br>\r\n<b>To:</b> Nadav Popplewell<br>\r\n<b>Subject:</b> Re: Strange problem with simple grammer [irony:436072]</span></p>\r\n</div>\r\n</div>\r\n<p></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">From: rivantsov</span></p>\r\n<div id=\"ThreadNotificationPostBody\" style=\"margin-bottom:24.0pt\">\r\n<p><span style=\"font-size:9.0pt; font-family:\">Ok, it's a bug, here's quick fix. Replace PrecedenceBasedParserAction.CheckMustReduce with the folllowing:</span></p>\r\n<pre><code><span style=\"font-size:10.0pt\">    private bool CheckMustReduce(ParsingContext context) {</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      var input = context.CurrentParserInput;</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      var stackCount = context.ParserStack.Count;</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      var prodLength = _reduceAction.Production.RValues.Count;</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      for (int i = 1; i &lt;= prodLength; i&#43;&#43;) {</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">        var prevNode = context.ParserStack[stackCount - i];</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">        if (prevNode == null) continue;</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">        if (prevNode.Precedence == BnfTerm.NoPrecedence) continue;</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">        //if previous operator has the same precedence then use associativity</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">        if (prevNode.Precedence == input.Precedence)</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">          return (input.Associativity == Associativity.Left); //if true then Reduce</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">        else</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">          return (prevNode.Precedence &gt; input.Precedence); //if true then Reduce</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      }</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      //If no operators found on the stack, do shift</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      return false;</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">    }</span></code></pre>\r\n<p><span style=\"font-size:9.0pt; font-family:\">I'm still trying to see why it worked ok in expr evaluator. I will push the fix later\r\n<br>\r\nthank you <br>\r\nRoman</span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-03-10T23:30:52.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013215",
    "ThreadId": "436072",
    "Html": "Hi Nadav,\r<br />\n<br />\nI didn't understand the need for &quot;expr&quot;, so I removed it and it just works:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n        <span style=\"color:Blue;\">public</span> MyGrammar()\n        {\n            <span style=\"color:Blue;\">var</span> exp0 = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;exp0&quot;</span>);\n            <span style=\"color:Blue;\">var</span> exp = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;exp&quot;</span>);\n\n            <span style=\"color:Blue;\">var</span> ID = <span style=\"color:Blue;\">new</span> IdentifierTerminal(<span style=\"color:#A31515;\">&quot;id&quot;</span>);\n            <span style=\"color:Blue;\">var</span> NUMBER = <span style=\"color:Blue;\">new</span> NumberLiteral(<span style=\"color:#A31515;\">&quot;number&quot;</span>, NumberOptions.AllowSign);\n            <span style=\"color:Blue;\">var</span> COMMA = ToTerm(<span style=\"color:#A31515;\">&quot;,&quot;</span>);\n            <span style=\"color:Blue;\">var</span> ASSIGN = ToTerm(<span style=\"color:#A31515;\">&quot;=&quot;</span>);\n            <span style=\"color:Blue;\">var</span> PLUS = ToTerm(<span style=\"color:#A31515;\">&quot;+&quot;</span>);\n            <span style=\"color:Blue;\">var</span> MINUS = ToTerm(<span style=\"color:#A31515;\">&quot;-&quot;</span>);\n            <span style=\"color:Blue;\">var</span> TIMES = ToTerm(<span style=\"color:#A31515;\">&quot;*&quot;</span>);\n            <span style=\"color:Blue;\">var</span> DIV = ToTerm(<span style=\"color:#A31515;\">&quot;/&quot;</span>);\n\n            RegisterOperators(1, ASSIGN);\n            RegisterOperators(30, PLUS, MINUS);\n            RegisterOperators(40, TIMES, DIV);\n\n            <span style=\"color:Blue;\">var</span> assign = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;assign&quot;</span>);\n            assign.Rule = ID + ASSIGN + exp;\n\n            <span style=\"color:Blue;\">var</span> exps = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;exps&quot;</span>);\n            exps.Rule = MakeStarRule(exps, COMMA, exp);\n\n            <span style=\"color:Blue;\">var</span> apply = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;apply&quot;</span>);\n            apply.Rule = (exp0 + <span style=\"color:#A31515;\">&quot;(&quot;</span> + exps + <span style=\"color:#A31515;\">&quot;)&quot;</span>);\n\n            exp0.Rule =\n                <span style=\"color:#A31515;\">&quot;(&quot;</span> + exp + <span style=\"color:#A31515;\">&quot;)&quot;</span>\n                | ID\n                | apply;\n\n            <span style=\"color:Blue;\">var</span> binOp = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;binop&quot;</span>);\n            binOp.Rule = TIMES | DIV | PLUS | MINUS;\n\n            <span style=\"color:Blue;\">var</span> infixOp = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;infix&quot;</span>);\n            infixOp.Rule = exp + binOp + exp;\n            exp.Rule = exp0\n                | infixOp\n                | assign\n                | NUMBER;\n\n            MarkPunctuation(<span style=\"color:#A31515;\">&quot;(&quot;</span>, <span style=\"color:#A31515;\">&quot;)&quot;</span>);\n            RegisterBracePair(<span style=\"color:#A31515;\">&quot;(&quot;</span>, <span style=\"color:#A31515;\">&quot;)&quot;</span>);\n\n            MarkPunctuation(COMMA);\n            <span style=\"color:Blue;\">this</span>.MarkTransient(binOp);\n\n            <span style=\"color:Blue;\">this</span>.Root = exp;\n        }\n    }\r\n</pre></div>Cheers,\r<br />\nDaniel<br />\n",
    "PostedDate": "2013-03-11T05:44:14.523-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013221",
    "ThreadId": "436072",
    "Html": "\r\n<div>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Yes, I know that if you remove expr the program is solved.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">It's also solved if you replace </span>\r\n<b><span style=\"font-size:11.5pt; color:black\">infixOp.Rule = exp &#43; binOp &#43; exp</span></b><span style=\"font-size:11.5pt; color:black\"> with\r\n<b>infixOp.Rule = expr &#43; binOp &#43; expr </b></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">(Which I find strange because if expr.Rule=exp then\r\n<b>exp&#43;binOp&#43;exp</b> should be the same as <b>expr&#43;binOp&#43;expr</b>, right?)</span><span style=\"font-size:11.5pt; color:black\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Anyway, Expr is there because the grammar is part of a bigger grammar where there are statements that are valid in a statement (or inside (..)) that not valid as an operand to a binary operator.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">(for example, in the bigger grammar I use\r\n<b>with id1=exp1,id2=exp2 do exp3 </b>to define temp variables)</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">And even if expr is not needed, the grammar is still valid and has no conflicts so it should work…</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Nadav</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<div>\r\n<div style=\"border:none; border-top:solid #B5C4DF 1.0pt; padding:3.0pt 0cm 0cm 0cm\">\r\n<p><b><span style=\"font-size:10.0pt; font-family:\">From:</span></b><span style=\"font-size:10.0pt; font-family:\"> dkuppitz [email removed]\r\n<br>\r\n<b>Sent:</b> Monday, March 11, 2013 2:44 PM<br>\r\n<b>To:</b> Nadav Popplewell<br>\r\n<b>Subject:</b> Re: Strange problem with simple grammer [irony:436072]</span></p>\r\n</div>\r\n</div>\r\n<p></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">From: dkuppitz</span></p>\r\n<div id=\"ThreadNotificationPostBody\" style=\"margin-bottom:24.0pt\">\r\n<p><span style=\"font-size:9.0pt; font-family:\">Hi Nadav, <br>\r\n<br>\r\nI didn't understand the need for &quot;expr&quot;, so I removed it and it just works:</span></p>\r\n<div>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">        </span><span style=\"font-size:11.5pt; color:blue\">public</span><span style=\"font-size:11.5pt; color:black\"> MyGrammar()</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">        {</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> exp0 = </span><span style=\"font-size:11.5pt; color:blue\">new</span><span style=\"font-size:11.5pt; color:black\"> NonTerminal(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;exp0&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> exp = </span><span style=\"font-size:11.5pt; color:blue\">new</span><span style=\"font-size:11.5pt; color:black\"> NonTerminal(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;exp&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> ID = </span><span style=\"font-size:11.5pt; color:blue\">new</span><span style=\"font-size:11.5pt; color:black\"> IdentifierTerminal(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;id&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> NUMBER = </span><span style=\"font-size:11.5pt; color:blue\">new</span><span style=\"font-size:11.5pt; color:black\"> NumberLiteral(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;number&quot;</span><span style=\"font-size:11.5pt; color:black\">, NumberOptions.AllowSign);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> COMMA = ToTerm(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;,&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> ASSIGN = ToTerm(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;=&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> PLUS = ToTerm(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;&#43;&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> MINUS = ToTerm(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;-&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> TIMES = ToTerm(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;*&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> DIV = ToTerm(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;/&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            RegisterOperators(1, ASSIGN);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            RegisterOperators(30, PLUS, MINUS);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            RegisterOperators(40, TIMES, DIV);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> assign = </span><span style=\"font-size:11.5pt; color:blue\">new</span><span style=\"font-size:11.5pt; color:black\"> NonTerminal(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;assign&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            assign.Rule = ID &#43; ASSIGN &#43; exp;</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> exps = </span><span style=\"font-size:11.5pt; color:blue\">new</span><span style=\"font-size:11.5pt; color:black\"> NonTerminal(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;exps&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            exps.Rule = MakeStarRule(exps, COMMA, exp);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> apply = </span><span style=\"font-size:11.5pt; color:blue\">new</span><span style=\"font-size:11.5pt; color:black\"> NonTerminal(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;apply&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            apply.Rule = (exp0 &#43; </span><span style=\"font-size:11.5pt; color:#A31515\">&quot;(&quot;</span><span style=\"font-size:11.5pt; color:black\"> &#43; exps &#43; </span><span style=\"font-size:11.5pt; color:#A31515\">&quot;)&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            exp0.Rule =</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">                </span><span style=\"font-size:11.5pt; color:#A31515\">&quot;(&quot;</span><span style=\"font-size:11.5pt; color:black\"> &#43; exp &#43; </span><span style=\"font-size:11.5pt; color:#A31515\">&quot;)&quot;</span><span style=\"font-size:11.5pt; color:black\"></span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">                | ID</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">                | apply;</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> binOp = </span><span style=\"font-size:11.5pt; color:blue\">new</span><span style=\"font-size:11.5pt; color:black\"> NonTerminal(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;binop&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            binOp.Rule = TIMES | DIV | PLUS | MINUS;</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">var</span><span style=\"font-size:11.5pt; color:black\"> infixOp = </span><span style=\"font-size:11.5pt; color:blue\">new</span><span style=\"font-size:11.5pt; color:black\"> NonTerminal(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;infix&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            infixOp.Rule = exp &#43; binOp &#43; exp;</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            exp.Rule = exp0</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">                | infixOp</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">                | assign</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">                | NUMBER;</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            MarkPunctuation(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;(&quot;</span><span style=\"font-size:11.5pt; color:black\">, </span><span style=\"font-size:11.5pt; color:#A31515\">&quot;)&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            RegisterBracePair(</span><span style=\"font-size:11.5pt; color:#A31515\">&quot;(&quot;</span><span style=\"font-size:11.5pt; color:black\">, </span><span style=\"font-size:11.5pt; color:#A31515\">&quot;)&quot;</span><span style=\"font-size:11.5pt; color:black\">);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            MarkPunctuation(COMMA);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">this</span><span style=\"font-size:11.5pt; color:black\">.MarkTransient(binOp);</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\"> </span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">            </span><span style=\"font-size:11.5pt; color:blue\">this</span><span style=\"font-size:11.5pt; color:black\">.Root = exp;</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">        }</span></pre>\r\n<pre style=\"background:white\"><span style=\"font-size:11.5pt; color:black\">    }</span></pre>\r\n</div>\r\n<p><span style=\"font-size:9.0pt; font-family:\">Cheers, <br>\r\nDaniel</span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-03-11T05:59:02.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013341",
    "ThreadId": "436072",
    "Html": "Hi Rivantsov,\r<br />\n<br />\nI've tested the bug fix and it works great.\r<br />\n<br />\nI've managed to parse all the test cases I've got for the my language.\r<br />\nWell, almost :)\r<br />\nThere still is one problem (that is not related to this problem).\r<br />\nIn my langauge there are two keyworks: <strong>with</strong> &amp; <strong>with*</strong>\r<br />\nI defined <br />\n<pre><code>var TIMES=ToTerm(&quot;*&quot;);\nvar WITH=ToTerm(&quot;with&quot;);\nvar WITHREC=ToTerm(&quot;with*&quot;);</code></pre>\n\nbut Irony parses <strong>with*</strong> as <strong>WITH+TIMES</strong> instead of <strong>WITHREC</strong>\r<br />\nIs there any way around this?\r<br />\n<br />\n(Right now I just changed replaced WITHREC with WITH+TIMES in all the rules that use it and it works, but it also accepts <strong>with *</strong>, which it shouldn't... )\r<br />\n<br />\nThanks,\r<br />\nNadav<br />\n",
    "PostedDate": "2013-03-11T09:45:38.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013346",
    "ThreadId": "436072",
    "Html": "I guess the parser prefers by default to treat 'with' as variable and '<em>' as operator. Try declaring 'with</em>' as reserved word using MarkReservedWords\r<br />\nRoman<br />\n",
    "PostedDate": "2013-03-11T09:50:37.98-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013376",
    "ThreadId": "436072",
    "Html": "\r\n<div style=\"direction:ltr; font-family:Tahoma; color:#000000; font-size:10pt\">No, it didn't fix it.<br>\r\n<br>\r\nNadav<br>\r\n<br>\r\n<div style=\"font-family:Times New Roman; color:#000000; font-size:16px\">\r\n<hr tabindex=\"-1\">\r\n<div id=\"divRpF506444\" style=\"direction:ltr\"><font color=\"#000000\" face=\"Tahoma\" size=\"2\"><b>From:</b> rivantsov [notifications@codeplex.com]<br>\r\n<b>Sent:</b> Monday, March 11, 2013 6:52 PM<br>\r\n<b>To:</b> Nadav Popplewell<br>\r\n<b>Subject:</b> Re: Strange problem with simple grammer [irony:436072]<br>\r\n</font><br>\r\n</div>\r\n<div></div>\r\n<div>\r\n<p>From: rivantsov</p>\r\n<div id=\"ThreadNotificationPostBody\">I guess the parser prefers by default to treat 'with' as variable and '*' as operator. Try declaring 'with*' as reserved word using MarkReservedWords\r\n<br>\r\nRoman<br>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-03-11T10:19:22.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013669",
    "ThreadId": "436072",
    "Html": "hmm.. here's what I did. added two new expressions to grammar:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n      <span style=\"color:Blue;\">var</span> WITH = ToTerm(<span style=\"color:#A31515;\">&quot;with&quot;</span>);\n      <span style=\"color:Blue;\">var</span> WITHREC = ToTerm(<span style=\"color:#A31515;\">&quot;with*&quot;</span>);\n      MarkReservedWords(<span style=\"color:#A31515;\">&quot;with*&quot;</span>);\n      <span style=\"color:Blue;\">var</span> withOp = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;withOp&quot;</span>);\n      withOp.Rule = WITH + TIMES + ID;\n      <span style=\"color:Blue;\">var</span> withRecOp = <span style=\"color:Blue;\">new</span> NonTerminal(<span style=\"color:#A31515;\">&quot;withRecOp&quot;</span>);\n      withRecOp.Rule = WITHREC + ID;\n\n      exp.Rule = exp0\n          | infixOp\n          | assign\n          | NUMBER\n          | withOp\n          | withRecOp;\n      expr.Rule = exp;\n\r\n</pre></div>and everything just works, I've tried with the following input:<br />\n<br />\n<strong>f(with * me, with* u)</strong><br />\n<br />\nthe first arg shows as &quot;withOp&quot;, the second as &quot;withRecOp&quot;<br />\n",
    "PostedDate": "2013-03-11T22:15:56.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013704",
    "ThreadId": "436072",
    "Html": "\r\n<div>\r\n<p><span style=\"font-size:11.0pt; font-family:\">I'll try it again…</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Thanks,</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Nadav</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<div>\r\n<div style=\"border:none; border-top:solid #B5C4DF 1.0pt; padding:3.0pt 0cm 0cm 0cm\">\r\n<p><b><span style=\"font-size:10.0pt; font-family:\">From:</span></b><span style=\"font-size:10.0pt; font-family:\"> rivantsov [email removed]\r\n<br>\r\n<b>Sent:</b> Tuesday, March 12, 2013 7:16 AM<br>\r\n<b>To:</b> Nadav Popplewell<br>\r\n<b>Subject:</b> Re: Strange problem with simple grammer [irony:436072]</span></p>\r\n</div>\r\n</div>\r\n<p></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">From: rivantsov</span></p>\r\n<div id=\"ThreadNotificationPostBody\" style=\"margin-bottom:24.0pt\">\r\n<p><span style=\"font-size:9.0pt; font-family:\">hmm.. here's what I did. added two new expressions to grammar:</span></p>\r\n<pre><code><span style=\"font-size:10.0pt\">      var WITH = ToTerm(&quot;with&quot;);</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      var WITHREC = ToTerm(&quot;with*&quot;);</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      MarkReservedWords(&quot;with*&quot;);</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      var withOp = new NonTerminal(&quot;withOp&quot;);</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      withOp.Rule = WITH &#43; TIMES &#43; ID;</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      var withRecOp = new NonTerminal(&quot;withRecOp&quot;);</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      withRecOp.Rule = WITHREC &#43; ID;</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\"> </span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      exp.Rule = exp0</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">          | infixOp</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">          | assign</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">          | NUMBER</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">          | withOp</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">          | withRecOp;</span></code></pre>\r\n<pre><code><span style=\"font-size:10.0pt\">      expr.Rule = exp;</span></code></pre>\r\n<p><span style=\"font-size:9.0pt; font-family:\">and everything just works, I've tried with the following input:\r\n<br>\r\n<br>\r\nf(with * me, with* u)<br>\r\n<br>\r\nthe first arg shows as &quot;withOp&quot;, the second as &quot;withRecOp&quot;</span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-03-12T00:09:42.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013706",
    "ThreadId": "436072",
    "Html": "yeah, here's what happens without MarkReservedWorsd:\r<br />\nInput :\r<br />\n  with* me\r<br />\n<br />\n'with' is initially scanned as &quot;id&quot; (variable), so the expression is interpreted as [id multOp id] - completely valid in your grammar. 'with*' keyword is not even checked - Id matches input, because identifiers have higher priority than keywords (but not reserved words). So scanner recognizes 'with' as identifier; then later it is matched against keyword list, and the Term is replaced with Keyword. \r<br />\nThat arrangement seems strange (a bit), but it is like this because it works better for most common cases - made this way based on many try/fails to find 'best' solution working in most cases, without extra tuning. For cases like yours, you can use Reserved words facility - these are tried first, they have higher priority, and it would work as expected for you\r<br />\nRoman<br />\n",
    "PostedDate": "2013-03-12T00:13:51.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1014341",
    "ThreadId": "436072",
    "Html": "Hi Roman,\r<br />\n<br />\nI tried it and it works.\r<br />\n(I don't know why it didn't work when I tried it before).\r<br />\n<br />\nThanks,\r<br />\n<br />\nNadav<br />\n",
    "PostedDate": "2013-03-12T22:38:37.587-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]