[
  {
    "Id": "286673",
    "ThreadId": "83375",
    "Html": "<p>Hi, Roman!</p>\r\n<p>I found a bug in a line/column counters which occurs when the grammar uses FreeTextLiteral with ConsumeTerminator option set. Consider the following sample program:</p>\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> Irony.Ast;\r\n<span style=\"color:Blue\">using</span> Irony.Parsing;\r\n\r\n<span style=\"color:Blue\">class</span> SampleGrammar : Grammar\r\n{\r\n  <span style=\"color:Blue\">public</span> SampleGrammar(<span style=\"color:Blue\">bool</span> consumeTerminator) : <span style=\"color:Blue\">base</span>(<span style=\"color:Blue\">true</span>)\r\n  {\r\n    <span style=\"color:Blue\">var</span> FreeText = <span style=\"color:Blue\">new</span> FreeTextLiteral(<span style=\"color:#A31515\">&quot;FreeText&quot;</span>);\r\n    FreeText.Terminators.AddRange(<span style=\"color:#A31515\">&quot;\\r&quot;</span>, <span style=\"color:#A31515\">&quot;\\n&quot;</span>);\r\n    FreeText.FreeTextOptions |= FreeTextOptions.AllowEof;\r\n\r\n    <span style=\"color:Blue\">if</span> (consumeTerminator)\r\n      FreeText.FreeTextOptions |= FreeTextOptions.ConsumeTerminator;\r\n\r\n    <span style=\"color:Blue\">var</span> Program = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Program&quot;</span>);\r\n    <span style=\"color:Blue\">var</span> Statement = <span style=\"color:Blue\">new</span> NonTerminal(<span style=\"color:#A31515\">&quot;Statement&quot;</span>);\r\n    Program.Rule = MakePlusRule(Program, Statement);\r\n    Statement.Rule = <span style=\"color:#A31515\">&quot;A&quot;</span> + FreeText;\r\n    Root = Program;\r\n  }\r\n\r\n  <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> RunSample(<span style=\"color:Blue\">string</span> title, SampleGrammar grammar, <span style=\"color:Blue\">string</span> text)\r\n  {\r\n    Console.WriteLine(<span style=\"color:#A31515\">&quot;Test case: {0}&quot;</span>, title);\r\n\r\n    <span style=\"color:Blue\">var</span> parser = <span style=\"color:Blue\">new</span> Parser(grammar);\r\n    <span style=\"color:Blue\">var</span> tree = parser.Parse(text);\r\n\r\n    <span style=\"color:Blue\">if</span> (tree.HasErrors())\r\n      <span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">var</span> pm <span style=\"color:Blue\">in</span> tree.ParserMessages)\r\n        Console.WriteLine(<span style=\"color:#A31515\">&quot;at {0}: {1}&quot;</span>, pm.Location, pm.Message);\r\n\r\n    Console.WriteLine();\r\n  }\r\n\r\n  <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> Main()\r\n  {\r\n    <span style=\"color:Blue\">var</span> sampleText = <span style=\"color:#A31515\">&quot;A Hard Day's Night\\r\\n\\tI Am the Walrus&quot;</span>;\r\n\r\n    RunSample(<span style=\"color:#A31515\">@&quot;NewLine is \\r\\n, ConsumeTerminator is not set&quot;</span>, <span style=\"color:Blue\">new</span> SampleGrammar(<span style=\"color:Blue\">false</span>), sampleText);\r\n    RunSample(<span style=\"color:#A31515\">@&quot;NewLine is \\r\\n, ConsumeTerminator is set&quot;</span>, <span style=\"color:Blue\">new</span> SampleGrammar(<span style=\"color:Blue\">true</span>), sampleText);\r\n\r\n    sampleText = <span style=\"color:#A31515\">&quot;A Hard Day's Night\\n\\tI Am the Walrus&quot;</span>;\r\n    \r\n    RunSample(<span style=\"color:#A31515\">@&quot;NewLine is \\n, ConsumeTerminator is not set&quot;</span>, <span style=\"color:Blue\">new</span> SampleGrammar(<span style=\"color:Blue\">false</span>), sampleText);\r\n    RunSample(<span style=\"color:#A31515\">@&quot;NewLine is \\n, ConsumeTerminator is set&quot;</span>, <span style=\"color:Blue\">new</span> SampleGrammar(<span style=\"color:Blue\">true</span>), sampleText);\r\n  }\r\n}\r\n</pre>\r\n<p>It prints the following:</p>\r\n<pre><span style=\"color:#000080\">Test case: NewLine is \\r\\n, ConsumeTerminator is not set\r\n</span><span style=\"color:#000080\">at (1:</span><span style=\"color:#000080\">8): Syntax error, expected: A\r\n\r\nTest case: NewLine is \\r\\n, ConsumeTerminator is set\r\n</span><span style=\"color:#000080\">at (<span style=\"color:#ff0000\">2</span>:</span><span style=\"color:#000080\">8): Syntax error, expected: A\r\n\r\nTest case: NewLine is \\n, ConsumeTerminator is not set\r\nat (1</span><span style=\"color:#000080\">:8):</span><span style=\"color:#000080\"> Syntax error, expected: A\r\n\r\nTest case: NewLine is \\n, ConsumeTerminator is set\r\nat (1</span><span style=\"color:#000080\">:<span style=\"color:#ff0000\">1</span>):</span><span style=\"color:#000080\"> Syntax error, expected: A</span></pre>\r\n<p>Seems that with CR+LF line terminators line counter gets incremented twice on every FreeTextLiteral. For example, when input text is</p>\r\n<pre><span style=\"color:Blue\">var</span> sampleText = <span style=\"color:#A31515\">@&quot;A Hard Day's Night\r\n  A Taste of Honey                  \r\n  A Day in a Life                   \r\n  I Am the Walrus&quot;</span>; <span style=\"color:#008080\">// error at line 3</span>\r\n</pre>\r\n<p>it shows error at (6:2) instead of (3:2). I'm currently investigating this case (seems that problem occurs in SourceStream::MoveLocationToPreviewPosition() when PreviewPosition occurs between CR and LF characters, so nlCount is incremented for both CR and LF).</p>\r\n<p>Another issue is concerning column counter. Haven't looked into it yet.</p>",
    "PostedDate": "2010-02-06T13:44:06.66-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "286690",
    "ThreadId": "83375",
    "Html": "<p>Line counter bug can be fixed as follows:</p>\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> MoveLocationToPreviewPosition() {\r\n  <span style=\"color:Blue\">if</span> (_location.Position == PreviewPosition) <span style=\"color:Blue\">return</span>; \r\n  <span style=\"color:Blue\">if</span> (PreviewPosition &gt; Text.Length)\r\n    PreviewPosition = Text.Length;\r\n  <span style=\"color:Green\">// First, check if preview position is in the same line; if so, just adjust column and return</span>\r\n  <span style=\"color:Green\">//  Note that this case is not line start, so we do not need to check tab chars (and adjust column) </span>\r\n  <span style=\"color:Blue\">if</span> (PreviewPosition &lt;= _nextNewLinePosition || _nextNewLinePosition &lt; 0) {\r\n    _location.Column += PreviewPosition - _location.Position;\r\n    _location.Position = PreviewPosition;\r\n    <span style=\"color:Blue\">return</span>;\r\n  }\r\n  <span style=\"color:Green\">//So new position is on new line (beyond _nextNewLinePosition)</span>\r\n  <span style=\"color:Green\">//First count \\n chars in the string fragment</span>\r\n  <span style=\"color:Blue\">int</span> lineStart = _nextNewLinePosition;\r\n  <span style=\"color:Blue\">int</span> nlCount = 1; <span style=\"color:Green\">//we start after old _nextNewLinePosition, so we count one NewLine char</span>\r\n  CountCharsInText(Text, _scannerData.LineTerminatorsArray, lineStart + 1, PreviewPosition - 1, <span style=\"color:Blue\">ref</span> nlCount, <span style=\"color:Blue\">ref</span> lineStart);\r\n  _location.Line += nlCount;\r\n  <span style=\"color:Green\">//at this moment lineStart is at start of line where newPosition is located </span>\r\n  <span style=\"color:Green\">//Calc # of tab chars from lineStart to newPosition to adjust column#</span>\r\n  <span style=\"color:Blue\">int</span> tabCount = 0;\r\n  <span style=\"color:Blue\">int</span> dummy = 0;\r\n  <span style=\"color:Blue\">if</span> (TabWidth &gt; 1)\r\n    CountCharsInText(Text, _tab_arr, lineStart, PreviewPosition - 1, <span style=\"color:Blue\">ref</span> tabCount, <span style=\"color:Blue\">ref</span> dummy);\r\n\r\n  <span style=\"color:Green\">//adjust TokenStart with calculated information</span>\r\n  _location.Position = PreviewPosition;\r\n  _location.Column = PreviewPosition - lineStart - 1;\r\n  <span style=\"color:Blue\">if</span> (tabCount &gt; 0)\r\n    _location.Column += (TabWidth - 1) * tabCount; <span style=\"color:Green\">// &quot;-1&quot; to count for tab char itself</span>\r\n\r\n<span style=\"background:#d8fad8\">  <span style=\"color:Green\">// handle special case: PreviewPosition points at LF following a CR</span>\r\n  <span style=\"color:Blue\">var</span> startFrom = PreviewPosition;\r\n  <span style=\"color:Blue\">if</span> (PreviewPosition &gt; 0 &amp;&amp; Text.Length &gt; PreviewPosition &amp;&amp; Text[PreviewPosition - 1] == <span style=\"color:#A31515\">'\\r'</span> &amp;&amp; Text[PreviewPosition] == <span style=\"color:#A31515\">'\\n'</span>)\r\n    startFrom++;</span>\r\n\r\n  <span style=\"color:Green\">//finally cache new line and assign TokenStart</span>\r\n  _nextNewLinePosition = Text.IndexOfAny(_scannerData.LineTerminatorsArray, <span style=\"text-decoration:line-through\"><span style=\"color:#888888;background:#ffbaba\">PreviewPosition</span></span> <span style=\"background:#d8fad8\">startFrom</span>);\r\n}\r\n</pre>\r\n<p>Looks a bit ugly, though. But sadly, this case of CR+LF is not handled by CountCharsInText() because lineStart + 1 &gt; PreviewPosition - 1.</p>",
    "PostedDate": "2010-02-06T14:56:19.16-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "287256",
    "ThreadId": "83375",
    "Html": "<p>thanks, I will look into this</p>",
    "PostedDate": "2010-02-08T11:27:24.857-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "412317",
    "ThreadId": "83375",
    "Html": "<p>why don't you declare \\r\\n as an end terminal instead of just \\r?, if you do then you should get 3:2 for the error location.</p>\r\n<p>&nbsp;</p>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>FreeText.Terminators.AddRange(<span style=\"color:#A31515\">&quot;\\r\\n&quot;</span>, <span style=\"color:#A31515\">&quot;\\n&quot;</span>);\r\n<br></pre>\r\n</div>\r\n</pre>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-02-27T20:16:58.867-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "412412",
    "ThreadId": "83375",
    "Html": "<p>&quot;\\r&quot; is a&nbsp;standard line terminator in MacOS. The scanner should accept all kinds of EOL symbols.</p>\r\n<p>I can use &quot;\\r\\n&quot; as a workaround, but it's better to fix the bug in the scanner.</p>",
    "PostedDate": "2010-02-28T03:52:46.27-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "412540",
    "ThreadId": "83375",
    "Html": "<p>The column count is wrong in the 4th case because it was part of whitespace that was skipped between tokens. It looks like skipped whitespace which doesnt begin with a newline doesn't expand tabs when setting the column.</p>",
    "PostedDate": "2010-02-28T17:29:47.667-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "412956",
    "ThreadId": "83375",
    "Html": "<p>Yes, you're right. Here is related comment in MoveLocationToPreviewPosition() method:</p>\r\n<pre style=\"font-size:1em;font-family:Consolas, 'Courier New', Courier, monospace\"><span style=\"color:green\">//  Note that this case is not line start, so we do not need to check tab chars (and adjust column)</span></pre>\r\n<p>I don't think it's correct. Instead, columns should be counted as follows (assuming TabWidth == 8):</p>\r\n<pre style=\"color:#000000;font-family:Consolas, 'Courier New', Courier, monospace;font-size:1em;margin:8px\"><span style=\"color:#008080\">0       8       16      24</span></pre>\r\n<pre style=\"color:#000000;font-family:Consolas, 'Courier New', Courier, monospace;font-size:1em;margin:8px\"><span style=\"color:green\"><span style=\"color:#a0a0a0\">-------&raquo;</span><span style=\"color:#000000\"><span style=\"color:#0000ff\">int </span>someVar =</span><span style=\"color:#a0a0a0\">--&raquo;</span><span style=\"color:#000000\"><span style=\"color:#0000ff\">3</span>;</span></span></pre>\r\n<pre style=\"color:#000000;font-family:Consolas, 'Courier New', Courier, monospace;font-size:1em;margin:8px\"><span style=\"color:green\"><span style=\"color:#888888\"><span style=\"color:#a0a0a0\">-------&raquo;</span><span style=\"color:#0000ff\">string</span></span><span style=\"color:#000000\"><span style=\"color:#0000ff\"> </span>s =</span><span style=\"color:#a0a0a0\">-----&raquo;</span><span style=\"color:#000000\"><span style=\"color:#0000ff\">&quot;hello&quot;</span>;</span></span></pre>\r\n<p>Tab positions should be aligned to TabWidth.</p>",
    "PostedDate": "2010-03-01T18:08:11.057-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]