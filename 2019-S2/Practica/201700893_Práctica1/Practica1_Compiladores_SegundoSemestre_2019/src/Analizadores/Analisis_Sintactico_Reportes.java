
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import Estructuras.*;
import Modelos.*;
import Nodos.NodoCola;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.IOException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico_Reportes extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos_Reportes.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico_Reportes() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico_Reportes(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico_Reportes(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\011\003\000\002\011\002\000\002\003\004" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\007\000\002\013\005\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\012\000" +
    "\002\007\004\000\002\007\003\000\002\010\007\000\002" +
    "\010\007\000\002\010\004\000\002\010\003\000\002\012" +
    "\010\000\002\012\006\000\002\012\010\000\002\012\014" +
    "\000\002\012\014\000\002\012\016\000\002\016\004\000" +
    "\002\016\003\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\012\014\012\025\007\027\014\030\005\001" +
    "\002\000\034\002\uffed\014\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\001\002\000\034\002\ufff9\014\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\001\002\000\004\002\155" +
    "\001\002\000\004\004\142\001\002\000\034\002\ufffd\014" +
    "\012\016\037\017\030\020\035\021\027\022\031\023\036" +
    "\024\034\025\007\026\041\027\014\030\005\001\002\000" +
    "\012\014\012\025\007\027\014\030\005\001\002\000\004" +
    "\031\015\001\002\000\012\014\ufffb\025\ufffb\027\ufffb\030" +
    "\ufffb\001\002\000\034\002\ufffa\014\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\001\002\000\004\013\016\001\002" +
    "\000\004\015\017\001\002\000\004\004\020\001\002\000" +
    "\004\032\021\001\002\000\004\005\022\001\002\000\004" +
    "\006\023\001\002\000\034\002\uffec\014\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\001\002\000\034\002\ufffd\014" +
    "\012\016\037\017\030\020\035\021\027\022\031\023\036" +
    "\024\034\025\007\026\041\027\014\030\005\001\002\000" +
    "\012\014\ufffc\025\ufffc\027\ufffc\030\ufffc\001\002\000\032" +
    "\002\ufffe\016\037\017\030\020\035\021\027\022\031\023" +
    "\036\024\034\025\007\026\041\027\014\030\005\001\002" +
    "\000\004\004\133\001\002\000\004\004\126\001\002\000" +
    "\004\004\115\001\002\000\032\002\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\001\002\000\004\002\000\001\002" +
    "\000\004\004\073\001\002\000\004\004\070\001\002\000" +
    "\004\031\064\001\002\000\004\031\060\001\002\000\034" +
    "\002\uffee\014\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\001\002\000\004\004\045\001\002\000\032\002\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\001\002\000\004\006" +
    "\044\001\002\000\032\002\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\001\002\000\004\032\046\001\002\000\004" +
    "\012\047\001\002\000\004\032\050\001\002\000\004\012" +
    "\051\001\002\000\004\031\052\001\002\000\004\012\053" +
    "\001\002\000\004\032\054\001\002\000\004\012\055\001" +
    "\002\000\004\032\056\001\002\000\004\005\057\001\002" +
    "\000\010\005\uffe0\006\uffe0\012\uffe0\001\002\000\004\013" +
    "\061\001\002\000\016\017\030\020\035\021\027\022\031" +
    "\024\034\026\041\001\002\000\004\006\063\001\002\000" +
    "\032\002\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\001" +
    "\002\000\004\013\065\001\002\000\016\017\030\020\035" +
    "\021\027\022\031\024\034\026\041\001\002\000\004\006" +
    "\067\001\002\000\032\002\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\001\002\000\004\031\071\001\002\000\004" +
    "\005\072\001\002\000\010\005\uffe4\006\uffe4\012\uffe4\001" +
    "\002\000\004\031\074\001\002\000\004\012\075\001\002" +
    "\000\004\032\076\001\002\000\004\012\077\001\002\000" +
    "\012\007\101\010\103\011\105\013\100\001\002\000\004" +
    "\013\uffd9\001\002\000\006\012\uffde\013\uffdc\001\002\000" +
    "\004\013\114\001\002\000\006\012\uffdd\013\uffdb\001\002" +
    "\000\004\012\106\001\002\000\004\013\uffda\001\002\000" +
    "\010\031\112\032\110\033\107\001\002\000\004\005\ufff1" +
    "\001\002\000\004\005\ufff0\001\002\000\004\005\113\001" +
    "\002\000\004\005\uffef\001\002\000\010\005\uffe1\006\uffe1" +
    "\012\uffe1\001\002\000\004\012\uffdf\001\002\000\004\031" +
    "\116\001\002\000\004\012\117\001\002\000\004\032\120" +
    "\001\002\000\004\012\121\001\002\000\012\007\101\010" +
    "\103\011\105\013\100\001\002\000\004\012\123\001\002" +
    "\000\010\031\112\032\110\033\107\001\002\000\004\005" +
    "\125\001\002\000\010\005\uffe2\006\uffe2\012\uffe2\001\002" +
    "\000\004\031\127\001\002\000\004\012\130\001\002\000" +
    "\004\032\131\001\002\000\004\005\132\001\002\000\010" +
    "\005\uffe5\006\uffe5\012\uffe5\001\002\000\004\031\134\001" +
    "\002\000\004\012\135\001\002\000\004\032\136\001\002" +
    "\000\004\005\137\001\002\000\010\005\uffe3\006\uffe3\012" +
    "\uffe3\001\002\000\032\002\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\001\002\000\004\002\uffff\001\002\000\024" +
    "\017\030\020\035\021\027\022\031\024\034\026\041\031" +
    "\145\032\144\033\147\001\002\000\006\005\151\012\152" +
    "\001\002\000\006\005\ufff4\012\ufff4\001\002\000\006\005" +
    "\ufff3\012\ufff3\001\002\000\006\005\ufff6\012\ufff6\001\002" +
    "\000\006\005\ufff5\012\ufff5\001\002\000\006\005\ufff2\012" +
    "\ufff2\001\002\000\004\006\154\001\002\000\024\017\030" +
    "\020\035\021\027\022\031\024\034\026\041\031\145\032" +
    "\144\033\147\001\002\000\006\005\ufff7\012\ufff7\001\002" +
    "\000\034\002\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\014\002\005\003\010\004\012\005\007\006" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\041\006\037\007" +
    "\025\010\031\011\140\012\042\001\001\000\010\004\024" +
    "\005\023\006\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\041\006\037" +
    "\007\025\010\031\011\032\012\042\001\001\000\002\001" +
    "\001\000\010\004\041\010\137\012\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\103\017\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\121\017\101\001" +
    "\001\000\002\001\001\000\004\015\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\147\013\142\014\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\147\014\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico_Reportes$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico_Reportes$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico_Reportes$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Cola TodosLosErrores = new Cola();
    public Cola colaArchivos = new Cola();
    public Cola instrucciones = new Cola();
    public Arbol variables = new Arbol();
    public Cola semanticos = new Cola();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        Errores error = new Errores(lexema,fila,columna,"Token " + lexema + " No esperado", "Sintactico");
        TodosLosErrores.insertar(error);
    }

    //Metodo al que se llama en el momento en el que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s){

    }

    public void AnalizarDatos(String path, String nombre){
        
        File file = new File(path);
        String codigo = "";
        try {
            if (file.exists()) {
                Scanner sc = new Scanner(file);
                while (sc.hasNextLine()) {
                    codigo += sc.nextLine() + "\n";
                }
                String cadena = "";
                String datos_datos = codigo;
                Analisis_Lexico_Datos lexico_datos = new Analisis_Lexico_Datos(new BufferedReader(new StringReader(datos_datos)));
                Analisis_Sintactico_Datos sintactico_datos = new Analisis_Sintactico_Datos(lexico_datos);
                try {
                    sintactico_datos.parse();
                    if (lexico_datos.ErroresLexicos.contador != 0){
                        sintactico_datos.archivo.getErrores().insertar(lexico_datos.ErroresLexicos);
                    }
                    if (sintactico_datos.TodosLosErrores.contador != 0){
                        sintactico_datos.archivo.getErrores().insertar(sintactico_datos.TodosLosErrores);
                    }
                    sintactico_datos.archivo.setNombre(nombre);
                    colaArchivos.insertar(sintactico_datos.archivo);
                } catch (Exception ex) {
                    Logger.getLogger(Analisis_Sintactico_Reportes.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                Errores error = new Errores(path,0,0,"El archivo no existe", "Semantico");
                TodosLosErrores.insertar(error);
            }
        } catch (FileNotFoundException ex) {
            Errores error = new Errores(path,0,0,"El archivo no existe", "Semantico");
            TodosLosErrores.insertar(error);
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico_Reportes$actions {


    

  private final Analisis_Sintactico_Reportes parser;

  /** Constructor */
  CUP$Analisis_Sintactico_Reportes$actions(Analisis_Sintactico_Reportes parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico_Reportes$do_action_part00000000(
    int                        CUP$Analisis_Sintactico_Reportes$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico_Reportes$parser,
    java.util.Stack            CUP$Analisis_Sintactico_Reportes$stack,
    int                        CUP$Analisis_Sintactico_Reportes$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico_Reportes$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico_Reportes$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico_Reportes$parser.done_parsing();
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= COM LEER CUE 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LEER CUE 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUE ::= CUERPO 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("CUE",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUE ::= 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("CUE",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COM ::= COM COM2 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("COM",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COM ::= COM2 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("COM",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COM2 ::= comentarioLinea 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("COM2",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COM2 ::= comentarioMultiLinea 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("COM2",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COM2 ::= imprimir parenteA L_IMP parenteC puntoComa 
            {
              Object RESULT =null;
		int listaImprimirleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)).left;
		int listaImprimirright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)).right;
		Cola listaImprimir = (Cola)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)).value;
		
                        NodoCola temp = listaImprimir.cabeza;
                        String cadena = "";
                        while(temp != null){
                            cadena += temp.getContenido().toString();
                            temp = temp.getSiguiente();
                        }
                        if(!cadena.equals("") || !cadena.isEmpty()){
                            instrucciones.insertar(cadena);
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("COM2",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L_IMP ::= L_IMP coma VALOR_IMP 
            {
              Cola RESULT =null;
		int listaImprimirleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)).left;
		int listaImprimirright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)).right;
		Cola listaImprimir = (Cola)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.peek()).value;
		
                        RESULT = listaImprimir;
                        if(cadena != null){
                            RESULT.insertar(cadena);
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("L_IMP",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L_IMP ::= VALOR_IMP 
            {
              Cola RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.peek()).value;
		
                        Cola cola = new Cola();
                        if(cadena != null){
                            cola.insertar(cadena);
                        }
                        RESULT = cola;
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("L_IMP",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VALOR_IMP ::= numero 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.peek()).value;
		
                        RESULT = valor;
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("VALOR_IMP",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VALOR_IMP ::= cadena 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.peek()).value;
		
                        RESULT = valor.replace("\"", "");
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("VALOR_IMP",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VALOR_IMP ::= ident 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.peek()).value;
		
                        int error = 0;
                        Variable var = variables.obtenerValor(valor,variables.getRaiz());
                        if(var != null){
                            RESULT = var.getContenido().toString();
                        } else {
                            NodoCola temp = colaArchivos.cabeza;
                            String resultado = "Claves = [";
                            int encontrado = 0;
                            while(temp != null){
                                Archivo archivo = (Archivo) temp.getContenido();
                                if(archivo.getNombre().equals(valor)){
                                    ArrayList<Cabecera> cabecera = archivo.getCabeceras();
                                    for(int i = 0; i < cabecera.size(); i++){
                                        if(i == 0){
                                            resultado += cabecera.get(i).getNombre();
                                        } else {
                                            resultado += "," + cabecera.get(i).getNombre();
                                        }
                                    }
                                    resultado += "]     Numero de Registros: " + archivo.getRegistros().size();
                                    encontrado++;
                                    break;
                                }
                                temp = temp.getSiguiente();
                            }
                            if(encontrado == 0){
                                error++;
                                Errores errorx = new Errores(valor,0,valorright,"La variable no existe","Semantico");
                                semanticos.insertar(errorx);
                            }
                            if(error != 0){
                                RESULT = null;
                            }else{
                                RESULT = resultado;
                            }
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("VALOR_IMP",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALOR_IMP ::= FUNCION 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.peek()).value;
		
                        if(valor != null){
                            RESULT = valor.toString();
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("VALOR_IMP",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALOR ::= numero 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.peek()).value;
		
                        RESULT = valor;
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOR ::= cadena 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.peek()).value;
		
                        RESULT = valor;
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALOR ::= ident 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.peek()).value;
		
                        RESULT = valor;
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LEER ::= LEER ARCHIVO 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("LEER",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LEER ::= ARCHIVO 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("LEER",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARCHIVO ::= tipoArchivo ident igual leerArchivo parenteA cadena parenteC puntoComa 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-6)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)).right;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-2)).value;
		 
                        AnalizarDatos(ruta.replace("\"",""),nombre); 
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("ARCHIVO",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO ::= CUERPO OPCION 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO ::= OPCION 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPCION ::= tipoNumerico ident igual FUNCION puntoComa 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		
                        if(contenido != null){
                            try{
                                if(contenido != null){
                                    int cont = Integer.parseInt(contenido.toString());
                                    Variable var = new Variable(nombre,"int",cont);
                                    String resultado = variables.insertar(var);
                                    if(!resultado.equals("Ingresada")){
                                        Errores errorx = new Errores(nombre,0,nombreright,"Variable ya existente","Semantico");
                                        semanticos.insertar(errorx);
                                    }
                                }
                            }catch(NumberFormatException nfe){
                                try{
                                    if(contenido != null){
                                        double cont = Double.parseDouble(contenido.toString());
                                        Variable var = new Variable(nombre,"int",cont);
                                        String resultado = variables.insertar(var);
                                        if(!resultado.equals("Ingresada")){
                                            Errores errorx = new Errores(nombre,0,nombreright,"Variable ya existente","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                    }
                                }catch(NumberFormatException nfee){
                                    String er = "\"" + contenido + "\"";
                                    Errores errorx = new Errores(er,0,nombreright,"Se esperaba tipo Numerico, tipo Cadena encontrado","Semantico");
                                    semanticos.insertar(errorx);
                                }
                            }
                        } else {
                            Errores errorx = new Errores("-----",0,nombreright,"Cabecera no encontrada","Semantico");
                            semanticos.insertar(errorx);
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPCION",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCION ::= tipoCadena ident igual FUNCION puntoComa 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		
                        if(contenido != null){
                            try{
                                int cont = Integer.parseInt(contenido.toString());
                                Errores errorx = new Errores(contenido.toString(),0,nombreright,"Se esperaba tipo Cadena, tipo Numerico encontrado","Semantico");
                                semanticos.insertar(errorx);
                            }catch(NumberFormatException nfe){
                                try{
                                    double cont = Double.parseDouble(contenido.toString());
                                    Errores errorx = new Errores(contenido.toString(),0,nombreright,"Se esperaba tipo Cadena, tipo Numerico encontrado","Semantico");
                                    semanticos.insertar(errorx);
                                }catch(NumberFormatException nfee){
                                    if(contenido != null){
                                        Variable var = new Variable(nombre,"string",contenido);
                                        String resultado = variables.insertar(var);
                                        if(!resultado.equals("Ingresada")){
                                            Errores errorx = new Errores(nombre,0,nombreright,"Variable ya existente","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                    }
                                }
                            }
                        } else {
                            Errores errorx = new Errores("-------",0,nombreright,"Cabecera no encontrada","Semantico");
                            semanticos.insertar(errorx);
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPCION",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCION ::= FUNCION puntoComa 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		
                        if(valor != null){
                            RESULT = valor.toString();
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPCION",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCION ::= COM2 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPCION",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= sumar parenteA ident coma cadena parenteC 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		String campo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		
                        NodoCola temp = colaArchivos.cabeza;
                        int resultado = 0;
                        int cabeceraEncontrada = 0;
                        int archivoEncontrado = 0;
                        int error = 0;
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                                for(int i = 0; i < cabeceras.size(); i++){
                                    if(cabeceras.get(i).getNombre().equals(campo.replace("\"",""))){
                                        if(cabeceras.get(i).getTipo().equals("int")){
                                            ArrayList<Registro> registros = archivo.getRegistros();
                                            for(int j = 0; j < registros.size(); j++){
                                                try{
                                                    int numero = Integer.parseInt(registros.get(j).getRegistros().get(i).toString());
                                                    resultado += numero;
                                                }catch(NumberFormatException nfe){
                                                    try{
                                                        double numero = Double.parseDouble(registros.get(j).getRegistros().get(i).toString());
                                                        resultado += numero;
                                                    }catch(NumberFormatException nfee){

                                                    }
                                                }
                                            }
                                        } else {
                                            error++;
                                            Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"Valor de cabecera esperado Numerico, tipo Cadena encontrado","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                        cabeceraEncontrada++;
                                    }
                                }
                                if(cabeceraEncontrada == 0){
                                    error++;
                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"La cabecera no existe","Semantico");
                                    semanticos.insertar(errorx);
                                }
                                archivoEncontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(archivoEncontrado == 0){
                            error++;
                            Errores errorx = new Errores(nombre,0,camporight,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                        }
                        if(error != 0){
                            RESULT = null;
                        }else{
                            RESULT = resultado;
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= contar parenteA ident parenteC 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		
                        NodoCola temp = colaArchivos.cabeza;
                        int retorno = 0;
                        int encontrado = 0;
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Registro> registros = archivo.getRegistros();
                                retorno = registros.size();
                                encontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(encontrado == 0){
                            Errores errorx = new Errores(nombre,0,nombreright,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                            RESULT = null;
                        } else {
                            RESULT = retorno;
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= promedio parenteA ident coma cadena parenteC 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		String campo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		
                        NodoCola temp = colaArchivos.cabeza;
                        int resultado = 0;
                        int cantidad = 0;
                        int archivoEncontrado = 0;
                        int cabeceraEncontrada = 0;
                        double retorno = 0;
                        int error = 0;
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                                for(int i = 0; i < cabeceras.size(); i++){
                                    if(cabeceras.get(i).getNombre().equals(campo.replace("\"",""))){
                                        if(cabeceras.get(i).getTipo().equals("int")){
                                            ArrayList<Registro> registros = archivo.getRegistros();
                                            cantidad = registros.size();
                                            for(int j = 0; j < cantidad; j++){
                                                try{
                                                    int numero = Integer.parseInt(registros.get(j).getRegistros().get(i).toString());
                                                    resultado += Math.abs(numero);
                                                }catch(NumberFormatException nfe){
                                                    try{
                                                        double numero = Double.parseDouble(registros.get(j).getRegistros().get(i).toString());
                                                        resultado += Math.abs(numero);
                                                    }catch(NumberFormatException nfee){

                                                    }
                                                }
                                            }
                                        } else {
                                            error++;
                                            Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"Valor de cabecera esperado Numerico, tipo Cadena encontrado","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                        cabeceraEncontrada++;
                                        break;
                                    }
                                }
                                if(cabeceraEncontrada == 0){
                                    error++;
                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"La cabecera no existe","Semantico");
                                    semanticos.insertar(errorx);
                                }
                                archivoEncontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(archivoEncontrado == 0){
                            error++;
                            Errores errorx = new Errores(nombre,0,camporight,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                        }
                        if(error != 0){
                            RESULT = null;
                        }else{
                            if(resultado == 0){
                                Errores errorx = new Errores(campo,0,camporight,"Division por 0","Semantico");
                                semanticos.insertar(errorx);
                                RESULT = null;
                            } else {
                                retorno = (double)resultado/cantidad;
                                RESULT = retorno;
                            }
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCION ::= contarSi parenteA ident coma cadena coma OPER1 coma VALOR parenteC 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-7)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-7)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-7)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)).right;
		String campo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		
                        NodoCola temp = colaArchivos.cabeza;
                        int contador = 0;
                        int error = 0;
                        int cabeceraEncontrada = 0;
                        int archivoEncontrado = 0;
                        int cantidad = 0;
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                                for(int i = 0; i < cabeceras.size(); i++){
                                    if(cabeceras.get(i).getNombre().equals(campo.replace("\"",""))){
                                        String tipo = cabeceras.get(i).getTipo();
                                        switch(tipo){
                                            case "string":
						if(valor.startsWith("\"")){
                                                    ArrayList<Registro> registros = archivo.getRegistros();
                                                    cantidad = registros.size();
                                                    switch(operador){
                                                        case "==":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(registros.get(j).getRegistros().get(i).toString().equals(valor.replace("\"",""))){
                                                                    contador++;
                                                                }
                                                            }
                                                        break;
                                                        case "!=":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(!registros.get(j).getRegistros().get(i).toString().equals(valor.replace("\"",""))){
                                                                    contador++;
                                                                }
                                                            }
                                                        break;
                                                        default:
                                                            error++;
                                                            Errores errorx = new Errores(operador,0,operadorright,"Operador Erroneo","Semantico");
                                                            semanticos.insertar(errorx);
                                                        break;
                                                    }
						} else {
                                                    error++;
                                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"Valor de cabecera esperado Cadena, tipo Numerico encontrado","Semantico");
                                                    semanticos.insertar(errorx);
						}
                                            break;
                                            case "int":
						if(!valor.startsWith("\"")){
                                                    ArrayList<Registro> registros = archivo.getRegistros();
                                                    cantidad = registros.size();
                                                    switch(operador){
                                                        case "==":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) == Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        case "!=":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) != Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        case "<":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) < Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        case ">":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) > Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        case ">=":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) >= Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        case "<=":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) <= Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        default:
                                                            error++;
                                                            Errores errorx = new Errores(operador,0,operadorright,"Operador Erroneo","Semantico");
                                                            semanticos.insertar(errorx);
                                                        break;
                                                    }
						} else {
                                                    error++;
                                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"Valor de cabecera esperado Numerico, tipo Cadena encontrado","Semantico");
                                                    semanticos.insertar(errorx);
						}
                                            break;
                                        }
                                        cabeceraEncontrada++;
                                        break;
                                    }
                                }
                                if(cabeceraEncontrada == 0){
                                    error++;
                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"La cabecera no existe","Semantico");
                                    semanticos.insertar(errorx);
                                }
                                archivoEncontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(archivoEncontrado == 0){
                            error++;
                            Errores errorx = new Errores(nombre,0,camporight,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                        }
                        if(error != 0){
                            RESULT = null;
                        } else {
                            RESULT = String.valueOf(contador);
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCION ::= obtenerSi parenteA ident coma cadena coma OPER1 coma VALOR parenteC 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-7)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-7)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-7)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)).right;
		String campo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		
                        NodoCola temp = colaArchivos.cabeza;
                        int contador = 0;
                        int error = 0;
                        int cabeceraEncontrada = 0;
                        int archivoEncontrado = 0;
                        int cantidad = 0;
                        String cadena = "[\n";
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                                for(int i = 0; i < cabeceras.size(); i++){
                                    if(cabeceras.get(i).getNombre().equals(campo.replace("\"",""))){
                                        String tipo = cabeceras.get(i).getTipo();
                                        switch(tipo){
                                            case "string":
                                                if(valor.startsWith("\"")){
                                                    ArrayList<Registro> registros = archivo.getRegistros();
                                                    cantidad = registros.size();
                                                    switch(operador){
                                                        case "==":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(registros.get(j).getRegistros().get(i).toString().equals(valor.replace("\"",""))){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case "!=":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(!registros.get(j).getRegistros().get(i).toString().equals(valor.replace("\"",""))){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        default:
                                                            error++;
                                                            Errores errorx = new Errores(operador,0,operadorright,"Operador Erroneo","Semantico");
                                                            semanticos.insertar(errorx);
                                                        break;
                                                    }
                                                } else {
                                                    error++;
                                                    Errores errorx = new Errores(campo,0,camporight,"Valor de cabecera esperado Cadena, tipo Numerico encontrado","Semantico");
                                                    semanticos.insertar(errorx);
                                                }
                                            break;
                                            case "int":
                                                if(!valor.startsWith("\"")){
                                                    ArrayList<Registro> registros = archivo.getRegistros();
                                                    cantidad = registros.size();
                                                    switch(operador){
                                                        case "==":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) == Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case "!=":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) != Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case "<":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) < Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case ">":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) > Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case "<=":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) <= Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case ">=":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) >= Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        default:
                                                            error++;
                                                            Errores errorx = new Errores(operador,0,operadorright,"Operador Erroneo","Semantico");
                                                            semanticos.insertar(errorx);
                                                        break;
                                                    }
                                                } else {
                                                    error++;
                                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"Valor de cabecera esperado Numerico, tipo Cadena encontrado","Semantico");
                                                    semanticos.insertar(errorx);
                                                }
                                            break;
                                        }
                                        cabeceraEncontrada++;
                                        break;
                                    }
                                }
                                if(cabeceraEncontrada == 0){
                                    error++;
                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"La cabecera no existe","Semantico");
                                    semanticos.insertar(errorx);
                                }
                                archivoEncontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(archivoEncontrado == 0){
                            error++;
                            Errores errorx = new Errores(nombre,0,nombreright,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                        }
                        if(error != 0){
                            RESULT = null;
                        } else {
                            RESULT = cadena;
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCION ::= graficar parenteA cadena coma cadena coma ident coma cadena coma cadena parenteC 
            {
              Object RESULT =null;
		int nombreGrafleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-9)).left;
		int nombreGrafright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-9)).right;
		String nombreGraf = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-9)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-7)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-5)).value;
		int ejeXleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).left;
		int ejeXright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).right;
		String ejeX = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-3)).value;
		int ejeYleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int ejeYright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		String ejeY = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		
                        NodoCola temp = colaArchivos.cabeza;
                        int cantidad = 0;
                        int archivoEncontrado = 0;
                        int cabeceraEncontrada = 0;
                        int error = 0;
                        Object campo1[] = new Object[1];
                        String campo2[] = new String[1];
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                                for(int i = 0; i < cabeceras.size(); i++){
                                    if(cabeceras.get(i).getNombre().equals(ejeY.replace("\"",""))){
                                        if(cabeceras.get(i).getTipo().equals("int")){
                                            ArrayList<Registro> registros = archivo.getRegistros();
                                            cantidad = registros.size();
                                            campo1 = new Object[cantidad];
                                            for(int j = 0; j < cantidad; j++){
                                                try{
                                                    int numero = Integer.parseInt(registros.get(j).getRegistros().get(i).toString());
                                                    campo1[j] = numero;
                                                }catch(NumberFormatException nfe){
                                                    try{
                                                        double numero = Double.parseDouble(registros.get(j).getRegistros().get(i).toString());
                                                        campo1[j] = numero;
                                                    }catch(NumberFormatException nfee){

                                                    }
                                                }
                                            }
                                        } else {
                                            error++;
                                            Errores errorx = new Errores(ejeX.replace("\"",""),0,ejeXright,"Valor de cabecera esperado Numerico, tipo Cadena encontrado","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                        cabeceraEncontrada++;
                                    }
                                    if(cabeceras.get(i).getNombre().equals(ejeX.replace("\"",""))){
                                        if(cabeceras.get(i).getTipo().equals("string")){
                                            ArrayList<Registro> registros = archivo.getRegistros();
                                            cantidad = registros.size();
                                            campo2 = new String[cantidad];
                                            for(int j = 0; j < cantidad; j++){
                                                String cadena = registros.get(j).getRegistros().get(i).toString();
                                                campo2[j] = cadena;
                                            }
                                        } else {
                                            error++;
                                            Errores errorx = new Errores(ejeX.replace("\"",""),0,ejeXright,"Valor de cabecera esperado Cadena, tipo Numerico encontrado","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                        cabeceraEncontrada++;
                                    }
                                }
                                if(cabeceraEncontrada == 0){
                                    error++;
                                    Errores errorx = new Errores(ejeX.replace("\"",""),0,ejeXright,"La cabecera no existe","Semantico");
                                    semanticos.insertar(errorx);
                                }
                                archivoEncontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(archivoEncontrado == 0){
                            error++;
                            Errores errorx = new Errores(nombre,0,ejeXright,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                        }
                        if(error != 0){
                           RESULT = null;
                        }else{
                            final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                            for(int i = 0; i < campo1.length; i++){
                                try{
                                    int numero = Integer.parseInt(campo1[i].toString());
                                    dataset.addValue(numero,campo2[i],campo2[i]);
                                }catch(NumberFormatException nfe){
                                    try{
                                        double numero = Double.parseDouble(campo1[i].toString());
                                        dataset.addValue(numero,campo2[i],campo2[i]);
                                    }catch(NumberFormatException nfee){

                                    }
                                }
                            }
                            JFreeChart barChart = ChartFactory.createBarChart(nombreGraf.replace("\"",""), ejeX.replace("\"",""), ejeY.replace("\"",""), dataset,PlotOrientation.VERTICAL, true, true, false);
                            int width = 1300;
                            int height = 600;
                            File BarChart = new File( nombreGraf.replace("\"","") + ".jpeg" ); 
                            try {
                                ChartUtilities.saveChartAsJPEG( BarChart , barChart , width , height );
                            } catch (IOException ex) {
                                Logger.getLogger(Analisis_Sintactico_Reportes.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-11)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPER1 ::= OPER2 igual 
            {
              String RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).right;
		String operador = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)).value;
		
                        String op = operador + "=";
                        RESULT = op;
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPER1",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.elementAt(CUP$Analisis_Sintactico_Reportes$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPER1 ::= menorQue 
            {
              String RESULT =null;
		
                        RESULT = "<";
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPER1",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPER1 ::= mayorQue 
            {
              String RESULT =null;
		
                        RESULT = ">";
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPER1",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPER2 ::= menorQue 
            {
              String RESULT =null;
		
                        RESULT = "<";
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPER2",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPER2 ::= mayorQue 
            {
              String RESULT =null;
		
                        RESULT = ">";
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPER2",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPER2 ::= diferente 
            {
              String RESULT =null;
		
                        RESULT = "!";
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPER2",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPER2 ::= igual 
            {
              String RESULT =null;
		
                        RESULT = "=";
                    
              CUP$Analisis_Sintactico_Reportes$result = parser.getSymbolFactory().newSymbol("OPER2",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico_Reportes$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico_Reportes$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico_Reportes$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico_Reportes$do_action(
    int                        CUP$Analisis_Sintactico_Reportes$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico_Reportes$parser,
    java.util.Stack            CUP$Analisis_Sintactico_Reportes$stack,
    int                        CUP$Analisis_Sintactico_Reportes$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico_Reportes$do_action_part00000000(
                               CUP$Analisis_Sintactico_Reportes$act_num,
                               CUP$Analisis_Sintactico_Reportes$parser,
                               CUP$Analisis_Sintactico_Reportes$stack,
                               CUP$Analisis_Sintactico_Reportes$top);
    }
}

}
