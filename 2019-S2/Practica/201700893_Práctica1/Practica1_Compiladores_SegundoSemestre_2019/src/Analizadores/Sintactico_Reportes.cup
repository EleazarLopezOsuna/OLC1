/*--------- 1ra Area: Codigo de Usuario ---------*/

//--------> Paquetes e importaciones
package Analizadores;
import java_cup.runtime.Symbol;
import Estructuras.*;
import Modelos.*;
import Nodos.NodoCola;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.IOException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

//--------> Codigo para el parser, variables, metodos
parser code
{:
    public Cola TodosLosErrores = new Cola();
    public Cola colaArchivos = new Cola();
    public Cola instrucciones = new Cola();
    public Arbol variables = new Arbol();
    public Cola semanticos = new Cola();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        Errores error = new Errores(lexema,fila,columna,"Token " + lexema + " No esperado", "Sintactico");
        TodosLosErrores.insertar(error);
    }

    //Metodo al que se llama en el momento en el que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s){

    }

    public void AnalizarDatos(String path, String nombre){
        
        File file = new File(path);
        String codigo = "";
        try {
            if (file.exists()) {
                Scanner sc = new Scanner(file);
                while (sc.hasNextLine()) {
                    codigo += sc.nextLine() + "\n";
                }
                String cadena = "";
                String datos_datos = codigo;
                Analisis_Lexico_Datos lexico_datos = new Analisis_Lexico_Datos(new BufferedReader(new StringReader(datos_datos)));
                Analisis_Sintactico_Datos sintactico_datos = new Analisis_Sintactico_Datos(lexico_datos);
                try {
                    sintactico_datos.parse();
                    if (lexico_datos.ErroresLexicos.contador != 0){
                        sintactico_datos.archivo.getErrores().insertar(lexico_datos.ErroresLexicos);
                    }
                    if (sintactico_datos.TodosLosErrores.contador != 0){
                        sintactico_datos.archivo.getErrores().insertar(sintactico_datos.TodosLosErrores);
                    }
                    sintactico_datos.archivo.setNombre(nombre);
                    colaArchivos.insertar(sintactico_datos.archivo);
                } catch (Exception ex) {
                    Logger.getLogger(Analisis_Sintactico_Reportes.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                Errores error = new Errores(path,0,0,"El archivo no existe", "Semantico");
                TodosLosErrores.insertar(error);
            }
        } catch (FileNotFoundException ex) {
            Errores error = new Errores(path,0,0,"El archivo no existe", "Semantico");
            TodosLosErrores.insertar(error);
        }
    }
:}

//--------> Codigo para las acciones gramaticales
action code
{:
    
:}

/*--------- 2da Area: Declaraciones ---------*/

//--------> Declaracion de terminales
terminal parenteA, parenteC, puntoComa, menorQue, mayorQue, diferente, coma, igual;
terminal tipoArchivo, leerArchivo, tipoNumerico, sumar, contar, promedio;
terminal contarSi, tipoCadena, obtenerSi, imprimir, graficar;
terminal comentarioLinea, comentarioMultiLinea;
terminal String ident, cadena, numero;

//--------> Declaracion de no terminales
non terminal INICIO, COM, COM2;
non terminal LEER, ARCHIVO, CUERPO, OPCION;
non terminal CUE, FUNCION;
non terminal Cola L_IMP;
non terminal String VALOR_IMP, VALOR, OPER1, OPER2;

start with INICIO;

/*--------- 3ra Area: Reglas Semanticas ---------*/
INICIO ::= COM LEER CUE
        | LEER CUE
        ;
CUE ::= CUERPO
        |
        ;
COM ::= COM COM2
        | COM2
        ;
COM2 ::= comentarioLinea
        | comentarioMultiLinea
        | imprimir parenteA L_IMP:listaImprimir parenteC puntoComa
                    {:
                        NodoCola temp = listaImprimir.cabeza;
                        String cadena = "";
                        while(temp != null){
                            cadena += temp.getContenido().toString();
                            temp = temp.getSiguiente();
                        }
                        if(!cadena.equals("") || !cadena.isEmpty()){
                            instrucciones.insertar(cadena);
                        }
                    :}
        ;
L_IMP ::= L_IMP:listaImprimir coma VALOR_IMP:cadena
                    {:
                        RESULT = listaImprimir;
                        if(cadena != null){
                            RESULT.insertar(cadena);
                        }
                    :}
        | VALOR_IMP:cadena
                    {:
                        Cola cola = new Cola();
                        if(cadena != null){
                            cola.insertar(cadena);
                        }
                        RESULT = cola;
                    :}
        ;
VALOR_IMP ::= numero:valor
                    {:
                        RESULT = valor;
                    :}
        | cadena:valor
                    {:
                        RESULT = valor.replace("\"", "");
                    :}
        | ident:valor
                    {:
                        int error = 0;
                        Variable var = variables.obtenerValor(valor,variables.getRaiz());
                        if(var != null){
                            RESULT = var.getContenido().toString();
                        } else {
                            NodoCola temp = colaArchivos.cabeza;
                            String resultado = "Claves = [";
                            int encontrado = 0;
                            while(temp != null){
                                Archivo archivo = (Archivo) temp.getContenido();
                                if(archivo.getNombre().equals(valor)){
                                    ArrayList<Cabecera> cabecera = archivo.getCabeceras();
                                    for(int i = 0; i < cabecera.size(); i++){
                                        if(i == 0){
                                            resultado += cabecera.get(i).getNombre();
                                        } else {
                                            resultado += "," + cabecera.get(i).getNombre();
                                        }
                                    }
                                    resultado += "]     Numero de Registros: " + archivo.getRegistros().size();
                                    encontrado++;
                                    break;
                                }
                                temp = temp.getSiguiente();
                            }
                            if(encontrado == 0){
                                error++;
                                Errores errorx = new Errores(valor,0,valorright,"La variable no existe","Semantico");
                                semanticos.insertar(errorx);
                            }
                            if(error != 0){
                                RESULT = null;
                            }else{
                                RESULT = resultado;
                            }
                        }
                    :}
        | FUNCION:valor
                    {:
                        if(valor != null){
                            RESULT = valor.toString();
                        }
                    :}
        ;
VALOR ::= numero:valor
                    {:
                        RESULT = valor;
                    :}
        | cadena:valor
                    {:
                        RESULT = valor;
                    :}
        | ident:valor
                    {:
                        RESULT = valor;
                    :}
        ;
LEER ::= LEER ARCHIVO
        | ARCHIVO
        ;
ARCHIVO ::= tipoArchivo ident:nombre igual leerArchivo parenteA cadena:ruta parenteC puntoComa 
                    {: 
                        AnalizarDatos(ruta.replace("\"",""),nombre); 
                    :}
        ;
CUERPO ::= CUERPO OPCION 
        | OPCION
        ;
OPCION ::= tipoNumerico ident:nombre igual FUNCION:contenido puntoComa
                    {:
                        if(contenido != null){
                            try{
                                if(contenido != null){
                                    int cont = Integer.parseInt(contenido.toString());
                                    Variable var = new Variable(nombre,"int",cont);
                                    String resultado = variables.insertar(var);
                                    if(!resultado.equals("Ingresada")){
                                        Errores errorx = new Errores(nombre,0,nombreright,"Variable ya existente","Semantico");
                                        semanticos.insertar(errorx);
                                    }
                                }
                            }catch(NumberFormatException nfe){
                                try{
                                    if(contenido != null){
                                        double cont = Double.parseDouble(contenido.toString());
                                        Variable var = new Variable(nombre,"int",cont);
                                        String resultado = variables.insertar(var);
                                        if(!resultado.equals("Ingresada")){
                                            Errores errorx = new Errores(nombre,0,nombreright,"Variable ya existente","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                    }
                                }catch(NumberFormatException nfee){
                                    String er = "\"" + contenido + "\"";
                                    Errores errorx = new Errores(er,0,nombreright,"Se esperaba tipo Numerico, tipo Cadena encontrado","Semantico");
                                    semanticos.insertar(errorx);
                                }
                            }
                        } else {
                            Errores errorx = new Errores("-----",0,nombreright,"Cabecera no encontrada","Semantico");
                            semanticos.insertar(errorx);
                        }
                    :}
        | tipoCadena ident:nombre igual FUNCION:contenido puntoComa
                    {:
                        if(contenido != null){
                            try{
                                int cont = Integer.parseInt(contenido.toString());
                                Errores errorx = new Errores(contenido.toString(),0,nombreright,"Se esperaba tipo Cadena, tipo Numerico encontrado","Semantico");
                                semanticos.insertar(errorx);
                            }catch(NumberFormatException nfe){
                                try{
                                    double cont = Double.parseDouble(contenido.toString());
                                    Errores errorx = new Errores(contenido.toString(),0,nombreright,"Se esperaba tipo Cadena, tipo Numerico encontrado","Semantico");
                                    semanticos.insertar(errorx);
                                }catch(NumberFormatException nfee){
                                    if(contenido != null){
                                        Variable var = new Variable(nombre,"string",contenido);
                                        String resultado = variables.insertar(var);
                                        if(!resultado.equals("Ingresada")){
                                            Errores errorx = new Errores(nombre,0,nombreright,"Variable ya existente","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                    }
                                }
                            }
                        } else {
                            Errores errorx = new Errores("-------",0,nombreright,"Cabecera no encontrada","Semantico");
                            semanticos.insertar(errorx);
                        }
                    :}
        | FUNCION:valor puntoComa
                    {:
                        if(valor != null){
                            RESULT = valor.toString();
                        }
                    :}
        | COM2
        ;
FUNCION ::= sumar parenteA ident:nombre coma cadena:campo parenteC
                    {:
                        NodoCola temp = colaArchivos.cabeza;
                        int resultado = 0;
                        int cabeceraEncontrada = 0;
                        int archivoEncontrado = 0;
                        int error = 0;
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                                for(int i = 0; i < cabeceras.size(); i++){
                                    if(cabeceras.get(i).getNombre().equals(campo.replace("\"",""))){
                                        if(cabeceras.get(i).getTipo().equals("int")){
                                            ArrayList<Registro> registros = archivo.getRegistros();
                                            for(int j = 0; j < registros.size(); j++){
                                                try{
                                                    int numero = Integer.parseInt(registros.get(j).getRegistros().get(i).toString());
                                                    resultado += numero;
                                                }catch(NumberFormatException nfe){
                                                    try{
                                                        double numero = Double.parseDouble(registros.get(j).getRegistros().get(i).toString());
                                                        resultado += numero;
                                                    }catch(NumberFormatException nfee){

                                                    }
                                                }
                                            }
                                        } else {
                                            error++;
                                            Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"Valor de cabecera esperado Numerico, tipo Cadena encontrado","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                        cabeceraEncontrada++;
                                    }
                                }
                                if(cabeceraEncontrada == 0){
                                    error++;
                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"La cabecera no existe","Semantico");
                                    semanticos.insertar(errorx);
                                }
                                archivoEncontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(archivoEncontrado == 0){
                            error++;
                            Errores errorx = new Errores(nombre,0,camporight,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                        }
                        if(error != 0){
                            RESULT = null;
                        }else{
                            RESULT = resultado;
                        }
                    :}
        | contar parenteA ident:nombre parenteC 
                    {:
                        NodoCola temp = colaArchivos.cabeza;
                        int retorno = 0;
                        int encontrado = 0;
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Registro> registros = archivo.getRegistros();
                                retorno = registros.size();
                                encontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(encontrado == 0){
                            Errores errorx = new Errores(nombre,0,nombreright,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                            RESULT = null;
                        } else {
                            RESULT = retorno;
                        }
                    :}
        | promedio parenteA ident:nombre coma cadena:campo parenteC
                    {:
                        NodoCola temp = colaArchivos.cabeza;
                        int resultado = 0;
                        int cantidad = 0;
                        int archivoEncontrado = 0;
                        int cabeceraEncontrada = 0;
                        double retorno = 0;
                        int error = 0;
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                                for(int i = 0; i < cabeceras.size(); i++){
                                    if(cabeceras.get(i).getNombre().equals(campo.replace("\"",""))){
                                        if(cabeceras.get(i).getTipo().equals("int")){
                                            ArrayList<Registro> registros = archivo.getRegistros();
                                            cantidad = registros.size();
                                            for(int j = 0; j < cantidad; j++){
                                                try{
                                                    int numero = Integer.parseInt(registros.get(j).getRegistros().get(i).toString());
                                                    resultado += Math.abs(numero);
                                                }catch(NumberFormatException nfe){
                                                    try{
                                                        double numero = Double.parseDouble(registros.get(j).getRegistros().get(i).toString());
                                                        resultado += Math.abs(numero);
                                                    }catch(NumberFormatException nfee){

                                                    }
                                                }
                                            }
                                        } else {
                                            error++;
                                            Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"Valor de cabecera esperado Numerico, tipo Cadena encontrado","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                        cabeceraEncontrada++;
                                        break;
                                    }
                                }
                                if(cabeceraEncontrada == 0){
                                    error++;
                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"La cabecera no existe","Semantico");
                                    semanticos.insertar(errorx);
                                }
                                archivoEncontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(archivoEncontrado == 0){
                            error++;
                            Errores errorx = new Errores(nombre,0,camporight,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                        }
                        if(error != 0){
                            RESULT = null;
                        }else{
                            if(resultado == 0){
                                Errores errorx = new Errores(campo,0,camporight,"Division por 0","Semantico");
                                semanticos.insertar(errorx);
                                RESULT = null;
                            } else {
                                retorno = (double)resultado/cantidad;
                                RESULT = retorno;
                            }
                        }
                    :}
        | contarSi parenteA ident:nombre coma cadena:campo coma OPER1:operador coma VALOR:valor parenteC
                    {:
                        NodoCola temp = colaArchivos.cabeza;
                        int contador = 0;
                        int error = 0;
                        int cabeceraEncontrada = 0;
                        int archivoEncontrado = 0;
                        int cantidad = 0;
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                                for(int i = 0; i < cabeceras.size(); i++){
                                    if(cabeceras.get(i).getNombre().equals(campo.replace("\"",""))){
                                        String tipo = cabeceras.get(i).getTipo();
                                        switch(tipo){
                                            case "string":
						if(valor.startsWith("\"")){
                                                    ArrayList<Registro> registros = archivo.getRegistros();
                                                    cantidad = registros.size();
                                                    switch(operador){
                                                        case "==":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(registros.get(j).getRegistros().get(i).toString().equals(valor.replace("\"",""))){
                                                                    contador++;
                                                                }
                                                            }
                                                        break;
                                                        case "!=":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(!registros.get(j).getRegistros().get(i).toString().equals(valor.replace("\"",""))){
                                                                    contador++;
                                                                }
                                                            }
                                                        break;
                                                        default:
                                                            error++;
                                                            Errores errorx = new Errores(operador,0,operadorright,"Operador Erroneo","Semantico");
                                                            semanticos.insertar(errorx);
                                                        break;
                                                    }
						} else {
                                                    error++;
                                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"Valor de cabecera esperado Cadena, tipo Numerico encontrado","Semantico");
                                                    semanticos.insertar(errorx);
						}
                                            break;
                                            case "int":
						if(!valor.startsWith("\"")){
                                                    ArrayList<Registro> registros = archivo.getRegistros();
                                                    cantidad = registros.size();
                                                    switch(operador){
                                                        case "==":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) == Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        case "!=":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) != Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        case "<":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) < Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        case ">":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) > Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        case ">=":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) >= Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        case "<=":
                                                            for (int j = 0; j < cantidad; j++) {
        	          					if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) <= Integer.parseInt(valor)){
                                                                    contador++;
        	          					}
                                                            }
                                                        break;
                                                        default:
                                                            error++;
                                                            Errores errorx = new Errores(operador,0,operadorright,"Operador Erroneo","Semantico");
                                                            semanticos.insertar(errorx);
                                                        break;
                                                    }
						} else {
                                                    error++;
                                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"Valor de cabecera esperado Numerico, tipo Cadena encontrado","Semantico");
                                                    semanticos.insertar(errorx);
						}
                                            break;
                                        }
                                        cabeceraEncontrada++;
                                        break;
                                    }
                                }
                                if(cabeceraEncontrada == 0){
                                    error++;
                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"La cabecera no existe","Semantico");
                                    semanticos.insertar(errorx);
                                }
                                archivoEncontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(archivoEncontrado == 0){
                            error++;
                            Errores errorx = new Errores(nombre,0,camporight,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                        }
                        if(error != 0){
                            RESULT = null;
                        } else {
                            RESULT = String.valueOf(contador);
                        }
                    :}
        | obtenerSi parenteA ident:nombre coma cadena:campo coma OPER1:operador coma VALOR:valor parenteC
                                        {:
                        NodoCola temp = colaArchivos.cabeza;
                        int contador = 0;
                        int error = 0;
                        int cabeceraEncontrada = 0;
                        int archivoEncontrado = 0;
                        int cantidad = 0;
                        String cadena = "[\n";
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                                for(int i = 0; i < cabeceras.size(); i++){
                                    if(cabeceras.get(i).getNombre().equals(campo.replace("\"",""))){
                                        String tipo = cabeceras.get(i).getTipo();
                                        switch(tipo){
                                            case "string":
                                                if(valor.startsWith("\"")){
                                                    ArrayList<Registro> registros = archivo.getRegistros();
                                                    cantidad = registros.size();
                                                    switch(operador){
                                                        case "==":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(registros.get(j).getRegistros().get(i).toString().equals(valor.replace("\"",""))){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case "!=":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(!registros.get(j).getRegistros().get(i).toString().equals(valor.replace("\"",""))){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        default:
                                                            error++;
                                                            Errores errorx = new Errores(operador,0,operadorright,"Operador Erroneo","Semantico");
                                                            semanticos.insertar(errorx);
                                                        break;
                                                    }
                                                } else {
                                                    error++;
                                                    Errores errorx = new Errores(campo,0,camporight,"Valor de cabecera esperado Cadena, tipo Numerico encontrado","Semantico");
                                                    semanticos.insertar(errorx);
                                                }
                                            break;
                                            case "int":
                                                if(!valor.startsWith("\"")){
                                                    ArrayList<Registro> registros = archivo.getRegistros();
                                                    cantidad = registros.size();
                                                    switch(operador){
                                                        case "==":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) == Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case "!=":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) != Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case "<":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) < Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case ">":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) > Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case "<=":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) <= Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        case ">=":
                                                            for (int j = 0; j < cantidad; j++) {
                                                                if(Integer.parseInt(registros.get(j).getRegistros().get(i).toString()) >= Integer.parseInt(valor)){
                                                                    //Aca genero mis datos
                                                                    ArrayList<Object> datos = registros.get(j).getRegistros();
                                                                    String cuerpo = "\t{";
                                                                    for (int k = 0; k < datos.size() ; k++) {
                                                                        if(k == 0){
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        } else {
                                                                            String cabe = cabeceras.get(k).getNombre();
                                                                            String dat = datos.get(k).toString();
                                                                            String resul = " , " + cabe + " : " + dat;
                                                                            cuerpo += resul;
                                                                        }
                                                                    }
                                                                    cadena += cuerpo + "}\n";
                                                                }
                                                            }
                                                            cadena += "]";
                                                        break;
                                                        default:
                                                            error++;
                                                            Errores errorx = new Errores(operador,0,operadorright,"Operador Erroneo","Semantico");
                                                            semanticos.insertar(errorx);
                                                        break;
                                                    }
                                                } else {
                                                    error++;
                                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"Valor de cabecera esperado Numerico, tipo Cadena encontrado","Semantico");
                                                    semanticos.insertar(errorx);
                                                }
                                            break;
                                        }
                                        cabeceraEncontrada++;
                                        break;
                                    }
                                }
                                if(cabeceraEncontrada == 0){
                                    error++;
                                    Errores errorx = new Errores(campo.replace("\"",""),0,camporight,"La cabecera no existe","Semantico");
                                    semanticos.insertar(errorx);
                                }
                                archivoEncontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(archivoEncontrado == 0){
                            error++;
                            Errores errorx = new Errores(nombre,0,nombreright,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                        }
                        if(error != 0){
                            RESULT = null;
                        } else {
                            RESULT = cadena;
                        }
                    :}
        | graficar parenteA cadena:nombreGraf coma cadena:titulo coma ident:nombre coma cadena:ejeX coma cadena:ejeY parenteC
                    {:
                        NodoCola temp = colaArchivos.cabeza;
                        int cantidad = 0;
                        int archivoEncontrado = 0;
                        int cabeceraEncontrada = 0;
                        int error = 0;
                        Object campo1[] = new Object[1];
                        String campo2[] = new String[1];
                        while(temp != null){
                            Archivo archivo = (Archivo) temp.getContenido();
                            if(archivo.getNombre().equals(nombre)){
                                ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                                for(int i = 0; i < cabeceras.size(); i++){
                                    if(cabeceras.get(i).getNombre().equals(ejeY.replace("\"",""))){
                                        if(cabeceras.get(i).getTipo().equals("int")){
                                            ArrayList<Registro> registros = archivo.getRegistros();
                                            cantidad = registros.size();
                                            campo1 = new Object[cantidad];
                                            for(int j = 0; j < cantidad; j++){
                                                try{
                                                    int numero = Integer.parseInt(registros.get(j).getRegistros().get(i).toString());
                                                    campo1[j] = numero;
                                                }catch(NumberFormatException nfe){
                                                    try{
                                                        double numero = Double.parseDouble(registros.get(j).getRegistros().get(i).toString());
                                                        campo1[j] = numero;
                                                    }catch(NumberFormatException nfee){

                                                    }
                                                }
                                            }
                                        } else {
                                            error++;
                                            Errores errorx = new Errores(ejeX.replace("\"",""),0,ejeXright,"Valor de cabecera esperado Numerico, tipo Cadena encontrado","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                        cabeceraEncontrada++;
                                    }
                                    if(cabeceras.get(i).getNombre().equals(ejeX.replace("\"",""))){
                                        if(cabeceras.get(i).getTipo().equals("string")){
                                            ArrayList<Registro> registros = archivo.getRegistros();
                                            cantidad = registros.size();
                                            campo2 = new String[cantidad];
                                            for(int j = 0; j < cantidad; j++){
                                                String cadena = registros.get(j).getRegistros().get(i).toString();
                                                campo2[j] = cadena;
                                            }
                                        } else {
                                            error++;
                                            Errores errorx = new Errores(ejeX.replace("\"",""),0,ejeXright,"Valor de cabecera esperado Cadena, tipo Numerico encontrado","Semantico");
                                            semanticos.insertar(errorx);
                                        }
                                        cabeceraEncontrada++;
                                    }
                                }
                                if(cabeceraEncontrada == 0){
                                    error++;
                                    Errores errorx = new Errores(ejeX.replace("\"",""),0,ejeXright,"La cabecera no existe","Semantico");
                                    semanticos.insertar(errorx);
                                }
                                archivoEncontrado++;
                                break;
                            }
                            temp = temp.getSiguiente();
                        }
                        if(archivoEncontrado == 0){
                            error++;
                            Errores errorx = new Errores(nombre,0,ejeXright,"El archivo no existe","Semantico");
                            semanticos.insertar(errorx);
                        }
                        if(error != 0){
                           RESULT = null;
                        }else{
                            final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                            for(int i = 0; i < campo1.length; i++){
                                try{
                                    int numero = Integer.parseInt(campo1[i].toString());
                                    dataset.addValue(numero,campo2[i],campo2[i]);
                                }catch(NumberFormatException nfe){
                                    try{
                                        double numero = Double.parseDouble(campo1[i].toString());
                                        dataset.addValue(numero,campo2[i],campo2[i]);
                                    }catch(NumberFormatException nfee){

                                    }
                                }
                            }
                            JFreeChart barChart = ChartFactory.createBarChart(nombreGraf.replace("\"",""), ejeX.replace("\"",""), ejeY.replace("\"",""), dataset,PlotOrientation.VERTICAL, true, true, false);
                            int width = 1300;
                            int height = 600;
                            File BarChart = new File( nombreGraf.replace("\"","") + ".jpeg" ); 
                            try {
                                ChartUtilities.saveChartAsJPEG( BarChart , barChart , width , height );
                            } catch (IOException ex) {
                                Logger.getLogger(Analisis_Sintactico_Reportes.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    :}
        ;
OPER1 ::= OPER2:operador igual
                    {:
                        String op = operador + "=";
                        RESULT = op;
                    :}
        | menorQue
                    {:
                        RESULT = "<";
                    :}
        | mayorQue
                    {:
                        RESULT = ">";
                    :}
        ;
OPER2 ::= menorQue
                    {:
                        RESULT = "<";
                    :}
        | mayorQue
                    {:
                        RESULT = ">";
                    :}
        | diferente
                    {:
                        RESULT = "!";
                    :}
        | igual
                    {:
                        RESULT = "=";
                    :}
        ;