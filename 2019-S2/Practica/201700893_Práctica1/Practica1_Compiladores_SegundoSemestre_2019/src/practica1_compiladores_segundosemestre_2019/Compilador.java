/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica1_compiladores_segundosemestre_2019;

import Analizadores.*;
import Estructuras.*;
import Modelos.Archivo;
import Modelos.Cabecera;
import Modelos.Errores;
import Modelos.Registro;
import Nodos.NodoCola;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JViewport;

/**
 *
 * @author USER
 */
public class Compilador extends javax.swing.JFrame {

    public Cola colaArchivos = new Cola();
    public String[] rutas = new String[0];

    /**
     * Creates new form Compilador
     */
    public Compilador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        archivos = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        areaConsola = new javax.swing.JTextArea();
        seleccionar = new javax.swing.JFileChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        botonNuevo = new javax.swing.JMenuItem();
        botonAbrir = new javax.swing.JMenuItem();
        botonGuardar = new javax.swing.JMenuItem();
        botonGuardarComo = new javax.swing.JMenuItem();
        botonSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        botonCompilar = new javax.swing.JMenuItem();
        botonErrores = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        archivos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                archivosStateChanged(evt);
            }
        });
        archivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                archivosMouseClicked(evt);
            }
        });

        areaConsola.setColumns(20);
        areaConsola.setRows(5);
        jScrollPane4.setViewportView(areaConsola);

        jMenu1.setText("Archivo");

        botonNuevo.setText("Nuevo");
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(botonNuevo);

        botonAbrir.setText("Abrir");
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(botonAbrir);

        botonGuardar.setText("Guardar");
        botonGuardar.setEnabled(false);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(botonGuardar);

        botonGuardarComo.setText("Guardar Como");
        botonGuardarComo.setEnabled(false);
        botonGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(botonGuardarComo);

        botonSalir.setText("Salir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });
        jMenu1.add(botonSalir);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Funciones");
        jMenu2.setEnabled(false);

        botonCompilar.setText("Compilar");
        botonCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCompilarActionPerformed(evt);
            }
        });
        jMenu2.add(botonCompilar);

        botonErrores.setText("Ver Errores");
        botonErrores.setEnabled(false);
        botonErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonErroresActionPerformed(evt);
            }
        });
        jMenu2.add(botonErrores);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(archivos, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(archivos, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        // TODO add your handling code here:
        //GUARDAR
        JScrollPane scrollPane = (JScrollPane) archivos.getSelectedComponent();
        JViewport viewPort = (JViewport) scrollPane.getComponent(0);
        JTextArea areaTexto = (JTextArea) viewPort.getComponent(0);
        String Documento = areaTexto.getText();
        File archivo = new File(areaTexto.getName());
        String mensaje = GuardarArchivo(archivo, Documento);
        if (mensaje != null) {
            JOptionPane.showMessageDialog(null, mensaje);
        } else {
            JOptionPane.showMessageDialog(null, "Extension no compatible");
        }
    }//GEN-LAST:event_botonGuardarActionPerformed

    public String GuardarArchivo(File archivo, String documento) {
        String mensaje = null;
        try {
            FileOutputStream salida = new FileOutputStream(archivo);
            byte[] bytxt = documento.getBytes();
            salida.write(bytxt);
            mensaje = "archivo guardado";
        } catch (IOException e) {
        }
        return mensaje;
    }

    private void botonGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarComoActionPerformed
        // TODO add your handling code here:
        //GUARDAR
        if (seleccionar.showDialog(null, "Guardar") == JFileChooser.APPROVE_OPTION) {
            File archivo = seleccionar.getSelectedFile();
            if (archivo.getName().endsWith("rep") || archivo.getName().endsWith("dat")) {
                JScrollPane scrollPane = (JScrollPane) archivos.getSelectedComponent();
                JViewport viewPort = (JViewport) scrollPane.getComponent(0);
                JTextArea areaTexto = (JTextArea) viewPort.getComponent(0);
                String Documento = areaTexto.getText();
                String mensaje = GuardarArchivo(archivo, Documento);
                if (mensaje != null) {
                    JOptionPane.showMessageDialog(null, mensaje);
                } else {
                    JOptionPane.showMessageDialog(null, "Extension no compatible");
                }
            }
        }
    }//GEN-LAST:event_botonGuardarComoActionPerformed

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        if (seleccionar.showDialog(null, "Abrir") == JFileChooser.APPROVE_OPTION) {
            File archivo = seleccionar.getSelectedFile();
            if (archivo.canRead()) {
                if (archivo.getName().endsWith("rep") || archivo.getName().endsWith("dat")) {
                    JViewport viewPort = new JViewport();
                    JTextArea textArea = new JTextArea();
                    textArea.setName(archivo.getPath());
                    JScrollPane scrollPane = new JScrollPane(textArea);
                    scrollPane.add(viewPort);
                    archivos.add(archivo.getName(), scrollPane);
                    archivos.setSelectedIndex(archivos.getComponents().length - 1);
                    String documento = AbrirArchivo(archivo);
                    scrollPane = (JScrollPane) archivos.getSelectedComponent();
                    viewPort = (JViewport) scrollPane.getComponent(0);
                    JTextArea areaTexto = (JTextArea) viewPort.getComponent(0);
                    areaTexto.setText("");
                    areaTexto.setText(documento);
                    botonGuardar.setEnabled(true);
                    botonGuardarComo.setEnabled(true);
                    jMenu2.setEnabled(true);
                    TransportarRutas();
                } else {
                    JOptionPane.showMessageDialog(null, "Extension no compatible");
                }
            }
        }
    }//GEN-LAST:event_botonAbrirActionPerformed

    public String AbrirArchivo(File archivo) {
        String documento = "";
        /*try {
            FileInputStream entrada = new FileInputStream(archivo);
            int ascci;
            while ((ascci = entrada.read()) != -1) {
                char caracter = (char) ascci;
                System.out.println(ascci);
                System.out.println(caracter);
                System.out.println("-------------");
                documento += caracter;
            }
        } catch (IOException e) {
        }*/
        try {
            try (BufferedReader in = new BufferedReader(
                    new InputStreamReader(
                            new FileInputStream(archivo), "UTF8"))) {
                String str;

                while ((str = in.readLine()) != null) {
                    documento += str + "\n";
                }
            }
        } catch (IOException e) {
        }
        documento = documento.replace("á", "a");
        documento = documento.replace("é", "e");
        documento = documento.replace("í", "i");
        documento = documento.replace("ó", "o");
        documento = documento.replace("ú", "u");
        documento = documento.replace("ñ", "n");
        return documento;
    }

    private void botonCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCompilarActionPerformed
        // TODO add your handling code here:
        JScrollPane scrollPane = (JScrollPane) archivos.getSelectedComponent();
        JViewport viewPort = (JViewport) scrollPane.getComponent(0);
        JTextArea areaTexto = (JTextArea) viewPort.getComponent(0);
        if (areaTexto.getName().endsWith("rep")) {
            areaConsola.setText("");
            String datos_datos = areaTexto.getText();
            Analisis_Lexico_Reportes lexico_Reportes = new Analisis_Lexico_Reportes(new BufferedReader(new StringReader(datos_datos)));
            Analisis_Sintactico_Reportes sintactico_reportes = new Analisis_Sintactico_Reportes(lexico_Reportes);
            try {
                sintactico_reportes.parse();
                String inicioHtml = "<!DOCTYPE html>\n"
                        + "<html>\n"
                        + "<head>\n"
                        + "	<title>Errores Lexicos, Sintacticos y Semanticos</title>\n"
                        + "</head>\n"
                        + "<style type=\"text/css\">\n"
                        + "	table.greenTable {\n"
                        + "  font-family: Georgia, serif;\n"
                        + "  border: 6px solid #24943A;\n"
                        + "  background-color: #D4EED1;\n"
                        + "  width: 100%;\n"
                        + "  text-align: center;\n"
                        + "}\n"
                        + "table.greenTable td, table.greenTable th {\n"
                        + "  border: 1px solid #24943A;\n"
                        + "  padding: 3px 2px;\n"
                        + "}\n"
                        + "table.greenTable tbody td {\n"
                        + "  font-size: 13px;\n"
                        + "}\n"
                        + "table.greenTable thead {\n"
                        + "  background: #24943A;\n"
                        + "  background: -moz-linear-gradient(top, #5baf6b 0%, #3a9e4d 66%, #24943A 100%);\n"
                        + "  background: -webkit-linear-gradient(top, #5baf6b 0%, #3a9e4d 66%, #24943A 100%);\n"
                        + "  background: linear-gradient(to bottom, #5baf6b 0%, #3a9e4d 66%, #24943A 100%);\n"
                        + "  border-bottom: 0px solid #444444;\n"
                        + "}\n"
                        + "table.greenTable thead th {\n"
                        + "  font-size: 19px;\n"
                        + "  font-weight: bold;\n"
                        + "  color: #F0F0F0;\n"
                        + "  text-align: center;\n"
                        + "  border-left: 2px solid #24943A;\n"
                        + "}\n"
                        + "table.greenTable thead th:first-child {\n"
                        + "  border-left: none;\n"
                        + "}\n"
                        + "\n"
                        + "table.greenTable tfoot {\n"
                        + "  font-size: 13px;\n"
                        + "  font-weight: bold;\n"
                        + "  color: #F0F0F0;\n"
                        + "  background: #24943A;\n"
                        + "  background: -moz-linear-gradient(top, #5baf6b 0%, #3a9e4d 66%, #24943A 100%);\n"
                        + "  background: -webkit-linear-gradient(top, #5baf6b 0%, #3a9e4d 66%, #24943A 100%);\n"
                        + "  background: linear-gradient(to bottom, #5baf6b 0%, #3a9e4d 66%, #24943A 100%);\n"
                        + "  border-top: 1px solid #24943A;\n"
                        + "}\n"
                        + "table.greenTable tfoot td {\n"
                        + "  font-size: 13px;\n"
                        + "}\n"
                        + "table.greenTable tfoot .links {\n"
                        + "  text-align: right;\n"
                        + "}\n"
                        + "table.greenTable tfoot .links a{\n"
                        + "  display: inline-block;\n"
                        + "  background: #FFFFFF;\n"
                        + "  color: #24943A;\n"
                        + "  padding: 2px 8px;\n"
                        + "  border-radius: 5px;\n"
                        + "}\n"
                        + "</style>\n"
                        + "<body>\n"
                        + "<table class= \"greenTable\">\n"
                        + "	<thead>\n"
                        + "		<th><p>Numero</p></th>\n"
                        + "		<th><p>Tipo</p></th>\n"
                        + "		<th><p>Lexema</p></th>\n"
                        + "		<th><p>Fila</p></th>\n"
                        + "		<th><p>Columna</p></th>\n"
                        + "		<th><p>Archivo</p></th>\n"
                        + "		<th><p>Mensaje</p></th>\n"
                        + "	</thead>\n"
                        + "	</tr>	\n"
                        + "	<tbody>";
                String finHtml = "</tbody>\n"
                        + "</table>\n"
                        + "</body>\n"
                        + "</html>";
                String medioHtml = "";
                int iterador = 1;
                if (sintactico_reportes.TodosLosErrores.cabeza == null && lexico_Reportes.ErroresLexicos.cabeza == null) {
                    //Comprobacion de datos en consola
                    Cola cola = sintactico_reportes.colaArchivos;
                    NodoCola temp = cola.cabeza;
                    while (temp != null) {
                        String cadena = "";
                        Archivo archivo = (Archivo) temp.getContenido();
                        ArrayList<Cabecera> cabeceras = archivo.getCabeceras();
                        for (int i = 0; i < cabeceras.size(); i++) {
                            cadena += "Cabecera: " + cabeceras.get(i).getNombre() + " | "
                                    + "Tipo: " + cabeceras.get(i).getTipo() + "\n";
                        }
                        cadena += "---------------------------------\n";
                        ArrayList<Registro> registros = archivo.getRegistros();
                        for (int i = 0; i < registros.size(); i++) {
                            ArrayList<Object> registro = registros.get(i).getRegistros();
                            for (int j = 0; j < registro.size(); j++) {
                                cadena += cabeceras.get(j).getNombre() + " : " + registro.get(j).toString() + "\n";
                            }
                            cadena += "---------------------------------\n";
                        }
                        System.out.println(cadena);
                        System.out.println("*************************************");
                        temp = temp.getSiguiente();
                    }
                } else {

                }
                NodoCola impresion = sintactico_reportes.instrucciones.cabeza;
                String cadena = "";
                while (impresion != null) {
                    cadena += (String) impresion.getContenido() + "\n";
                    impresion = impresion.getSiguiente();
                }
                areaConsola.setText(cadena);
                NodoCola tempArchivo = sintactico_reportes.colaArchivos.cabeza;
                while (tempArchivo != null) {
                    Archivo archivo = (Archivo) tempArchivo.getContenido();
                    NodoCola tempErrores = archivo.getErrores().cabeza;
                    while (tempErrores != null) {
                        if (tempErrores.getContenido() instanceof Errores) {
                            Errores error = (Errores) tempErrores.getContenido();
                            String tipo = error.getTipo();
                            String fila = String.valueOf(error.getLinea());
                            String columna = String.valueOf(error.getColumna());
                            String lexema = "";
                            if (error.getLexema() == null || error.getLexema().equals("")) {
                                lexema = "------";
                            } else {
                                lexema = error.getLexema();
                            }
                            String mensaje = error.getMensaje();
                            String nombreArchivo = archivo.getNombre();
                            medioHtml += "	<tr>\n"
                                    + "		<td>\n"
                                    + "			<p>\n"
                                    + "				" + iterador + "\n"
                                    + "			</p>\n"
                                    + "		</td>\n"
                                    + "		<td>\n"
                                    + "			<p>\n"
                                    + "				" + tipo + "\n"
                                    + "			</p>\n"
                                    + "		</td>\n"
                                    + "		<td>\n"
                                    + "			<p>\n"
                                    + "				" + lexema + "\n"
                                    + "			</p>\n"
                                    + "		</td>\n"
                                    + "		<td>\n"
                                    + "			<p>\n"
                                    + "				" + fila + "\n"
                                    + "			</p>\n"
                                    + "		</td>\n"
                                    + "		<td>\n"
                                    + "			<p>\n"
                                    + "				" + columna + "\n"
                                    + "			</p>\n"
                                    + "		</td>\n"
                                    + "		<td>\n"
                                    + "			<p>\n"
                                    + "				" + nombreArchivo + "\n"
                                    + "			</p>\n"
                                    + "		</td>\n"
                                    + "		<td>\n"
                                    + "			<p>\n"
                                    + "				" + mensaje + "\n"
                                    + "			</p>\n"
                                    + "		</td>\n"
                                    + "	</tr>";
                            iterador++;
                        }
                        tempErrores = tempErrores.getSiguiente();
                    }
                    tempArchivo = tempArchivo.getSiguiente();
                }
                NodoCola nodo = sintactico_reportes.TodosLosErrores.cabeza;
                while (nodo != null) {
                    if (nodo.getContenido() instanceof Errores) {
                        Errores error = (Errores) nodo.getContenido();
                        String tipo = error.getTipo();
                        String fila = String.valueOf(error.getLinea());
                        String columna = String.valueOf(error.getColumna());
                        String lexema = "";
                        if (error.getLexema() == null || error.getLexema().equals("")) {
                            lexema = "------";
                        } else {
                            lexema = error.getLexema();
                        }
                        String mensaje = error.getMensaje();
                        String nombreArchivo = "";
                        medioHtml += "	<tr>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + iterador + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + tipo + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + lexema + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + fila + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + columna + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + nombreArchivo + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + mensaje + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "	</tr>";
                        iterador++;
                    } else if (nodo.getContenido() instanceof Cola) {
                        System.out.println("COLA");
                    } else {
                        System.out.println("OTRO");
                    }
                    nodo = nodo.getSiguiente();
                }
                if (sintactico_reportes.semanticos.contador != 0) {
                    nodo = sintactico_reportes.semanticos.cabeza;
                    while (nodo != null) {
                        Errores error = (Errores) nodo.getContenido();
                        String tipo = error.getTipo();
                        String fila = String.valueOf(error.getLinea());
                        String columna = String.valueOf(error.getColumna());
                        String lexema = "";
                        if (error.getLexema() == null || error.getLexema().equals("")) {
                            lexema = "------";
                        } else {
                            lexema = error.getLexema();
                        }
                        String mensaje = error.getMensaje();
                        String nombreArchivo = "";
                        medioHtml += "	<tr>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + iterador + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + tipo + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + lexema + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + fila + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + columna + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + nombreArchivo + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "		<td>\n"
                                + "			<p>\n"
                                + "				" + mensaje + "\n"
                                + "			</p>\n"
                                + "		</td>\n"
                                + "	</tr>";
                        iterador++;
                        nodo = nodo.getSiguiente();
                    }
                }
                String html = inicioHtml + medioHtml + finHtml;
                int index = archivos.getSelectedIndex();
                String nombreReporte = archivos.getTitleAt(index);
                File f = new File(areaTexto.getName());
                String ruta = f.getPath().replace(f.getName(),"");
                File file = new File(ruta + "reporte_" + nombreReporte + ".html");
                rutas[index] = file.getPath();
                file.createNewFile();
                try (FileWriter writer = new FileWriter(file)) {
                    writer.write(html);
                    writer.close();
                }
                botonErrores.setEnabled(true);
            } catch (Exception ex) {
                Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Solo se pueden compilar archivos REP");
        }
    }//GEN-LAST:event_botonCompilarActionPerformed

    private void archivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_archivosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_archivosMouseClicked

    private void archivosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_archivosStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_archivosStateChanged

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        // TODO add your handling code here:
        if (seleccionar.showDialog(null, "Guardar") == JFileChooser.APPROVE_OPTION) {
            File archivo = seleccionar.getSelectedFile();
            if (archivo.getName().endsWith("rep") || archivo.getName().endsWith("dat")) {
                try {
                    archivo.createNewFile();
                    JViewport viewPort = new JViewport();
                    JTextArea textArea = new JTextArea();
                    textArea.setName(archivo.getPath());
                    JScrollPane scrollPane = new JScrollPane(textArea);
                    scrollPane.add(viewPort);
                    archivos.add(archivo.getName(), scrollPane);
                    botonGuardar.setEnabled(true);
                    botonGuardarComo.setEnabled(true);
                    jMenu2.setEnabled(true);
                    TransportarRutas();
                } catch (IOException ex) {
                    Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Extension no compatible");
            }
        }
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_botonSalirActionPerformed

    private void botonErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonErroresActionPerformed
        // TODO add your handling code here:
        //ABRIR ERRORES
        int index = archivos.getSelectedIndex();
        if (!rutas[index].isEmpty()) {
            File htmlFile = new File(rutas[index]);
            try {
                Desktop.getDesktop().browse(htmlFile.toURI());
            } catch (IOException ex) {
                Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_botonErroresActionPerformed

    public void TransportarRutas(){
        int cantidad = archivos.getComponentCount();
        String nuevo[] = new String[cantidad];
        for (int i = 0; i < rutas.length; i++) {
            nuevo[i] = rutas[i];
        }
        rutas = nuevo;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compilador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane archivos;
    private javax.swing.JTextArea areaConsola;
    private javax.swing.JMenuItem botonAbrir;
    private javax.swing.JMenuItem botonCompilar;
    private javax.swing.JMenuItem botonErrores;
    private javax.swing.JMenuItem botonGuardar;
    private javax.swing.JMenuItem botonGuardarComo;
    private javax.swing.JMenuItem botonNuevo;
    private javax.swing.JMenuItem botonSalir;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JFileChooser seleccionar;
    // End of variables declaration//GEN-END:variables
}
