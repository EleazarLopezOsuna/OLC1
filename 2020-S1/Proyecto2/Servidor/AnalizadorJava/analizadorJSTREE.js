/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorJSTREE = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[5,85,89],$V3=[1,27],$V4=[1,28],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,43],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[1,37],$Vi=[1,38],$Vj=[24,28,39,42,43,44,45,46,68,71,77,78,79,83,86,90,91],$Vk=[1,48],$Vl=[1,49],$Vm=[1,51],$Vn=[1,54],$Vo=[1,52],$Vp=[1,53],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,86],$Vw=[1,87],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[25,26,27,32,33,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$VM=[2,79],$VN=[25,26,27,32,33,47,48,49,50,51,52,53,54,55,56,57,58,59,60,75],$VO=[26,33,40],$VP=[1,120],$VQ=[1,121],$VR=[24,28,39,42,43,44,45,46,68,71,74,76,77,78,79,83,86,90,91],$VS=[1,129],$VT=[32,33],$VU=[26,32,33,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$VV=[2,48],$VW=[24,28,39,42,43,44,45,46,68,71,74,76,77,78,79,83,90,91],$VX=[26,32,33,47,48,53,54,55,56,57,58,59,60],$VY=[26,32,33,47,48,49,50,51,53,54,55,56,57,58,59,60],$VZ=[26,32,33,59,60],$V_=[26,32,33,53,54,59,60],$V$=[1,172],$V01=[1,192],$V11=[1,193],$V21=[39,74,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"l_ins_p":4,"EOF":5,"ins_p":6,"l_ins_s":7,"ins_s":8,"l_ins_t":9,"ins_t":10,"func_crear_clase":11,"func_import":12,"func_llamar_metodo_funcion":13,"func_declarar":14,"func_if":15,"func_switch":16,"func_while":17,"func_do":18,"func_print":19,"func_for":20,"func_crear_metodo":21,"func_reasignar":22,"func_break_continue":23,"IDENTIFICADOR":24,"++":25,";":26,"--":27,"RETURN":28,"e":29,"(":30,"lista_parametros":31,")":32,",":33,"tipo":34,"lista_identificador":35,"tipo_declaracion":36,"parametros":37,"{":38,"}":39,"=":40,"t_param":41,"INT":42,"DOUBLE":43,"BOOLEAN":44,"CHAR":45,"STRING":46,"+":47,"-":48,"*":49,"/":50,"%":51,"^":52,"==":53,"!=":54,">":55,"<":56,">=":57,"<=":58,"&&":59,"||":60,"!":61,"dato":62,"ENTERO":63,"CADENA":64,"BOLEANO":65,"CARACTER":66,"DOBLE":67,"IF":68,"ver_else":69,"ELSE":70,"SWITCH":71,"lista_cases_default":72,"t_case":73,"CASE":74,":":75,"DEFAULT":76,"WHILE":77,"DO":78,"SYSTEM":79,".":80,"OUT":81,"PRINTLN":82,"FOR":83,"for_inicio":84,"CLASS":85,"VOID":86,"tipo_metodo":87,"MAIN":88,"IMPORT":89,"BREAK":90,"CONTINUE":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",24:"IDENTIFICADOR",25:"++",26:";",27:"--",28:"RETURN",30:"(",32:")",33:",",38:"{",39:"}",40:"=",42:"INT",43:"DOUBLE",44:"BOOLEAN",45:"CHAR",46:"STRING",47:"+",48:"-",49:"*",50:"/",51:"%",52:"^",53:"==",54:"!=",55:">",56:"<",57:">=",58:"<=",59:"&&",60:"||",61:"!",63:"ENTERO",64:"CADENA",65:"BOLEANO",66:"CARACTER",67:"DOBLE",68:"IF",70:"ELSE",71:"SWITCH",74:"CASE",75:":",76:"DEFAULT",77:"WHILE",78:"DO",79:"SYSTEM",80:".",81:"OUT",82:"PRINTLN",83:"FOR",85:"CLASS",86:"VOID",88:"MAIN",89:"IMPORT",90:"BREAK",91:"CONTINUE"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[9,2],[9,1],[6,1],[6,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,3],[10,3],[10,3],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,3],[8,3],[8,3],[13,5],[31,3],[31,1],[14,3],[14,8],[35,3],[35,1],[36,3],[36,1],[37,3],[37,1],[37,0],[41,2],[34,1],[34,1],[34,1],[34,1],[34,1],[29,4],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,3],[29,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[15,8],[15,7],[69,2],[69,4],[16,7],[72,2],[72,1],[73,4],[73,3],[17,7],[18,9],[19,9],[20,12],[20,12],[84,4],[84,3],[11,5],[21,2],[87,7],[87,6],[12,3],[22,4],[23,2],[23,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2: case 4: case 6: case 88:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 3: case 5: case 7:
this.$ = [$$[$0]]
break;
case 8:
this.$ = {text: 'clase', children: $$[$0]};
break;
case 9:
this.$ = {text: 'importar', children: [{text: $$[$0]}]};
break;
case 10: case 24:
this.$ = {text: 'invocacion', children: $$[$0]};
break;
case 11: case 25:
this.$ = {text: 'declarar', children: $$[$0]};
break;
case 12: case 26:
this.$ = {text: 'if', children: $$[$0]};
break;
case 13: case 27:
this.$ = {text: 'switch', children: $$[$0]};
break;
case 14: case 28:
this.$ = {text: 'while', children: $$[$0]};
break;
case 15: case 29:
this.$ = {text: 'do', children: $$[$0]};
break;
case 16: case 30:
this.$ = {text: 'imprimir', children: [{text: $$[$0]}]};
break;
case 17: case 31:
this.$ = {text: 'for', children: $$[$0]};
break;
case 18:
this.$ = {text: 'metodo', children: $$[$0]};
break;
case 19: case 32:
this.$ = {text: 'reasignar', children: $$[$0]};
break;
case 20: case 33: case 50: case 51: case 52: case 53: case 54: case 76: case 77: case 79: case 80: case 82: case 85: case 100:
this.$ = $$[$0]
break;
case 21: case 34:
this.$ = {text: 'incremento', children: [{text: $$[$0-2]}]};
break;
case 22: case 35:
this.$ = {text: 'decremento', children: [{text: $$[$0-2]}]};
break;
case 23: case 36:
this.$ = {text: 'return', children: [$$[$0-1]]};
break;
case 37:
this.$ = [{text: 'nombre', children: [{text: $$[$0-4]}]}, {text: 'parametros', children: $$[$0-2]}];
break;
case 38: case 42:
$$[$0-2].push({text: $$[$0]}); this.$ = $$[$0-2]
break;
case 39: case 43:
this.$ = [{text: $$[$0]}];
break;
case 40:
this.$ = [{text: 'tipo', children: [$$[$0-2]]}, {text: 'variables', children: $$[$0-1]}, {text: 'valor', children: [$$[$0]]}];
break;
case 41:
this.$ = [{text: 'funcion', children: [{text: 'nombre', children: [{text: $$[$0-6]}]}, {text: 'parametros', children: $$[$0-4]}, {text: 'instrucciones', children: $$[$0-1]}]}];
break;
case 44: case 103:
this.$ = $$[$0-1]
break;
case 45: case 48:
this.$ = {text: 'nulo'};
break;
case 46:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 47: case 89:
this.$ = [$$[$0]];
break;
case 49:
this.$ = {text: 'parametro', children: [{text: 'tipo', children: [{text: $$[$0-1]}]}, {text: 'nombre', children: [{text: $$[$0]}]}]};
break;
case 55:
this.$ = {text: 'funcion', children: [{text: 'nombre', children: [{text: $$[$0-3]}]}, {text: 'parametros', children: $$[$0-1]}]};
break;
case 56:
this.$ = {text: 'funcion', children: [{text: 'nombre', children: [{text: $$[$0-2]}]}]};
break;
case 57:
this.$ = $$[$0-2] + '+' + $$[$0]
break;
case 58:
this.$ = $$[$0-2] + '-' + $$[$0]
break;
case 59:
this.$ = $$[$0-2] + '*' + $$[$0]
break;
case 60:
this.$ = $$[$0-2] + '/' + $$[$0]
break;
case 61:
this.$ = $$[$0-2] + '%' + $$[$0]
break;
case 62:
this.$ = $$[$0-2] + '^' + $$[$0]
break;
case 63:
this.$ = '-' + $$[$0]
break;
case 64:
this.$ = $$[$0-1] + '++'
break;
case 65:
this.$ = $$[$0-1] + '--'
break;
case 66:
this.$ = $$[$0-2] + '==' + $$[$0]
break;
case 67:
this.$ = $$[$0-2] + '!=' + $$[$0]
break;
case 68:
this.$ = $$[$0-2] + '>' + $$[$0]
break;
case 69:
this.$ = $$[$0-2] + '<' + $$[$0]
break;
case 70:
this.$ = $$[$0-2] + '>=' + $$[$0]
break;
case 71:
this.$ = $$[$0-2] + '<=' + $$[$0]
break;
case 72:
this.$ = $$[$0-2] + '&&' + $$[$0]
break;
case 73:
this.$ = $$[$0-2] + '||' + $$[$0]
break;
case 74:
this.$ = '!' + $$[$0]
break;
case 75:
this.$ = '(' + $$[$0-1] + ')'
break;
case 78:
this.$ = $$[$0].replace(/\"/g, "")
break;
case 81:
this.$ = $$[$0].replace(/\'/g, "")
break;
case 83:
this.$ = [{text: 'condicion', children: [{text: $$[$0-5]}]}, {text: 'instrucciones', children: $$[$0-2]}, {text: 'else', children: $$[$0]}];
break;
case 84: case 92:
this.$ = [{text: 'condicion', children: [{text: $$[$0-4]}]}, {text: 'instrucciones', children: $$[$0-1]}];
break;
case 86:
this.$ = [{text: 'instrucciones', children: $$[$0-1]}];
break;
case 87:
this.$ = [{text: 'dato', children: [{text: $$[$0-4]}]}, {text: 'cases', children: $$[$0-1]}];
break;
case 90:
this.$ = {text: 'case', children: [{text: 'nombre', children: [{text: $$[$0-2]}]}, {text: 'instrucciones', children: $$[$0]}]};
break;
case 91:
this.$ = {text: 'case', children: [{text: 'default'}, {text: 'instrucciones', children: $$[$0]}]};
break;
case 93:
this.$ = [{text: 'instrucciones', children: $$[$0-6]}, {text: 'condicion', children: [{text: $$[$0-2]}]}];
break;
case 94:
this.$ = $$[$0-2];
break;
case 95:
this.$ = [{text: 'iniciacion', children: $$[$0-9]}, {text: 'condicion', children: [{text: $$[$0-7]}]}, {text: 'instrucciones', children: [$$[$0-1]]}, {text: 'update', children: [{text: 'incremento', children: [{text: $$[$0-5]}]}]}];
break;
case 96:
this.$ = [{text: 'iniciacion', children: $$[$0-9]}, {text: 'condicion', children: [{text: $$[$0-7]}]}, {text: 'instrucciones', children: [$$[$0-1]]}, {text: 'update', children: [{text: 'decremento', children: [{text: $$[$0-5]}]}]}];
break;
case 97: case 98:
this.$ = [{text: 'nombre', children: [{text: $$[$0-2]}]}, {text: 'valor', children: [{text: $$[$0]}]}];
break;
case 99:
this.$ = [{text: 'nombre', children: [{text: $$[$0-3]}]}, {text: 'instrucciones', children: $$[$0-1]}];
break;
case 101:
this.$ = [{text: 'nombre', children: [{text: $$[$0-6]}]}, {text: 'parametros', children: $$[$0-4]}, {text: 'instrucciones', children: $$[$0-1]}];
break;
case 102:
this.$ = [{text: 'nombre', children: [{text: $$[$0-5]}]}, {text: 'instrucciones', children: $$[$0-1]}];
break;
case 104:
this.$ = [{text: 'variable', children: [{text: $$[$0-3]}]}, {text: 'valor', children: [{text: $$[$0-1]}]}];
break;
case 105: case 106:
this.$ = {text: $$[$0-1]};
break;
}
},
table: [{3:1,4:2,6:3,11:4,12:5,85:$V0,89:$V1},{1:[3]},{5:[1,8],6:9,11:4,12:5,85:$V0,89:$V1},o($V2,[2,3]),o($V2,[2,8]),o($V2,[2,9]),{24:[1,10]},{24:[1,11]},{1:[2,1]},o($V2,[2,2]),{38:[1,12]},{26:[1,13]},{9:14,10:15,13:16,14:17,15:18,16:19,17:20,18:21,19:22,20:23,21:24,22:25,23:26,24:$V3,28:$V4,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,86:$Vg,90:$Vh,91:$Vi},o($V2,[2,103]),{10:45,13:16,14:17,15:18,16:19,17:20,18:21,19:22,20:23,21:24,22:25,23:26,24:$V3,28:$V4,34:29,39:[1,44],42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,86:$Vg,90:$Vh,91:$Vi},o($Vj,[2,7]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),{25:[1,46],27:[1,47],30:$Vk,40:$Vl},{24:$Vm,29:50,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:[1,62],35:61},{30:[1,63]},{30:[1,64]},{30:[1,65]},{38:[1,66]},{80:[1,67]},{30:[1,68]},{24:[1,70],87:69,88:[1,71]},{26:[1,72]},{26:[1,73]},{24:[2,50]},{24:[2,51]},{24:[2,52]},{24:[2,53]},{24:[2,54]},o($V2,[2,99]),o($Vj,[2,6]),{26:[1,74]},{26:[1,75]},{24:$Vm,29:77,30:$Vn,31:76,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:78,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{25:$Vv,26:[1,79],27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},o($VL,$VM,{30:[1,96]}),{24:$Vm,29:97,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:98,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:99,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($VL,[2,76]),o($VN,[2,77]),o($VN,[2,78]),o($VN,[2,80]),o($VN,[2,81]),o($VN,[2,82]),{26:[1,103],33:[1,101],36:100,40:[1,102]},o($VO,[2,43],{30:[1,104]}),{24:$Vm,29:105,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:106,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:107,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{7:108,8:109,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},{81:[1,122]},{24:[1,125],34:124,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,84:123},o($Vj,[2,100]),{30:[1,126]},{30:[1,127]},o($VR,[2,105]),o($VR,[2,106]),o($Vj,[2,21]),o($Vj,[2,22]),{32:[1,128],33:$VS},o($VT,[2,39],{25:$Vv,27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK}),{25:$Vv,26:[1,130],27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},o($Vj,[2,23]),{24:$Vm,29:131,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:132,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:133,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:134,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:135,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:136,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($VL,[2,64]),o($VL,[2,65]),{24:$Vm,29:137,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:138,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:139,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:140,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:141,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:142,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:143,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:144,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:77,30:$Vn,31:145,32:[1,146],48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($VL,[2,63]),o($VU,[2,74],{25:$Vv,27:$Vw}),{25:$Vv,27:$Vw,32:[1,147],47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},o($VR,[2,40]),{24:[1,148]},{24:$Vm,29:149,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($VR,[2,45]),o($VT,$VV,{37:150,41:151,34:152,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9}),{25:$Vv,27:$Vw,32:[1,153],47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},{25:$Vv,27:$Vw,32:[1,154],47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},{25:$Vv,27:$Vw,32:[1,155],47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},{8:157,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,39:[1,156],42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},o($VW,[2,5]),o($VW,[2,24]),o($VW,[2,25]),o($VW,[2,26]),o($VW,[2,27]),o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),o($VW,[2,31]),o($VW,[2,32]),o($VW,[2,33]),{25:[1,158],27:[1,159],30:$Vk,40:$Vl},{24:$Vm,29:160,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{80:[1,161]},{26:[1,162]},{24:[1,163]},{40:[1,164]},o($VT,$VV,{41:151,34:152,37:165,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9}),{32:[1,166]},{26:[1,167]},{24:$Vm,29:168,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},o($VR,[2,104]),o($VX,[2,57],{25:$Vv,27:$Vw,49:$Vz,50:$VA,51:$VB,52:$VC}),o($VX,[2,58],{25:$Vv,27:$Vw,49:$Vz,50:$VA,51:$VB,52:$VC}),o($VY,[2,59],{25:$Vv,27:$Vw,52:$VC}),o($VY,[2,60],{25:$Vv,27:$Vw,52:$VC}),o($VY,[2,61],{25:$Vv,27:$Vw,52:$VC}),o($VU,[2,62],{25:$Vv,27:$Vw}),o($VZ,[2,66],{25:$Vv,27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,55:$VF,56:$VG,57:$VH,58:$VI}),o($VZ,[2,67],{25:$Vv,27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,55:$VF,56:$VG,57:$VH,58:$VI}),o($V_,[2,68],{25:$Vv,27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC}),o($V_,[2,69],{25:$Vv,27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC}),o($V_,[2,70],{25:$Vv,27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC}),o($V_,[2,71],{25:$Vv,27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC}),o($VZ,[2,72],{25:$Vv,27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI}),o([26,32,33,60],[2,73],{25:$Vv,27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ}),{32:[1,169],33:$VS},o($VL,[2,56]),o($VL,[2,75]),o($VO,[2,42]),{25:$Vv,26:[1,170],27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},{32:[1,171],33:$V$},o($VT,[2,47]),{24:[1,173]},{38:[1,174]},{38:[1,175]},{38:[1,176]},{77:[1,177]},o($VW,[2,4]),{26:[1,178]},{26:[1,179]},{25:$Vv,26:[1,180],27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},{82:[1,181]},{24:$Vm,29:182,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{40:[1,183]},{24:$Vm,29:184,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{32:[1,185],33:$V$},{38:[1,186]},o($VR,[2,37]),o($VT,[2,38],{25:$Vv,27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK}),o($VL,[2,55]),o($VR,[2,44]),{38:[1,187]},{34:152,41:188,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9},o($VT,[2,49]),{7:189,8:109,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},{72:190,73:191,74:$V01,76:$V11},{7:194,8:109,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},{30:[1,195]},o($VW,[2,34]),o($VW,[2,35]),o($VW,[2,36]),{30:[1,196]},{25:$Vv,26:[1,197],27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},{24:$Vm,29:198,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{25:$Vv,26:[2,98],27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},{38:[1,199]},{7:200,8:109,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},{7:201,8:109,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},o($VT,[2,46]),{8:157,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,39:[1,202],42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},{39:[1,203],73:204,74:$V01,76:$V11},o($V21,[2,89]),{24:[1,206],62:205,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{75:[1,207]},{8:157,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,39:[1,208],42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},{24:$Vm,29:209,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:$Vm,29:210,30:$Vn,48:$Vo,61:$Vp,62:55,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu},{24:[1,211]},{25:$Vv,26:[2,97],27:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},{7:212,8:109,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},{8:157,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,39:[1,213],42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},{8:157,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,39:[1,214],42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},o($VR,[2,84],{69:215,70:[1,216]}),o($VR,[2,87]),o($V21,[2,88]),{75:[1,217]},{75:$VM},{7:218,8:109,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},o($VR,[2,92]),{25:$Vv,27:$Vw,32:[1,219],47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},{25:$Vv,27:$Vw,32:[1,220],47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK},{25:[1,221],27:[1,222]},{8:157,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,39:[1,223],42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},o($Vj,[2,102]),o($VR,[2,41]),o($VR,[2,83]),{15:224,38:[1,225],68:$Va},{7:226,8:109,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},o($V21,[2,91],{34:29,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,8:157,24:$VP,28:$VQ,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi}),{26:[1,227]},{26:[1,228]},{32:[1,229]},{32:[1,230]},o($Vj,[2,101]),o($VR,[2,85]),{7:231,8:109,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},o($V21,[2,90],{34:29,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,8:157,24:$VP,28:$VQ,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi}),o($VR,[2,93]),o($VR,[2,94]),{38:[1,232]},{38:[1,233]},{8:157,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,39:[1,234],42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},{8:235,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},{8:236,13:110,14:111,15:112,16:113,17:114,18:115,19:116,20:117,22:118,23:119,24:$VP,28:$VQ,34:29,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,68:$Va,71:$Vb,77:$Vc,78:$Vd,79:$Ve,83:$Vf,90:$Vh,91:$Vi},o($VR,[2,86]),{39:[1,237]},{39:[1,238]},o($VR,[2,95]),o($VR,[2,96])],
defaultActions: {8:[2,1],39:[2,50],40:[2,51],41:[2,52],42:[2,53],43:[2,54],206:[2,79]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:/**/
break;
case 2:/**/
break;
case 3:return 85
break;
case 4:return 89
break;
case 5:return 42
break;
case 6:return 43
break;
case 7:return 44
break;
case 8:return 45
break;
case 9:return 46
break;
case 10:return 68
break;
case 11:return 70
break;
case 12:return 71
break;
case 13:return 74
break;
case 14:return 76
break;
case 15:return 90
break;
case 16:return 91
break;
case 17:return 77
break;
case 18:return 78
break;
case 19:return 83
break;
case 20:return 77
break;
case 21:return 86
break;
case 22:return 88
break;
case 23:return 79
break;
case 24:return 81
break;
case 25:return 82
break;
case 26:return 28
break;
case 27:return 67
break;
case 28:return 24
break;
case 29:return 63
break;
case 30:return 65
break;
case 31:return 64
break;
case 32:return 66
break;
case 33:return 25
break;
case 34:return 47
break;
case 35:return 27
break;
case 36:return 48
break;
case 37:return 49
break;
case 38:return 50
break;
case 39:return 52
break;
case 40:return 51
break;
case 41:return 53
break;
case 42:return 40
break;
case 43:return 57
break;
case 44:return 55
break;
case 45:return 58
break;
case 46:return 56
break;
case 47:return 59
break;
case 48:return 60
break;
case 49:return 54
break;
case 50:return 61
break;
case 51:return 38
break;
case 52:return 39
break;
case 53:return 26
break;
case 54:return 30
break;
case 55:return 32
break;
case 56:return 75
break;
case 57:return 80
break;
case 58:return 33
break;
case 59:return 5
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:(\s|\t|\r))/,/^(?:\/\/.*)/,/^(?:\/\*[^\*]*\*\/)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:return\b)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+)/,/^(?:false|true\b)/,/^(?:"[^\"]*")/,/^(?:'[^\'']')/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorJSTREE;
exports.Parser = analizadorJSTREE.Parser;
exports.parse = function () { return analizadorJSTREE.parse.apply(analizadorJSTREE, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}