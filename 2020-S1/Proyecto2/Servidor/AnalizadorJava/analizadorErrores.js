/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorErrores = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,8],$V3=[2,5,85,89],$V4=[1,30],$V5=[1,28],$V6=[1,29],$V7=[1,41],$V8=[1,42],$V9=[1,43],$Va=[1,44],$Vb=[1,45],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[2,24,28,39,42,43,44,45,46,68,71,77,78,79,83,86,90,91],$Vm=[1,50],$Vn=[1,51],$Vo=[1,53],$Vp=[1,56],$Vq=[1,54],$Vr=[1,55],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[2,24],$Vy=[1,82],$Vz=[1,91],$VA=[1,92],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[25,26,27,32,33,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$VQ=[2,86],$VR=[25,26,27,32,33,47,48,49,50,51,52,53,54,55,56,57,58,59,60,75],$VS=[2,26,33,40],$VT=[1,128],$VU=[1,126],$VV=[1,127],$VW=[2,24,28,39,42,43,44,45,46,68,71,74,76,77,78,79,83,86,90,91],$VX=[1,137],$VY=[32,33],$VZ=[26,32,33,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$V_=[2,55],$V$=[1,160],$V01=[2,24,28,39,42,43,44,45,46,68,71,74,76,77,78,79,83,90,91],$V11=[26,32,33,47,48,53,54,55,56,57,58,59,60],$V21=[26,32,33,47,48,49,50,51,53,54,55,56,57,58,59,60],$V31=[26,32,33,59,60],$V41=[26,32,33,53,54,59,60],$V51=[1,181],$V61=[1,202],$V71=[1,203],$V81=[39,74,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"l_ins_p":4,"EOF":5,"ins_p":6,"l_ins_s":7,"ins_s":8,"l_ins_t":9,"ins_t":10,"func_crear_clase":11,"func_import":12,"func_llamar_metodo_funcion":13,"func_declarar":14,"func_if":15,"func_switch":16,"func_while":17,"func_do":18,"func_print":19,"func_for":20,"func_crear_metodo":21,"func_reasignar":22,"func_break_continue":23,"IDENTIFICADOR":24,"++":25,";":26,"--":27,"RETURN":28,"e":29,"(":30,"lista_parametros":31,")":32,",":33,"tipo":34,"lista_identificador":35,"tipo_declaracion":36,"parametros":37,"{":38,"}":39,"=":40,"t_param":41,"INT":42,"DOUBLE":43,"BOOLEAN":44,"CHAR":45,"STRING":46,"+":47,"-":48,"*":49,"/":50,"%":51,"^":52,"==":53,"!=":54,">":55,"<":56,">=":57,"<=":58,"&&":59,"||":60,"!":61,"dato":62,"ENTERO":63,"CADENA":64,"BOLEANO":65,"CARACTER":66,"DOBLE":67,"IF":68,"ver_else":69,"ELSE":70,"SWITCH":71,"lista_cases_default":72,"t_case":73,"CASE":74,":":75,"DEFAULT":76,"WHILE":77,"DO":78,"SYSTEM":79,".":80,"OUT":81,"PRINTLN":82,"FOR":83,"for_inicio":84,"CLASS":85,"VOID":86,"tipo_metodo":87,"MAIN":88,"IMPORT":89,"BREAK":90,"CONTINUE":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",24:"IDENTIFICADOR",25:"++",26:";",27:"--",28:"RETURN",30:"(",32:")",33:",",38:"{",39:"}",40:"=",42:"INT",43:"DOUBLE",44:"BOOLEAN",45:"CHAR",46:"STRING",47:"+",48:"-",49:"*",50:"/",51:"%",52:"^",53:"==",54:"!=",55:">",56:"<",57:">=",58:"<=",59:"&&",60:"||",61:"!",63:"ENTERO",64:"CADENA",65:"BOLEANO",66:"CARACTER",67:"DOBLE",68:"IF",70:"ELSE",71:"SWITCH",74:"CASE",75:":",76:"DEFAULT",77:"WHILE",78:"DO",79:"SYSTEM",80:".",81:"OUT",82:"PRINTLN",83:"FOR",85:"CLASS",86:"VOID",88:"MAIN",89:"IMPORT",90:"BREAK",91:"CONTINUE"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[9,2],[9,1],[6,1],[6,1],[6,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,3],[10,3],[10,3],[10,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,3],[8,3],[8,3],[8,1],[13,5],[31,3],[31,1],[31,1],[14,3],[14,8],[35,3],[35,1],[35,1],[36,3],[36,1],[36,1],[37,3],[37,1],[37,1],[37,0],[41,2],[34,1],[34,1],[34,1],[34,1],[34,1],[29,4],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,3],[29,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[15,8],[15,7],[69,2],[69,4],[16,7],[72,2],[72,1],[72,1],[73,4],[73,3],[17,7],[18,9],[19,9],[20,12],[20,12],[84,4],[84,3],[84,1],[11,5],[21,2],[87,7],[87,6],[87,1],[12,3],[22,4],[23,2],[23,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2: case 4: case 6:
 this.$ = $$[$0-1] + "" + $$[$0] 
break;
case 3: case 5: case 7: case 8: case 9: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 42: case 53: case 70: case 81: case 83: case 92: case 96: case 99:
this.$ = $$[$0]
break;
case 10:
this.$ = "E-S-" + yytext + "-" + _$[$0].first_line + "-" + _$[$0].first_column + "\n"
break;
case 22: case 23: case 24: case 36: case 37: case 38: case 47: case 57: case 58: case 59: case 60: case 61: case 63: case 84: case 85: case 86: case 87: case 88: case 89:
this.$ = ""
break;
case 25: case 39: case 43: case 48: case 51: case 54: case 97: case 107: case 112:
this.$ = "E-S-" + yytext + "-" + _$[$0].first_line + "-" + _$[$0].first_column + "\n";
break;
case 40: case 46: case 102:
this.$ = $$[$0-2]
break;
case 41: case 52: case 64: case 65: case 66: case 67: case 68: case 69: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80:
this.$ = $$[$0-2] + "" + $$[$0]
break;
case 44:
this.$ = $$[$0-2] + "" + $$[$0-1] + $$[$0]
break;
case 45:
this.$ = $$[$0-7] + "" + $$[$0-4]
break;
case 49: case 56: case 62: case 71: case 72: case 82: case 93:
this.$ = $$[$0-1]
break;
case 50: case 55: case 113: case 115: case 116:
 this.$ = "" 
break;
case 90:
this.$ = $$[$0-5] + $$[$0-2] + $$[$0]
break;
case 91: case 94: case 100:
this.$ = $$[$0-4] + $$[$0-1]
break;
case 95:
this.$ = $$[$0-1] + "" + $$[$0]
break;
case 98:
this.$ = $$[$0-2] + $$[$0]
break;
case 101:
this.$ = $$[$0-6] + $$[$0-2]
break;
case 103: case 104:
this.$ = $$[$0-9] + $$[$0-7] + $$[$0-1]
break;
case 105:
 this.$ = $$[$0-3] + "" + $$[$0] 
break;
case 106: case 109:
 this.$ = $$[$0] 
break;
case 108: case 110: case 111: case 114:
 this.$ = $$[$0-1] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,11:4,12:5,85:$V1,89:$V2},{1:[3]},{2:$V0,5:[1,9],6:10,11:4,12:5,85:$V1,89:$V2},o($V3,[2,3]),o($V3,[2,8]),o($V3,[2,9]),o($V3,[2,10]),{24:[1,11]},{24:[1,12]},{1:[2,1]},o($V3,[2,2]),{38:[1,13]},{26:[1,14]},{2:$V4,9:15,10:16,13:17,14:18,15:19,16:20,17:21,18:22,19:23,20:24,21:25,22:26,23:27,24:$V5,28:$V6,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,86:$Vi,90:$Vj,91:$Vk},o($V3,[2,113]),{2:$V4,10:47,13:17,14:18,15:19,16:20,17:21,18:22,19:23,20:24,21:25,22:26,23:27,24:$V5,28:$V6,34:31,39:[1,46],42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,86:$Vi,90:$Vj,91:$Vk},o($Vl,[2,7]),o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),o($Vl,[2,21]),{25:[1,48],27:[1,49],30:$Vm,40:$Vn},{24:$Vo,29:52,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($Vl,[2,25]),{2:[1,65],24:[1,64],35:63},{30:[1,66]},{30:[1,67]},{30:[1,68]},{38:[1,69]},{80:[1,70]},{30:[1,71]},{2:[1,75],24:[1,73],87:72,88:[1,74]},{26:[1,76]},{26:[1,77]},o($Vx,[2,57]),o($Vx,[2,58]),o($Vx,[2,59]),o($Vx,[2,60]),o($Vx,[2,61]),o($V3,[2,108]),o($Vl,[2,6]),{26:[1,78]},{26:[1,79]},{2:$Vy,24:$Vo,29:81,30:$Vp,31:80,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:83,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{25:$Vz,26:[1,84],27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},o($VP,$VQ,{30:[1,101]}),{24:$Vo,29:102,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:103,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:104,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($VP,[2,83]),o($VR,[2,84]),o($VR,[2,85]),o($VR,[2,87]),o($VR,[2,88]),o($VR,[2,89]),{2:[1,109],26:[1,108],33:[1,106],36:105,40:[1,107]},o($VS,[2,47],{30:[1,110]}),o($VS,[2,48]),{24:$Vo,29:111,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:112,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:113,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{2:$VT,7:114,8:115,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},{81:[1,129]},{2:[1,133],24:[1,132],34:131,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,84:130},o($Vl,[2,109]),{30:[1,134]},{30:[1,135]},o($Vl,[2,112]),o($VW,[2,115]),o($VW,[2,116]),o($Vl,[2,22]),o($Vl,[2,23]),{32:[1,136],33:$VX},o($VY,[2,42],{25:$Vz,27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO}),o($VY,[2,43]),{25:$Vz,26:[1,138],27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},o($Vl,$Vx),{24:$Vo,29:139,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:140,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:141,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:142,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:143,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:144,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($VP,[2,71]),o($VP,[2,72]),{24:$Vo,29:145,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:146,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:147,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:148,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:149,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:150,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:151,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:152,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{2:$Vy,24:$Vo,29:81,30:$Vp,31:153,32:[1,154],48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($VP,[2,70]),o($VZ,[2,81],{25:$Vz,27:$VA}),{25:$Vz,27:$VA,32:[1,155],47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},o($VW,[2,44]),{24:[1,156]},{24:$Vo,29:157,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($VW,[2,50]),o($VW,[2,51]),o($VY,$V_,{37:158,41:159,34:161,2:$V$,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb}),{25:$Vz,27:$VA,32:[1,162],47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{25:$Vz,27:$VA,32:[1,163],47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{25:$Vz,27:$VA,32:[1,164],47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{2:$VT,8:166,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,39:[1,165],42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},o($V01,[2,5]),o($V01,[2,26]),o($V01,[2,27]),o($V01,[2,28]),o($V01,[2,29]),o($V01,[2,30]),o($V01,[2,31]),o($V01,[2,32]),o($V01,[2,33]),o($V01,[2,34]),o($V01,[2,35]),{25:[1,167],27:[1,168],30:$Vm,40:$Vn},{24:$Vo,29:169,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($V01,[2,39]),{80:[1,170]},{26:[1,171]},{24:[1,172]},{40:[1,173]},{26:[2,107]},o($VY,$V_,{41:159,34:161,37:174,2:$V$,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb}),{32:[1,175]},{26:[1,176]},{24:$Vo,29:177,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},o($VW,[2,114]),o($V11,[2,64],{25:$Vz,27:$VA,49:$VD,50:$VE,51:$VF,52:$VG}),o($V11,[2,65],{25:$Vz,27:$VA,49:$VD,50:$VE,51:$VF,52:$VG}),o($V21,[2,66],{25:$Vz,27:$VA,52:$VG}),o($V21,[2,67],{25:$Vz,27:$VA,52:$VG}),o($V21,[2,68],{25:$Vz,27:$VA,52:$VG}),o($VZ,[2,69],{25:$Vz,27:$VA}),o($V31,[2,73],{25:$Vz,27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,55:$VJ,56:$VK,57:$VL,58:$VM}),o($V31,[2,74],{25:$Vz,27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,55:$VJ,56:$VK,57:$VL,58:$VM}),o($V41,[2,75],{25:$Vz,27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG}),o($V41,[2,76],{25:$Vz,27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG}),o($V41,[2,77],{25:$Vz,27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG}),o($V41,[2,78],{25:$Vz,27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG}),o($V31,[2,79],{25:$Vz,27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM}),o([26,32,33,60],[2,80],{25:$Vz,27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN}),{32:[1,178],33:$VX},o($VP,[2,63]),o($VP,[2,82]),o($VS,[2,46]),{25:$Vz,26:[1,179],27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{32:[1,180],33:$V51},o($VY,[2,53]),o($VY,[2,54]),{24:[1,182]},{38:[1,183]},{38:[1,184]},{38:[1,185]},{77:[1,186]},o($V01,[2,4]),{26:[1,187]},{26:[1,188]},{25:$Vz,26:[1,189],27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{82:[1,190]},{24:$Vo,29:191,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{40:[1,192]},{24:$Vo,29:193,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{32:[1,194],33:$V51},{38:[1,195]},o($VW,[2,40]),o($VY,[2,41],{25:$Vz,27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO}),o($VP,[2,62]),o($VW,[2,49]),{38:[1,196]},{34:161,41:197,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb},o($VY,[2,56]),{2:$VT,7:198,8:115,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},{2:[1,201],72:199,73:200,74:$V61,76:$V71},{2:$VT,7:204,8:115,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},{30:[1,205]},o($V01,[2,36]),o($V01,[2,37]),o($V01,[2,38]),{30:[1,206]},{25:$Vz,26:[1,207],27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{24:$Vo,29:208,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{25:$Vz,26:[2,106],27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{38:[1,209]},{2:$VT,7:210,8:115,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},{2:$VT,7:211,8:115,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},o($VY,[2,52]),{2:$VT,8:166,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,39:[1,212],42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},{39:[1,213],73:214,74:$V61,76:$V71},o($V81,[2,96]),o($V81,[2,97]),{24:[1,216],62:215,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{75:[1,217]},{2:$VT,8:166,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,39:[1,218],42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},{24:$Vo,29:219,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:$Vo,29:220,30:$Vp,48:$Vq,61:$Vr,62:57,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw},{24:[1,221]},{25:$Vz,26:[2,105],27:$VA,47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{2:$VT,7:222,8:115,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},{2:$VT,8:166,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,39:[1,223],42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},{2:$VT,8:166,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,39:[1,224],42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},o($VW,[2,91],{69:225,70:[1,226]}),o($VW,[2,94]),o($V81,[2,95]),{75:[1,227]},{75:$VQ},{2:$VT,7:228,8:115,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},o($VW,[2,100]),{25:$Vz,27:$VA,32:[1,229],47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{25:$Vz,27:$VA,32:[1,230],47:$VB,48:$VC,49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{25:[1,231],27:[1,232]},{2:$VT,8:166,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,39:[1,233],42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},o($Vl,[2,111]),o($VW,[2,45]),o($VW,[2,90]),{15:234,38:[1,235],68:$Vc},{2:$VT,7:236,8:115,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},o($V81,[2,99],{34:31,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,8:166,2:$VT,24:$VU,28:$VV,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk}),{26:[1,237]},{26:[1,238]},{32:[1,239]},{32:[1,240]},o($Vl,[2,110]),o($VW,[2,92]),{2:$VT,7:241,8:115,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},o($V81,[2,98],{34:31,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,8:166,2:$VT,24:$VU,28:$VV,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk}),o($VW,[2,101]),o($VW,[2,102]),{38:[1,242]},{38:[1,243]},{2:$VT,8:166,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,39:[1,244],42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},{2:$VT,8:245,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},{2:$VT,8:246,13:116,14:117,15:118,16:119,17:120,18:121,19:122,20:123,22:124,23:125,24:$VU,28:$VV,34:31,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,68:$Vc,71:$Vd,77:$Ve,78:$Vf,79:$Vg,83:$Vh,90:$Vj,91:$Vk},o($VW,[2,93]),{39:[1,247]},{39:[1,248]},o($VW,[2,103]),o($VW,[2,104])],
defaultActions: {9:[2,1],133:[2,107],216:[2,86]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:/**/
break;
case 2:/**/
break;
case 3:return 85
break;
case 4:return 89
break;
case 5:return 42
break;
case 6:return 43
break;
case 7:return 44
break;
case 8:return 45
break;
case 9:return 46
break;
case 10:return 68
break;
case 11:return 70
break;
case 12:return 71
break;
case 13:return 74
break;
case 14:return 76
break;
case 15:return 90
break;
case 16:return 91
break;
case 17:return 77
break;
case 18:return 78
break;
case 19:return 83
break;
case 20:return 77
break;
case 21:return 86
break;
case 22:return 88
break;
case 23:return 79
break;
case 24:return 81
break;
case 25:return 82
break;
case 26:return 28
break;
case 27:return 67
break;
case 28:return 24
break;
case 29:return 63
break;
case 30:return 65
break;
case 31:return 64
break;
case 32:return 66
break;
case 33:return 25
break;
case 34:return 47
break;
case 35:return 27
break;
case 36:return 48
break;
case 37:return 49
break;
case 38:return 50
break;
case 39:return 52
break;
case 40:return 51
break;
case 41:return 53
break;
case 42:return 40
break;
case 43:return 57
break;
case 44:return 55
break;
case 45:return 58
break;
case 46:return 56
break;
case 47:return 59
break;
case 48:return 60
break;
case 49:return 54
break;
case 50:return 61
break;
case 51:return 38
break;
case 52:return 39
break;
case 53:return 26
break;
case 54:return 30
break;
case 55:return 32
break;
case 56:return 75
break;
case 57:return 80
break;
case 58:return 33
break;
case 59:return 5
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:(\s|\t|\r))/,/^(?:\/\/.*)/,/^(?:\/\*[^\*]*\*\/)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:return\b)/,/^(?:[0-9]+(\.[0-9]+))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+)/,/^(?:false|true\b)/,/^(?:"[^\"]*")/,/^(?:'[^\'']')/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorErrores;
exports.Parser = analizadorErrores.Parser;
exports.parse = function () { return analizadorErrores.parse.apply(analizadorErrores, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}